{
  "kind": "parse",
  "sql_stmt_list": {
    "kind": "sql_stmt_list",
    "sql_stmt_list_002": [
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_BROKER_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_BROKER SELECT TPCDI_WH.PUBLIC.DIM_BROKER_SEQ.NEXTVAL, EMPLOYEEID, MANAGERID, EMPLOYEEFIRSTNAME, EMPLOYEELASTNAME, EMPLOYEEMI, EMPLOYEEBRANCH, EMPLOYEEOFFICE, EMPLOYEEPHONE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP() FROM TPCDI_STG.PUBLIC.HR_STG_STM WHERE EMPLOYEEJOBCODE = 314 AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'FALSE'\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_BROKER_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  var tsk_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK SUSPEND\"}\n    );\n  tsk_stmt.execute();\n  return \"Broker records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_DATE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_DATE USING ( SELECT SK_DATEID ,DATEVALUE ,DATEDESC ,CALENDARYEARID ,CALENDARYEARDESC ,CALENDARQTRID ,CALENDARQTRDESC ,CALENDARMONTHID ,CALENDARMONTHDESC ,CALENDARWEEKID ,CALENDARWEEKDESC ,DAYOFWEEKNUM ,DAYOFWEEKDESC ,FISCALYEARID ,FISCALYEARDESC ,FISCALQTRID ,FISCALQTRDESC ,HOLIDAYFLAG ,METADATA$ACTION ,METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.DATE_STG_STM ) DATE_STG ON TPCDI_WH.PUBLIC.DIM_DATE.DATE_ID = DATE_STG.SK_DATEID WHEN MATCHED AND DATE_STG.METADATA$ACTION = 'INSERT' AND DATE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_DATE.DATE_VALUE = DATE_STG.DATEVALUE ,DIM_DATE.DATE_DESC = DATE_STG.DATEDESC ,DIM_DATE.CALENDAR_YEAR_ID = DATE_STG.CALENDARYEARID ,DIM_DATE.CALENDAR_YEAR_DESC = DATE_STG.CALENDARYEARDESC ,DIM_DATE.CALENDAR_QTR_ID = DATE_STG.CALENDARQTRID ,DIM_DATE.CALENDAR_QTR_DESC = DATE_STG.CALENDARQTRDESC ,DIM_DATE.CALENDAR_MONTH_ID = DATE_STG.CALENDARMONTHID ,DIM_DATE.CALENDAR_MONTH_DESC = DATE_STG.CALENDARMONTHDESC ,DIM_DATE.CALENDAR_WEEK_ID = DATE_STG.CALENDARWEEKID ,DIM_DATE.CALENDAR_WEEK_DESC = DATE_STG.CALENDARWEEKDESC ,DIM_DATE.DAY_OF_WEEK_NUM = DATE_STG.DAYOFWEEKNUM ,DIM_DATE.DAY_OF_WEEK_DESC = DATE_STG.DAYOFWEEKDESC ,DIM_DATE.FISCAL_YEAR_ID = DATE_STG.FISCALYEARID ,DIM_DATE.FISCAL_YEAR_DESC = DATE_STG.FISCALYEARDESC ,DIM_DATE.FISCAL_QTR_ID = DATE_STG.FISCALQTRID ,DIM_DATE.FISCAL_QTR_DESC = DATE_STG.FISCALQTRDESC ,DIM_DATE.HOLIDAY_FLAG = DATE_STG.HOLIDAYFLAG WHEN NOT MATCHED AND DATE_STG.METADATA$ACTION = 'INSERT' AND DATE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (   DATE_ID   ,DATE_VALUE   ,DATE_DESC   ,CALENDAR_YEAR_ID   ,CALENDAR_YEAR_DESC   ,CALENDAR_QTR_ID   ,CALENDAR_QTR_DESC   ,CALENDAR_MONTH_ID   ,CALENDAR_MONTH_DESC   ,CALENDAR_WEEK_ID   ,CALENDAR_WEEK_DESC   ,DAY_OF_WEEK_NUM   ,DAY_OF_WEEK_DESC   ,FISCAL_YEAR_ID   ,FISCAL_YEAR_DESC   ,FISCAL_QTR_ID   ,FISCAL_QTR_DESC   ,HOLIDAY_FLAG ) VALUES (   DATE_STG.SK_DATEID   ,DATE_STG.DATEVALUE   ,DATE_STG.DATEDESC   ,DATE_STG.CALENDARYEARID   ,DATE_STG.CALENDARYEARDESC   ,DATE_STG.CALENDARQTRID   ,DATE_STG.CALENDARQTRDESC   ,DATE_STG.CALENDARMONTHID   ,DATE_STG.CALENDARMONTHDESC   ,DATE_STG.CALENDARWEEKID   ,DATE_STG.CALENDARWEEKDESC   ,DATE_STG.DAYOFWEEKNUM   ,DATE_STG.DAYOFWEEKDESC   ,DATE_STG.FISCALYEARID   ,DATE_STG.FISCALYEARDESC   ,DATE_STG.FISCALQTRID   ,DATE_STG.FISCALQTRDESC   ,DATE_STG.HOLIDAYFLAG )\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_DATE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dimension loaded.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_INDUSTRY_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_INDUSTRY USING (SELECT IN_ID, IN_NAME, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.INDUSTRY_STG_STM) INDUSTRY_STG ON TPCDI_WH.PUBLIC.DIM_INDUSTRY.IN_ID = INDUSTRY_STG.IN_ID WHEN MATCHED AND INDUSTRY_STG.METADATA$ACTION = 'INSERT' AND INDUSTRY_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_INDUSTRY.IN_NAME = INDUSTRY_STG.IN_NAME WHEN NOT MATCHED AND INDUSTRY_STG.METADATA$ACTION = 'INSERT' AND INDUSTRY_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (IN_ID, IN_NAME) VALUES (INDUSTRY_STG.IN_ID, INDUSTRY_STG.IN_NAME)\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_INDUSTRY_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dim Industry records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_STATUS_TYPE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_STATUS_TYPE USING (SELECT ST_ID, ST_NAME, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM) STATUS_TYPE_STG ON TPCDI_WH.PUBLIC.DIM_STATUS_TYPE.ST_ID = STATUS_TYPE_STG.ST_ID WHEN MATCHED AND STATUS_TYPE_STG.METADATA$ACTION = 'INSERT' AND STATUS_TYPE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_STATUS_TYPE.ST_NAME = STATUS_TYPE_STG.ST_NAME WHEN NOT MATCHED AND STATUS_TYPE_STG.METADATA$ACTION = 'INSERT' AND STATUS_TYPE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (ST_ID, ST_NAME) VALUES (STATUS_TYPE_STG.ST_ID, STATUS_TYPE_STG.ST_NAME)\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_STATUS_TYPE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dim Status Type records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TAX_RATE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_TAX_RATE USING (SELECT TX_ID, TX_NAME, TX_RATE, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TAXRATE_STG_STM) TAX_RATE_STG ON TPCDI_WH.PUBLIC.DIM_TAX_RATE.TX_ID = TAX_RATE_STG.TX_ID WHEN MATCHED AND TAX_RATE_STG.METADATA$ACTION = 'INSERT' AND TAX_RATE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TAX_RATE.TX_NAME = TAX_RATE_STG.TX_NAME, DIM_TAX_RATE.TX_RATE = TAX_RATE_STG.TX_RATE WHEN NOT MATCHED AND TAX_RATE_STG.METADATA$ACTION = 'INSERT' AND TAX_RATE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TX_ID , TX_NAME , TX_RATE) VALUES (TAX_RATE_STG.TX_ID, TAX_RATE_STG.TX_NAME, TAX_RATE_STG.TX_RATE)\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TAX_RATE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dim Tax Rate records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TIME_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_TIME USING (SELECT SK_TIMEID, TIMEVALUE, HOURID, HOURDESC, MINUTEID, MINUTEDESC, SECONDID, SECONDDESC, MARKETHOURSFLAG, OFFICEHOURSFLAG, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TIME_STG_STM ) TIME_STG ON TPCDI_WH.PUBLIC.DIM_TIME.TIME_ID = TIME_STG.SK_TIMEID WHEN MATCHED AND TIME_STG.METADATA$ACTION = 'INSERT' AND TIME_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TIME.TIME_VALUE = TIME_STG.TIMEVALUE, DIM_TIME.HOUR_ID = TIME_STG.HOURID, DIM_TIME.HOUR_DESC = TIME_STG.HOURDESC, DIM_TIME.MINUTE_ID = TIME_STG.MINUTEID, DIM_TIME.MINUTE_DESC = TIME_STG.MINUTEDESC, DIM_TIME.SECOND_ID = TIME_STG.SECONDID, DIM_TIME.SECOND_DESC = TIME_STG.SECONDDESC, DIM_TIME.MARKET_HOURS_FLAG = TIME_STG.MARKETHOURSFLAG, DIM_TIME.OFFICE_HOURS_FLAG = TIME_STG.OFFICEHOURSFLAG WHEN NOT MATCHED AND TIME_STG.METADATA$ACTION = 'INSERT' AND TIME_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TIME_ID, TIME_VALUE, HOUR_ID, HOUR_DESC, MINUTE_ID, MINUTE_DESC, SECOND_ID, SECOND_DESC, MARKET_HOURS_FLAG, OFFICE_HOURS_FLAG) VALUES (TIME_STG.SK_TIMEID, TIME_STG.TIMEVALUE, TIME_STG.HOURID, TIME_STG.HOURDESC, TIME_STG.MINUTEID, TIME_STG.MINUTEDESC, TIME_STG.SECONDID, TIME_STG.SECONDDESC, TIME_STG.MARKETHOURSFLAG, TIME_STG.OFFICEHOURSFLAG)\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TIME_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dim Time records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TRADE_TYPE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_TRADE_TYPE USING (SELECT TT_ID, TT_NAME, TT_IS_SELL, TT_IS_MRKT, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TRADETYPE_STG_STM ) TRADE_TYPE_STG ON TPCDI_WH.PUBLIC.DIM_TRADE_TYPE.TT_ID = TRADE_TYPE_STG.TT_ID WHEN MATCHED AND TRADE_TYPE_STG.METADATA$ACTION = 'INSERT' AND TRADE_TYPE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TRADE_TYPE.TT_NAME = TRADE_TYPE_STG.TT_NAME, DIM_TRADE_TYPE.TT_IS_SELL = TRADE_TYPE_STG.TT_IS_SELL, DIM_TRADE_TYPE.TT_IS_MRKT = TRADE_TYPE_STG.TT_IS_MRKT WHEN NOT MATCHED AND TRADE_TYPE_STG.METADATA$ACTION = 'INSERT' AND TRADE_TYPE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TT_ID, TT_NAME, TT_IS_SELL, TT_IS_MRKT) VALUES (TRADE_TYPE_STG.TT_ID, TRADE_TYPE_STG.TT_NAME, TRADE_TYPE_STG.TT_IS_SELL, TRADE_TYPE_STG.TT_IS_MRKT)\"}\n    );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_TYPE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return \"Dim Trade Type records processed.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_CASH_BALANCES_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ptask_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK SUSPEND\"}\n      );\n  ptask_stmt.execute();\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_CASH_BALANCES SELECT DIM_ACCOUNT_NOW.SK_CUSTOMER_ID, DIM_ACCOUNT_NOW.SK_ACCOUNT_ID, DIM_DATE.DATE_ID, SUM(CASHTRANSACTION_STG_STM.CT_AMT) OVER (PARTITION BY DIM_ACCOUNT_NOW.SK_ACCOUNT_ID ORDER BY DIM_DATE.DATE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON CASHTRANSACTION_STG_STM.CT_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TO_DATE(CASHTRANSACTION_STG_STM.CT_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) ORDER BY 3 ASC\"}\n      );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_CASH_BALANCES_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  var task_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_TSK SUSPEND\"}\n      );\n  task_stmt.execute();\n  return 'Fact Cash Balances transactions inserted.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_CASH_BALANCES_INCREMENTAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_CASH_BALANCES SELECT DIM_ACCOUNT_NOW.SK_CUSTOMER_ID, DIM_ACCOUNT_NOW.SK_ACCOUNT_ID, DIM_DATE.DATE_ID, CASHTRANSACTION_STG_STM_Q.NEW_CASH + IFNULL(CASHTRANSACTION_STG_STM_Q.LAST_CASH,0), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM (WITH GET_LAST_BALANCE AS (SELECT DISTINCT DIM_ACCOUNT_NOW.ACCOUNT_ID ACCOUNT_ID, LAST_VALUE(FACT_CASH_BALANCES.SK_DATE_ID) OVER (PARTITION BY FACT_CASH_BALANCES.SK_CUSTOMER_ID, FACT_CASH_BALANCES.SK_ACCOUNT_ID ORDER BY FACT_CASH_BALANCES.SK_DATE_ID) AS LAST_SK_DATE_ID, LAST_VALUE(FACT_CASH_BALANCES.CASH) OVER (PARTITION BY FACT_CASH_BALANCES.SK_CUSTOMER_ID, FACT_CASH_BALANCES.SK_ACCOUNT_ID ORDER BY FACT_CASH_BALANCES.SK_DATE_ID) AS LAST_CASH FROM TPCDI_WH.PUBLIC.FACT_CASH_BALANCES INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON         FACT_CASH_BALANCES.SK_ACCOUNT_ID = DIM_ACCOUNT_NOW.SK_ACCOUNT_ID) SELECT CASHTRANSACTION_STG_STM.CT_CA_ID, TO_DATE(CASHTRANSACTION_STG_STM.CT_DTS) AS DATE, SUM(CASHTRANSACTION_STG_STM.CT_AMT) AS NEW_CASH, MAX(GET_LAST_BALANCE.LAST_CASH) AS LAST_CASH FROM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM INNER JOIN GET_LAST_BALANCE ON CASHTRANSACTION_STG_STM.CT_CA_ID = GET_LAST_BALANCE.ACCOUNT_ID GROUP BY 1,2) CASHTRANSACTION_STG_STM_Q INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON CASHTRANSACTION_STG_STM_Q.CT_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON CASHTRANSACTION_STG_STM_Q.DATE = DIM_DATE.DATE_VALUE\"}\n      );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_CASH_BALANCES_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Fact Cash Balances transactions inserted.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_HOLDINGS_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var tsk_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK SUSPEND\"}\n      );\n  tsk_stmt.execute();\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_HOLDINGS SELECT HH_H_T_ID, HH_T_ID, DIM_TRADE.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID, DIM_TRADE.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID, DIM_TRADE.SK_CLOSE_DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID, DIM_TRADE.TRADE_PRICE, HH_AFTER_QTY, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH)  FROM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE ON HOLDINGHISTORY_STG_STM.HH_T_ID = DIM_TRADE.TRADE_ID\"}\n      );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_HOLDINGS_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  var tsk_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.CHECK_STREAM_CTRL_TSK SUSPEND\"}\n      );\n  tsk_stmt.execute();\n  return 'Fact Holdings historical records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_HOLDINGS_INCREMENTAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_HOLDINGS SELECT HH_H_T_ID, HH_T_ID, DIM_TRADE.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID, DIM_TRADE.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID, DIM_TRADE.SK_CLOSE_DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID, DIM_TRADE.TRADE_PRICE, HH_AFTER_QTY, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH)  FROM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE ON HOLDINGHISTORY_STG_STM.HH_T_ID = DIM_TRADE.TRADE_ID\"}\n      );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_HOLDINGS_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Fact Holdings incremental records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var hilo_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SET FACT_MARKET_HISTORY.FIFTY_TWO_WEEK_HIGH = DAILY_MARKET_HIGH_LOW_STG.YEAR_HIGH, FACT_MARKET_HISTORY.SK_FIFTY_TWO_WEEK_HIGH_DATE = DAILY_MARKET_HIGH_LOW_STG.EARLIEST_HIGH_DATE, FACT_MARKET_HISTORY.FIFTY_TWO_WEEK_LOW = DAILY_MARKET_HIGH_LOW_STG.YEAR_LOW, FACT_MARKET_HISTORY.SK_FIFTY_TWO_WEEK_LOW_DATE = DAILY_MARKET_HIGH_LOW_STG.EARLIEST_LOW_DATE FROM TPCDI_STG.PUBLIC.DAILY_MARKET_HIGH_LOW_STG, TPCDI_WH.PUBLIC.DIM_SECURITY WHERE FACT_MARKET_HISTORY.SK_SECURITY_ID = DIM_SECURITY.SK_SECURITY_ID AND FACT_MARKET_HISTORY.SK_DATE_ID = DAILY_MARKET_HIGH_LOW_STG.DATE AND DAILY_MARKET_HIGH_LOW_STG.SYMBOL = DIM_SECURITY.SYMBOL\"}\n    );\n  hilo_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'High Low calculated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_TRANS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SELECT DIM_SECURITY_NOW.SK_SECURITY_ID, DIM_SECURITY_NOW.SK_COMPANY_ID, DIM_DATE.DATE_ID, TO_NUMBER(-1), ((DIM_SECURITY_NOW.DIVIDEND / DM_CLOSE) * 100), TO_NUMBER(-1), TO_NUMBER(-1), TO_NUMBER(-1), TO_NUMBER(-1), DAILYMARKET_STG_STM.DM_CLOSE, DAILYMARKET_STG_STM.DM_HIGH, DAILYMARKET_STG_STM.DM_LOW, DAILYMARKET_STG_STM.DM_VOL, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON DAILYMARKET_STG_STM.DM_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON DAILYMARKET_STG_STM.DM_DATE = DIM_DATE.DATE_VALUE ORDER BY 3\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_TRANS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Fact Market History transactions inserted.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_TRANS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.FACT_PROSPECT USING ( SELECT AGENCYID, LASTNAME, FIRSTNAME, MIDDLEINITIAL, GENDER, ADDRESSLINE1, ADDRESSLINE2, POSTALCODE, CITY, STATE, COUNTRY, PHONE, INCOME, NUMBERCARS, NUMBERCHILDREN, MARITALSTATUS, AGE, CREDITRATING, OWNORRENTFLAG, EMPLOYER, NUMBERCREDITCARDS, NETWORTH FROM TPCDI_STG.PUBLIC.PROSPECT_STG_STM) PROSPECT ON TPCDI_WH.PUBLIC.FACT_PROSPECT.AGENCY_ID = PROSPECT.AGENCYID WHEN MATCHED THEN UPDATE SET FACT_PROSPECT.LAST_NAME = PROSPECT.LASTNAME ,FACT_PROSPECT.FIRST_NAME = PROSPECT.FIRSTNAME, FACT_PROSPECT.MIDDLE_INITIAL = PROSPECT.MIDDLEINITIAL, FACT_PROSPECT.GENDER = PROSPECT.GENDER, FACT_PROSPECT.ADDRESS_LINE1 = PROSPECT.ADDRESSLINE1, FACT_PROSPECT.ADDRESS_LINE2 = PROSPECT.ADDRESSLINE2, FACT_PROSPECT.POSTAL_CODE = PROSPECT.POSTALCODE, FACT_PROSPECT.CITY = PROSPECT.CITY, FACT_PROSPECT.STATE = PROSPECT.STATE, FACT_PROSPECT.COUNTRY = PROSPECT.COUNTRY, FACT_PROSPECT.PHONE = PROSPECT.PHONE, FACT_PROSPECT.INCOME = PROSPECT.INCOME, FACT_PROSPECT.NUMBER_CARS = PROSPECT.NUMBERCARS, FACT_PROSPECT.NUMBER_CHILDREN = PROSPECT.NUMBERCHILDREN, FACT_PROSPECT.MARITAL_STATUS = PROSPECT.MARITALSTATUS, FACT_PROSPECT.AGE = PROSPECT.AGE, FACT_PROSPECT.CREDIT_RATING = PROSPECT.CREDITRATING, FACT_PROSPECT.OWN_OR_RENT_FLAG = PROSPECT.OWNORRENTFLAG, FACT_PROSPECT.EMPLOYER = PROSPECT.EMPLOYER, FACT_PROSPECT.NUMBER_CREDIT_CARDS = PROSPECT.NUMBERCREDITCARDS, FACT_PROSPECT.NET_WORTH = PROSPECT.NETWORTH, FACT_PROSPECT.SK_UPDATE_DATE_ID = (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()) WHEN NOT MATCHED THEN INSERT (AGENCY_ID, SK_RECORD_DATE_ID, SK_UPDATE_DATE_ID, BATCH_ID, IS_CUSTOMER, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, GENDER, ADDRESS_LINE1, ADDRESS_LINE2, POSTAL_CODE, CITY, STATE, COUNTRY, PHONE, INCOME, NUMBER_CARS, NUMBER_CHILDREN, MARITAL_STATUS, AGE, CREDIT_RATING, OWN_OR_RENT_FLAG, EMPLOYER, NUMBER_CREDIT_CARDS, NET_WORTH) VALUES (PROSPECT.AGENCYID, (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()), (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 'FALSE', PROSPECT.LASTNAME, PROSPECT.FIRSTNAME, PROSPECT.MIDDLEINITIAL, PROSPECT.GENDER, PROSPECT.ADDRESSLINE1, PROSPECT.ADDRESSLINE2, PROSPECT.POSTALCODE, PROSPECT.CITY, PROSPECT.STATE, PROSPECT.COUNTRY, PROSPECT.PHONE, PROSPECT.INCOME, PROSPECT.NUMBERCARS, PROSPECT.NUMBERCHILDREN, PROSPECT.MARITALSTATUS, PROSPECT.AGE, PROSPECT.CREDITRATING, PROSPECT.OWNORRENTFLAG, PROSPECT.EMPLOYER, PROSPECT.NUMBERCREDITCARDS, PROSPECT.NETWORTH)\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_TRANS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Fact Prospect transactions loaded.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_WATCHES_ACTV_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var trans_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.FACT_WATCHES SELECT DIM_CUSTOMER_NOW.SK_CUSTOMER_ID SK_CUSTOMER_ID, DIM_SECURITY_NOW.SK_SECURITY_ID SK_SECURITY_ID, DIM_DATE.DATE_ID SK_DATE_ID_DATE_PLACED, NULL SK_DATE_ID_DATE_REMOVED, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) BATCH_ID FROM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_ACTV_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW ON WATCH_HISTORY_STG_ACTV_STM.W_C_ID = DIM_CUSTOMER_NOW.CUSTOMER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON WATCH_HISTORY_STG_ACTV_STM.W_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TO_DATE(WATCH_HISTORY_STG_ACTV_STM.W_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) WHERE WATCH_HISTORY_STG_ACTV_STM.W_ACTION = 'ACTV' \"}\n    );\n  trans_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_WATCHES_ACTV_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Fact Watches active transactions processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_WATCHES_CNCL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var trans_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_WATCHES SET FACT_WATCHES.SK_DATE_ID_DATE_REMOVED = ALL_CUST_SEC_SK.SK_DATE_ID_DATE_REMOVED FROM (SELECT DIM_CUSTOMER.SK_CUSTOMER_ID SK_CUSTOMER_ID, DIM_SECURITY.SK_SECURITY_ID SK_SECURITY_ID, DIM_DATE.DATE_ID SK_DATE_ID_DATE_REMOVED FROM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_CNCL_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER ON       WATCH_HISTORY_STG_CNCL_STM.W_C_ID = DIM_CUSTOMER.CUSTOMER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY ON       WATCH_HISTORY_STG_CNCL_STM.W_S_SYMB = DIM_SECURITY.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON       TO_DATE(WATCH_HISTORY_STG_CNCL_STM.W_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) WHERE WATCH_HISTORY_STG_CNCL_STM.W_ACTION = 'CNCL') ALL_CUST_SEC_SK WHERE FACT_WATCHES.SK_CUSTOMER_ID = ALL_CUST_SEC_SK.SK_CUSTOMER_ID  AND FACT_WATCHES.SK_SECURITY_ID = ALL_CUST_SEC_SK.SK_SECURITY_ID AND FACT_WATCHES.SK_DATE_ID_DATE_REMOVED IS NULL \"}\n    );\n  trans_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_WATCHES_CNCL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Fact Watches cancelled transactions processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_REFERENCE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var date_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_SP()\"}\n    );\n  date_stmt.execute();\n  var time_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_SP()\"}\n    );\n  time_stmt.execute();\n  var tt_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_SP()\"}\n    );\n  tt_stmt.execute();\n  var st_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_SP()\"}\n    );\n  st_stmt.execute();\n  var tr_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_SP()\"}\n    );\n  tr_stmt.execute();\n  var ind_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_SP()\"}\n    );\n  ind_stmt.execute();\n  return \"All reference dimension tasks have been started.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_CALC_PE_RATIO_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var pe_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SET FACT_MARKET_HISTORY.PE_RATIO = FACT_MARKET_HISTORY.CLOSE_PRICE / ROLL_YEAR_EPS_CALC.ROLL_YEAR_EPS FROM (WITH MARKET_HISTORY_COMPANY_ID AS (SELECT FACT_MARKET_HISTORY.SK_SECURITY_ID, FACT_MARKET_HISTORY.SK_COMPANY_ID, FACT_MARKET_HISTORY.SK_DATE_ID, DIM_COMPANY.COMPANY_ID FROM TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY INNER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY ON FACT_MARKET_HISTORY.SK_COMPANY_ID = DIM_COMPANY.SK_COMPANY_ID) SELECT  MARKET_HISTORY_COMPANY_ID.SK_SECURITY_ID, MARKET_HISTORY_COMPANY_ID.SK_COMPANY_ID, MARKET_HISTORY_COMPANY_ID.SK_DATE_ID, MARKET_HISTORY_COMPANY_ID.COMPANY_ID, DIM_FINANCIAL_ROLL_YEAR_EPS.ROLL_YEAR_EPS FROM MARKET_HISTORY_COMPANY_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_FINANCIAL_ROLL_YEAR_EPS ON MARKET_HISTORY_COMPANY_ID.COMPANY_ID = DIM_FINANCIAL_ROLL_YEAR_EPS.COMPANY_ID AND YEAR(TO_DATE(MARKET_HISTORY_COMPANY_ID.SK_DATE_ID::STRING, 'YYYYMMDD')) || QUARTER(TO_DATE(MARKET_HISTORY_COMPANY_ID.SK_DATE_ID::STRING, 'YYYYMMDD')) = DIM_FINANCIAL_ROLL_YEAR_EPS.YEAR_QTR) ROLL_YEAR_EPS_CALC WHERE FACT_MARKET_HISTORY.SK_SECURITY_ID = ROLL_YEAR_EPS_CALC.SK_SECURITY_ID AND FACT_MARKET_HISTORY.SK_COMPANY_ID = ROLL_YEAR_EPS_CALC.SK_COMPANY_ID AND FACT_MARKET_HISTORY.SK_DATE_ID = ROLL_YEAR_EPS_CALC.SK_DATE_ID\"}\n    );\n  pe_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_CALC_PE_RATIO_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Fact Market History PE Ratio calculated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_HISTORICAL_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var tsk1_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK SUSPEND\"}\n      );\n  tsk1_stmt.execute();\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var hilo_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()\"}\n      );\n  hilo_stmt.execute();\n  var pe_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()\"}\n      );\n  pe_stmt.execute();\n  var tsk2_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_TSK SUSPEND\"}\n      );\n  tsk2_stmt.execute();\n  return 'All historical Market History fact records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_INCREMENTAL_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var hilo_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()\"}\n      );\n  hilo_stmt.execute();\n  var pe_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()\"}\n      );\n  pe_stmt.execute();\n  return 'All incremental Market History records have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_MARKET_HISTORY_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var hilo_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()\"}\n      );\n  hilo_stmt.execute();\n  var pe_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()\"}\n      );\n  pe_stmt.execute();\n  return 'All Market History records have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_HISTORICAL_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var namep_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()\"}\n      );\n  namep_stmt.execute();\n  var hv_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()\"}\n      );\n  hv_stmt.execute();\n  var exp_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()\"}\n      );\n  exp_stmt.execute();\n  var boom_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()\"}\n      );\n  boom_stmt.execute();\n  var mony_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()\"}\n      );\n  mony_stmt.execute();\n  var spnd_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()\"}\n      );\n  spnd_stmt.execute();\n  var inher_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()\"}\n      );\n  inher_stmt.execute();\n  var isc_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()\"}\n      );\n  isc_stmt.execute();\n  var tsk_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_TSK SUSPEND\"}\n      );\n  tsk_stmt.execute();\n  return 'Historical Prospect load completed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_INCREMENTAL_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var namep_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()\"}\n      );\n  namep_stmt.execute();\n  var hv_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()\"}\n      );\n  hv_stmt.execute();\n  var exp_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()\"}\n      );\n  exp_stmt.execute();\n  var boom_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()\"}\n      );\n  boom_stmt.execute();\n  var mony_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()\"}\n      );\n  mony_stmt.execute();\n  var spnd_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()\"}\n      );\n  spnd_stmt.execute();\n  var inher_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()\"}\n      );\n  inher_stmt.execute();\n  var isc_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()\"}\n      );\n  isc_stmt.execute();\n  return 'All incremental Prospect records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_ISCUST_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT T1 SET T1.IS_CUSTOMER = 'TRUE' FROM TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW T2 WHERE UPPER(T1.LAST_NAME) = UPPER(T2.LAST_NAME) AND UPPER(T1.FIRST_NAME) = UPPER(T2.FIRST_NAME) AND UPPER(T1.ADDRESS_LINE1) = UPPER(T2.ADDRESS_LINE_1) AND UPPER(T1.ADDRESS_LINE2) = UPPER(T2.ADDRESS_LINE_2) AND UPPER(T1.POSTAL_CODE) = UPPER(T2.POSTAL_CODE) AND UPPER(T2.STATUS) = 'ACTV'\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_ISCUST_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Is Customer updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()\"}\n      );\n  fact_stmt.execute();\n  var namep_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()\"}\n      );\n  namep_stmt.execute();\n  var hv_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()\"}\n      );\n  hv_stmt.execute();\n  var exp_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()\"}\n      );\n  exp_stmt.execute();\n  var boom_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()\"}\n      );\n  boom_stmt.execute();\n  var mony_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()\"}\n      );\n  mony_stmt.execute();\n  var spnd_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()\"}\n      );\n  spnd_stmt.execute();\n  var inher_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()\"}\n      );\n  inher_stmt.execute();\n  var isc_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()\"}\n      );\n  isc_stmt.execute();\n  return 'All Prospect records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_BOOMER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'BOOMER',CONCAT(MARKETING_NAMEPLATE,'+BOOMER')) WHERE AGE > 45\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_BOOMER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate Boomer updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_EXPENSES_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'EXPENSES',CONCAT(MARKETING_NAMEPLATE,'+EXPENSES')) WHERE NUMBER_CHILDREN > 3 OR NUMBER_CREDIT_CARDS > 5\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_EXPENSES_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate Expenses updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_HIGHVALUE_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = 'HIGHVALUE' WHERE NET_WORTH > 1000000 OR INCOME > 200000\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_HIGHVALUE_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate High Value updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_INHERITED_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'INHERITED',CONCAT(MARKETING_NAMEPLATE,'+INHERITED')) WHERE AGE < 25 AND NET_WORTH > 1000000\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_INHERITED_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate Inherited updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_MONEYALERT_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'MONEYALERT',CONCAT(MARKETING_NAMEPLATE,'+MONEYALERT')) WHERE INCOME < 50000 OR CREDIT_RATING < 600 OR NET_WORTH < 100000\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_MONEYALERT_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate Money Alert updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_RESET_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = NULL WHERE MARKETING_NAMEPLATE IS NOT NULL\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_RESET_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate column reset.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_PROSPECT_MN_SPENDER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var fact_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'SPENDER',CONCAT(MARKETING_NAMEPLATE,'+SPENDER')) WHERE NUMBER_CARS > 3 OR NUMBER_CREDIT_CARDS > 7\"}\n    );\n  fact_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_SPENDER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Marketing Nameplate Spender updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_WATCHES_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var mp_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_WATCHES_MASTER_SP()\"}\n      );\n  mp_stmt.execute();\n  var tsk_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK SUSPEND\"}\n      );\n  tsk_stmt.execute();\n  return 'Historical load complete.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_WATCHES_INCREMENTAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var mp_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_WATCHES_MASTER_SP()\"}\n      );\n  mp_stmt.execute();\n  return 'Incremental load complete.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FACT_WATCHES_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var act_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_WATCHES_ACTV_SP()\"}\n      );\n  act_stmt.execute();\n  var can_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FACT_WATCHES_CNCL_SP()\"}\n      );\n  can_stmt.execute();\n  return 'Fact Watches load complete.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "LOAD_SNAPSHOT_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var whstmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.LOAD_SNAPSHOT SELECT TABLE_CATALOG, LOCALTIMESTAMP(), SUM(ROW_COUNT) FROM TPCDI_WH.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PUBLIC' AND TABLE_NAME != 'LOAD_SNAPSHOT' and TABLE_NAME != 'CTRL_BATCH' AND TABLE_TYPE = 'BASE TABLE' GROUP BY 1,2\"}\n      );\n  whstmt.execute();\n  return \"Snapshot successful.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "MAINTENANCE_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_TSK SUSPEND\"}\n    );\n  dim_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK SUSPEND\"}\n    );\n  dim_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK SUSPEND\"}\n    );\n  dim_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"DROP STREAM IF EXISTS TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM\"}\n    );\n  dim_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"DROP STREAM IF EXISTS TPCDI_WH.PUBLIC.DIM_SECURITY_STM\"}\n    );\n  dim_stmt.execute();\n  return \"Dummy executed and streams dropped.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "RUN_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "scale"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var tpcdi_scale = SCALE;\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.RESET_ALL_SP()\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(\" + tpcdi_scale + \")\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()\"});\n  stmt.execute();\n  return \"All tables have been reset and all historical tasks are started.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "RUN_ALL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "scale"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var tpcdi_scale = SCALE\n  var stmt = snowflake.createStatement({sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK \"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(\" + tpcdi_scale + \")\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(\" + tpcdi_scale + \")\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP()\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.START_TASKS_SP()\"});\n  stmt.execute();\n  return \"All tables have been reset, all historical tasks are started, and incremental flow control is ready.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "RUN_ALL_CLEAN_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "scale"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var tpcdi_scale = SCALE\n  var stmt = snowflake.createStatement({sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK \"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(\" + tpcdi_scale + \")\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()\"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_\" + tpcdi_scale + \"_CTRL_TSK \"});\n  stmt.execute();\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_\" + tpcdi_scale + \"_CTRL_TSK \"});\n  stmt.execute();\n  return \"All tables have been reset, all historical tasks are started, and incremental flow control is ready.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "START_DW_HISTORICAL_TASKS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK \"});\n  stmt.execute();\n  return \"All historical DW tasks started.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "START_DW_INCREMENTAL_TASKS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement({sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK \"});\n  stmt.execute();\n  return \"All incremental DW tasks started.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "START_TASKS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText:`call system$wait(10, 'SECONDS');`});\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK\"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK\"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText:`call system$wait(30, 'SECONDS');`});\n  rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText:`call system$wait(30, 'SECONDS');`});\n  rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText:`call system$wait(60, 'SECONDS');`});\n  rs = stmt.execute();\n  stmt = snowflake.createStatement(\n      {sqlText: \"EXECUTE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK \"}\n    );\n  rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText:`call system$wait(10, 'SECONDS');`});\n  rs = stmt.execute();\n  rs.next();\n  output = rs.getColumnValue(1);\n  return output;\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "ACCOUNT_INACT_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (SELECT CUSTOMER_ID, CUSTOMER_ACCOUNT_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_CLOSE_STG) ACS ON ACS.CUSTOMER_ACCOUNT_ID = ACCOUNT_ODS.CA_ID WHEN MATCHED THEN UPDATE SET ACCOUNT_ODS.CA_ST_ID = 'INAC', ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (ACS.CUSTOMER_ACCOUNT_ID, NULL, ACS.CUSTOMER_ID, NULL, NULL, 'INAC', CURRENT_TIMESTAMP())\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_INACT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Inactive Account ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "ACCOUNT_NEW_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS SELECT CUSTOMER_ACCOUNT_ID, CUSTOMER_ACCOUNT_BROKER_ID, CUSTOMER_ID, CUSTOMER_ACCOUNT_NAME, CUSTOMER_ACCOUNT_TAX_STATUS, 'ACTV' AS CA_ST_ID, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.ACCOUNT_NEW_STG\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n       {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_NEW_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'New Account ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "ACCOUNT_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (SELECT CDC_FLAG, CDC_DSN, CA_ID, CA_B_ID, CA_C_ID, CA_NAME, CA_TAX_ST, CA_ST_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM) ACCOUNT_STG ON TPCDI_ODS.PUBLIC.ACCOUNT_ODS.CA_ID = ACCOUNT_STG.CA_ID WHEN MATCHED AND ACCOUNT_STG.CDC_FLAG = 'U' THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(ACCOUNT_STG.CA_B_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(ACCOUNT_STG.CA_C_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(ACCOUNT_STG.CA_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(ACCOUNT_STG.CA_TAX_ST,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.CA_ST_ID = COALESCE(ACCOUNT_STG.CA_ST_ID,ACCOUNT_ODS.CA_ST_ID), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED AND ACCOUNT_STG.CDC_FLAG = 'I' THEN INSERT VALUES (ACCOUNT_STG.CA_ID, ACCOUNT_STG.CA_B_ID, ACCOUNT_STG.CA_C_ID, ACCOUNT_STG.CA_NAME, ACCOUNT_STG.CA_TAX_ST, ACCOUNT_STG.CA_ST_ID, CURRENT_TIMESTAMP() )\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Account ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "ACCOUNT_UPDT_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "levels"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var level_counter = 1\n  while (level_counter <= LEVELS)\n  {\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (WITH NTH_ACTION_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(AUN.ACTION_DATE,\" + level_counter + \") OVER (PARTITION BY AUN.CUSTOMER_ACCOUNT_ID ORDER BY AUN.ACTION_DATE) AS NTH_ACTION_DATE, AUN.CUSTOMER_ACCOUNT_ID AS AUN_CA_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AUN) SELECT AU.CUSTOMER_ACCOUNT_BROKER_ID, AU.CUSTOMER_ID, AU.CUSTOMER_ACCOUNT_NAME, AU.CUSTOMER_ACCOUNT_TAX_STATUS, AU.CUSTOMER_ACCOUNT_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AU JOIN NTH_ACTION_DATE_ROW ON NTH_ACTION_DATE_ROW.NTH_ACTION_DATE = AU.ACTION_DATE AND NTH_ACTION_DATE_ROW.AUN_CA_ID = AU.CUSTOMER_ACCOUNT_ID) AUS ON AUS.CUSTOMER_ACCOUNT_ID = ACCOUNT_ODS.CA_ID WHEN MATCHED THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(AUS.CUSTOMER_ACCOUNT_BROKER_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(AUS.CUSTOMER_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(AUS.CUSTOMER_ACCOUNT_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(AUS.CUSTOMER_ACCOUNT_TAX_STATUS,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (AUS.CUSTOMER_ACCOUNT_ID, AUS.CUSTOMER_ACCOUNT_BROKER_ID, AUS.CUSTOMER_ID, AUS.CUSTOMER_ACCOUNT_NAME, AUS.CUSTOMER_ACCOUNT_TAX_STATUS, 'ACTV', CURRENT_TIMESTAMP())\"}\n    );\n  ods_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_UPDT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  var wh_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()\"}\n    );\n  wh_stmt.execute();\n  level_counter++\n  }\n  return 'Accounts updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "CUSTOMER_INACT_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_ODS.PUBLIC.CUSTOMER_ODS ODS SET ODS.C_ST_ID = 'INAC', ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_INACT_STG CIS WHERE CIS.C_ID = ODS.C_ID\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_INACT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Inactive customers processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "CUSTOMER_NEW_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_ODS.PUBLIC.CUSTOMER_ODS SELECT CNS.CUSTOMER_ID, CNS.CUSTOMER_TAX_ID, 'ACTV', CNS.LAST_NAME, CNS.FIRST_NAME, CNS.MIDDLE_INITIAL, CNS.GENDER, CNS.CUSTOMER_TIER, CNS.DATE_OF_BIRTH, CNS.ADDRESS_LINE_1, CNS.ADDRESS_LINE_2, CNS.ZIP_CODE, CNS.CITY, CNS.STATE_PROVINCE, CNS.COUNTRY, CNS.PHONE_1_COUNTRY_CODE, CNS.PHONE_1_AREA_CODE, CNS.PHONE_1_PHONE_NUMBER, CNS.PHONE_1_EXTENSION, CNS.PHONE_2_COUNTRY_CODE, CNS.PHONE_2_AREA_CODE, CNS.PHONE_2_PHONE_NUMBER, CNS.PHONE_2_EXTENSION, CNS.PHONE_3_COUNTRY_CODE, CNS.PHONE_3_AREA_CODE, CNS.PHONE_3_PHONE_NUMBER, CNS.PHONE_3_EXTENSION, CNS.PRIMARY_EMAIL, CNS.ALTERNATE_EMAIL, CNS.LOCAL_TAX_ID, CNS.NATIONAL_TAX_ID, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_NEW_STG CNS\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_NEW_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'New Customer ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "CUSTOMER_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.CUSTOMER_ODS USING (SELECT CDC_FLAG, CDC_DSN, C_ID, C_TAX_ID, C_ST_ID, C_L_NAME, C_F_NAME, C_M_NAME, C_GNDR, C_TIER, C_DOB, C_ADLINE1, C_ADLINE2, C_ZIPCODE, C_CITY, C_STATE_PROV, C_CTRY, C_CTRY_1, C_AREA_1, C_LOCAL_1, C_EXT_1, C_CTRY_2, C_AREA_2, C_LOCAL_2, C_EXT_2, C_CTRY_3, C_AREA_3, C_LOCAL_3, C_EXT_3, C_EMAIL_1, C_EMAIL_2, C_LCL_TX_ID, C_NAT_TX_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.CUSTOMER_STG_STM) CUSTOMER_STG ON TPCDI_ODS.PUBLIC.CUSTOMER_ODS.C_ID = CUSTOMER_STG.C_ID WHEN MATCHED AND CUSTOMER_STG.CDC_FLAG = 'U' THEN UPDATE SET CUSTOMER_ODS.C_TAX_ID = COALESCE(CUSTOMER_STG.C_TAX_ID,CUSTOMER_ODS.C_TAX_ID), CUSTOMER_ODS.C_ST_ID = COALESCE(CUSTOMER_STG.C_ST_ID,CUSTOMER_ODS.C_ST_ID), CUSTOMER_ODS.C_L_NAME = COALESCE(CUSTOMER_STG.C_L_NAME,CUSTOMER_ODS.C_L_NAME), CUSTOMER_ODS.C_F_NAME = COALESCE(CUSTOMER_STG.C_F_NAME,CUSTOMER_ODS.C_F_NAME), CUSTOMER_ODS.C_M_NAME = COALESCE(CUSTOMER_STG.C_M_NAME,CUSTOMER_ODS.C_M_NAME), CUSTOMER_ODS.C_GNDR = COALESCE(CUSTOMER_STG.C_GNDR,CUSTOMER_ODS.C_GNDR), CUSTOMER_ODS.C_TIER = COALESCE(CUSTOMER_STG.C_TIER,CUSTOMER_ODS.C_TIER), CUSTOMER_ODS.C_DOB = COALESCE(CUSTOMER_STG.C_DOB,CUSTOMER_ODS.C_DOB), CUSTOMER_ODS.C_ADLINE1 = COALESCE(CUSTOMER_STG.C_ADLINE1,CUSTOMER_ODS.C_ADLINE1), CUSTOMER_ODS.C_ADLINE2 = COALESCE(CUSTOMER_STG.C_ADLINE2,CUSTOMER_ODS.C_ADLINE2), CUSTOMER_ODS.C_ZIPCODE = COALESCE(CUSTOMER_STG.C_ZIPCODE,CUSTOMER_ODS.C_ZIPCODE), CUSTOMER_ODS.C_CITY = COALESCE(CUSTOMER_STG.C_CITY,CUSTOMER_ODS.C_CITY), CUSTOMER_ODS.C_STATE_PROV = COALESCE(CUSTOMER_STG.C_STATE_PROV,CUSTOMER_ODS.C_STATE_PROV), CUSTOMER_ODS.C_CTRY = COALESCE(CUSTOMER_STG.C_CTRY,CUSTOMER_ODS.C_CTRY), CUSTOMER_ODS.C_CTRY_1 = COALESCE(CUSTOMER_STG.C_CTRY_1,CUSTOMER_ODS.C_CTRY_1), CUSTOMER_ODS.C_AREA_1 = COALESCE(CUSTOMER_STG.C_AREA_1,CUSTOMER_ODS.C_AREA_1), CUSTOMER_ODS.C_LOCAL_1 = COALESCE(CUSTOMER_STG.C_LOCAL_1,CUSTOMER_ODS.C_LOCAL_1), CUSTOMER_ODS.C_EXT_1 = COALESCE(CUSTOMER_STG.C_EXT_1,CUSTOMER_ODS.C_EXT_1), CUSTOMER_ODS.C_CTRY_2 = COALESCE(CUSTOMER_STG.C_CTRY_2,CUSTOMER_ODS.C_CTRY_2), CUSTOMER_ODS.C_AREA_2 = COALESCE(CUSTOMER_STG.C_AREA_2,CUSTOMER_ODS.C_AREA_2), CUSTOMER_ODS.C_LOCAL_2 = COALESCE(CUSTOMER_STG.C_LOCAL_2,CUSTOMER_ODS.C_LOCAL_2), CUSTOMER_ODS.C_EXT_2 = COALESCE(CUSTOMER_STG.C_EXT_2,CUSTOMER_ODS.C_EXT_2), CUSTOMER_ODS.C_CTRY_3 = COALESCE(CUSTOMER_STG.C_CTRY_3,CUSTOMER_ODS.C_CTRY_3), CUSTOMER_ODS.C_AREA_3 = COALESCE(CUSTOMER_STG.C_AREA_3,CUSTOMER_ODS.C_AREA_3), CUSTOMER_ODS.C_LOCAL_3 = COALESCE(CUSTOMER_STG.C_LOCAL_3,CUSTOMER_ODS.C_LOCAL_3), CUSTOMER_ODS.C_EXT_3 = COALESCE(CUSTOMER_STG.C_EXT_3,CUSTOMER_ODS.C_EXT_3), CUSTOMER_ODS.C_EMAIL_1 = COALESCE(CUSTOMER_STG.C_EMAIL_1,CUSTOMER_ODS.C_EMAIL_1), CUSTOMER_ODS.C_EMAIL_2 = COALESCE(CUSTOMER_STG.C_EMAIL_2,CUSTOMER_ODS.C_EMAIL_2), CUSTOMER_ODS.C_LCL_TX_ID = COALESCE(CUSTOMER_STG.C_LCL_TX_ID,CUSTOMER_ODS.C_LCL_TX_ID), CUSTOMER_ODS.C_NAT_TX_ID = COALESCE(CUSTOMER_STG.C_NAT_TX_ID,CUSTOMER_ODS.C_NAT_TX_ID), CUSTOMER_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED AND CUSTOMER_STG.CDC_FLAG = 'I' THEN INSERT VALUES (CUSTOMER_STG.C_ID, CUSTOMER_STG.C_TAX_ID, CUSTOMER_STG.C_ST_ID, CUSTOMER_STG.C_L_NAME, CUSTOMER_STG.C_F_NAME, CUSTOMER_STG.C_M_NAME, CUSTOMER_STG.C_GNDR, CUSTOMER_STG.C_TIER, CUSTOMER_STG.C_DOB, CUSTOMER_STG.C_ADLINE1, CUSTOMER_STG.C_ADLINE2, CUSTOMER_STG.C_ZIPCODE, CUSTOMER_STG.C_CITY, CUSTOMER_STG.C_STATE_PROV, CUSTOMER_STG.C_CTRY, CUSTOMER_STG.C_CTRY_1, CUSTOMER_STG.C_AREA_1, CUSTOMER_STG.C_LOCAL_1, CUSTOMER_STG.C_EXT_1, CUSTOMER_STG.C_CTRY_2, CUSTOMER_STG.C_AREA_2, CUSTOMER_STG.C_LOCAL_2, CUSTOMER_STG.C_EXT_2, CUSTOMER_STG.C_CTRY_3, CUSTOMER_STG.C_AREA_3, CUSTOMER_STG.C_LOCAL_3, CUSTOMER_STG.C_EXT_3, CUSTOMER_STG.C_EMAIL_1, CUSTOMER_STG.C_EMAIL_2, CUSTOMER_STG.C_LCL_TX_ID, CUSTOMER_STG.C_NAT_TX_ID, CURRENT_TIMESTAMP())\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Customer ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "CUSTOMER_UPDT_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_ODS.PUBLIC.CUSTOMER_ODS ODS SET ODS.C_TIER = COALESCE(CUS.C_TIER,ODS.C_TIER), ODS.C_ADLINE1 = COALESCE(CUS.ADDRESSLINE1,ODS.C_ADLINE1), ODS.C_ADLINE2 = COALESCE(CUS.ADDRESSLINE2,ODS.C_ADLINE2), ODS.C_ZIPCODE = COALESCE(CUS.ZIPCODE,ODS.C_ZIPCODE), ODS.C_CITY = COALESCE(CUS.CITY,ODS.C_CITY), ODS.C_STATE_PROV = COALESCE(CUS.STATEPROV,ODS.C_STATE_PROV), ODS.C_CTRY = COALESCE(CUS.COUNTRY,ODS.C_CTRY), ODS.C_CTRY_1 = COALESCE(CUS.PH1COUNTRYCODE,ODS.C_CTRY_1), ODS.C_AREA_1 = COALESCE(CUS.PH1AREACODE,ODS.C_AREA_1), ODS.C_LOCAL_1 = COALESCE(CUS.PH1LOCALNUMBER,ODS.C_LOCAL_1), ODS.C_EXT_1 = COALESCE(CUS.PH1EXTENSION,ODS.C_EXT_1), ODS.C_CTRY_2 = COALESCE(CUS.PH2COUNTRYCODE,ODS.C_CTRY_2), ODS.C_AREA_2 = COALESCE(CUS.PH2AREACODE,ODS.C_AREA_2), ODS.C_LOCAL_2 = COALESCE(CUS.PH2LOCALNUMBER,ODS.C_LOCAL_2), ODS.C_EXT_2 = COALESCE(CUS.PH2EXTENSION,ODS.C_EXT_2), ODS.C_CTRY_3 = COALESCE(CUS.PH3COUNTRYCODE,ODS.C_CTRY_3), ODS.C_AREA_3 = COALESCE(CUS.PH3AREACODE,ODS.C_AREA_3), ODS.C_LOCAL_3 = COALESCE(CUS.PH3LOCALNUMBER,ODS.C_LOCAL_3), ODS.C_EXT_3 = COALESCE(CUS.PH3EXTENSION,ODS.C_EXT_3), ODS.C_EMAIL_1 = COALESCE(CUS.PRIMARYEMAIL,ODS.C_EMAIL_1), ODS.C_EMAIL_2 = COALESCE(CUS.ALTERNATEEMAIL,ODS.C_EMAIL_2), ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_UPDT_STG CUS WHERE CUS.C_ID = ODS.C_ID\"}\n    );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_UPDT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Customer ODS records updated.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_ACCOUNT_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var nods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.ACCOUNT_NEW_ODS_SP()\"}\n      );\n  nods_stmt.execute();\n  var dim1_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()\"}\n      );\n  dim1_stmt.execute();\n  var uods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.ACCOUNT_UPDT_ODS_SP(7)\"}\n      );\n  uods_stmt.execute();\n  var iods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.ACCOUNT_INACT_ODS_SP()\"}\n      );\n  iods_stmt.execute();\n  var flow_stmt = snowflake.createStatement(\n      {sqlText: \"CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM ON TABLE TPCDI_WH.PUBLIC.DIM_ACCOUNT\"}\n      );\n  flow_stmt.execute();\n  var dim2_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()\"}\n      );\n  dim2_stmt.execute();\n  return 'All historical Account Dimension records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_ACCOUNT_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.ACCOUNT_ODS_SP()\"}\n      );\n  ods_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()\"}\n      );\n  dim_stmt.execute();\n  return 'All Account Dimension records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_ACCOUNT_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_ACCOUNT SELECT TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ.NEXTVAL AS SK_ACCOUNT_ID, A.CA_ID, COALESCE(DIM_BROKER.SK_BROKER_ID,0), DIM_CUSTOMER_NOW.SK_CUSTOMER_ID, A.CA_ST_ID, A.CA_NAME, A.CA_TAX_ST, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) AS BATCH_ID, LOCALTIMESTAMP() AS INSERTED_TS FROM TPCDI_ODS.PUBLIC.ACCOUNT_ODS_STM A LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_BROKER ON A.CA_B_ID = DIM_BROKER.BROKER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW ON A.CA_C_ID = DIM_CUSTOMER_NOW.CUSTOMER_ID WHERE A.METADATA$ACTION = 'INSERT'\"}\n      );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_ACCOUNT_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Dim Account records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_COMPANY_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FINWIRE_CMP_ODS_SP(4)\"}\n      );\n  ods_stmt.execute();\n  return 'All historical Company ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_COMPANY_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_COMPANY SELECT TPCDI_WH.PUBLIC.DIM_COMPANY_SEQ.NEXTVAL, CIK, DIM_STATUS_TYPE.ST_NAME, COMPANY_NAME, DIM_INDUSTRY.IN_NAME, SP_RATING, CASE WHEN (UPPER(SUBSTR(SP_RATING,1,1)) = 'A' OR UPPER(SUBSTR(SP_RATING,1,3)) = 'BBB') THEN 0 ELSE 1 END, CEO_NAME, ADDR_LINE1, ADDR_LINE2, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY, DESCRIPTION, FOUNDING_DATE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP()  FROM TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON FINWIRE_CMP_ODS_STM.STATUS = DIM_STATUS_TYPE.ST_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_INDUSTRY ON FINWIRE_CMP_ODS_STM.INDUSTRY_ID = DIM_INDUSTRY.IN_ID WHERE FINWIRE_CMP_ODS_STM.METADATA$ACTION = 'INSERT'\"}\n      );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_COMPANY_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Dim Company records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_CUSTOMER_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var nods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.CUSTOMER_NEW_ODS_SP()\"}\n      );\n  nods_stmt.execute();\n  var dim1_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()\"}\n      );\n  dim1_stmt.execute();\n  var uods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.CUSTOMER_UPDT_ODS_SP()\"}\n      );\n  uods_stmt.execute();\n  var dim2_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()\"}\n      );\n  dim2_stmt.execute();\n  var iods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.CUSTOMER_INACT_ODS_SP()\"}\n      );\n  iods_stmt.execute();\n  var dim3_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()\"}\n      );\n  dim3_stmt.execute();\n  return 'Dim Customer Historical completed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_CUSTOMER_MASTER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var btch_stmt = snowflake.createStatement({sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())\"});\n  btch_stmt.execute();\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.CUSTOMER_ODS_SP()\"}\n      );\n  ods_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()\"}\n      );\n  dim_stmt.execute();\n  return 'All Customer Dimension records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_CUSTOMER_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_CUSTOMER SELECT TPCDI_WH.PUBLIC.DIM_CUSTOMER_SEQ.NEXTVAL AS SK_CUSTOMER_ID, CNS.C_ID, CNS.C_TAX_ID, CNS.C_ST_ID, CNS.C_L_NAME, CNS.C_F_NAME, CNS.C_M_NAME, CASE WHEN CNS.C_GNDR = 'M' OR CNS.C_GNDR = 'F' THEN UPPER(CNS.C_GNDR) ELSE 'U' END AS GENDER, CNS.C_TIER, CNS.C_DOB, CNS.C_ADLINE1, CNS.C_ADLINE2, CNS.C_ZIPCODE, CNS.C_CITY, CNS.C_STATE_PROV, CNS.C_CTRY, CASE WHEN CNS.C_CTRY_1 != '' AND CNS.C_AREA_1 != '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_CTRY_1 || '-' || CNS.C_AREA_1 || '-' || CNS.C_LOCAL_1 WHEN CNS.C_CTRY_1 = '' AND CNS.C_AREA_1 != '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_AREA_1 || '-' || CNS.C_LOCAL_1 WHEN CNS.C_CTRY_1 = '' AND CNS.C_AREA_1 = '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_LOCAL_1 ELSE NULL END AS PHONE1, CASE WHEN CNS.C_CTRY_2 != '' AND CNS.C_AREA_2 != '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_CTRY_2 || '-' || CNS.C_AREA_2 || '-' || CNS.C_LOCAL_2 WHEN CNS.C_CTRY_2 = '' AND CNS.C_AREA_2 != '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_AREA_2 || '-' || CNS.C_LOCAL_2 WHEN CNS.C_CTRY_2 = '' AND CNS.C_AREA_2 = '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_LOCAL_2 ELSE NULL END AS PHONE2, CASE WHEN CNS.C_CTRY_3 != '' AND CNS.C_AREA_3 != '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_CTRY_3 || '-' || CNS.C_AREA_3 || '-' || CNS.C_LOCAL_3 WHEN CNS.C_CTRY_3 = '' AND CNS.C_AREA_3 != '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_AREA_3 || '-' || CNS.C_LOCAL_3 WHEN CNS.C_CTRY_3 = '' AND CNS.C_AREA_3 = '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_LOCAL_3 ELSE NULL END AS PHONE3, CNS.C_EMAIL_1, CNS.C_EMAIL_2, NAT_TAX_RATE.TX_NAME AS NATIONAL_TAX_RATE_DESC, NAT_TAX_RATE.TX_RATE AS NATIONAL_TAX_RATE, LOC_TAX_RATE.TX_NAME AS LOCAL_TAX_RATE_DESC, LOC_TAX_RATE.TX_RATE AS LOCAL_TAX_RATE, NULL AS AGENCY_ID, NULL AS CREDIT_RATING, NULL AS NET_WORTH, NULL AS MARKETING_NAMEPLATE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) AS BATCH_ID, LOCALTIMESTAMP() AS EFFECTIVE_DATE FROM TPCDI_ODS.PUBLIC.CUSTOMER_ODS_STM CNS INNER JOIN TPCDI_WH.PUBLIC.DIM_TAX_RATE NAT_TAX_RATE ON CNS.C_NAT_TX_ID = NAT_TAX_RATE.TX_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_TAX_RATE LOC_TAX_RATE ON CNS.C_LCL_TX_ID = LOC_TAX_RATE.TX_ID WHERE CNS.METADATA$ACTION = 'INSERT'\"}\n    );\n  dim_stmt.execute();\n  \n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_CUSTOMER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Dim Customer records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_FINANCIAL_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FINWIRE_FIN_ODS_SP()\"}\n      );\n  ods_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_FINANCIAL SELECT COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_FIN_ODS_STM.YEAR, FINWIRE_FIN_ODS_STM.QUARTER, FINWIRE_FIN_ODS_STM.QTR_START_DATE, FINWIRE_FIN_ODS_STM.REVENUE, FINWIRE_FIN_ODS_STM.EARNINGS, FINWIRE_FIN_ODS_STM.EPS, FINWIRE_FIN_ODS_STM.DILUTED_EPS, FINWIRE_FIN_ODS_STM.MARGIN, FINWIRE_FIN_ODS_STM.INVENTORY, FINWIRE_FIN_ODS_STM.ASSETS, FINWIRE_FIN_ODS_STM.LIABILITIES, FINWIRE_FIN_ODS_STM.SH_OUT, FINWIRE_FIN_ODS_STM.DILUTED_SH_OUT , LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_FIN_ODS_STM.METADATA$ACTION = 'INSERT'\"}\n      );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_FINANCIAL_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  var tsk_stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_TSK SUSPEND\"});\n  tsk_stmt.execute();\n  return 'Historical Dim Financial records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_FINANCIAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FINWIRE_FIN_ODS_SP()\"}\n      );\n  ods_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_FINANCIAL SELECT COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_FIN_ODS_STM.YEAR, FINWIRE_FIN_ODS_STM.QUARTER, FINWIRE_FIN_ODS_STM.QTR_START_DATE, FINWIRE_FIN_ODS_STM.REVENUE, FINWIRE_FIN_ODS_STM.EARNINGS, FINWIRE_FIN_ODS_STM.EPS, FINWIRE_FIN_ODS_STM.DILUTED_EPS, FINWIRE_FIN_ODS_STM.MARGIN, FINWIRE_FIN_ODS_STM.INVENTORY, FINWIRE_FIN_ODS_STM.ASSETS, FINWIRE_FIN_ODS_STM.LIABILITIES, FINWIRE_FIN_ODS_STM.SH_OUT, FINWIRE_FIN_ODS_STM.DILUTED_SH_OUT, LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_FIN_ODS_STM.METADATA$ACTION = 'INSERT'\"}\n      );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_FINANCIAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Dim Financial records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_SECURITY_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var sec_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.FINWIRE_SEC_ODS_SP(4)\"}\n      );\n  sec_stmt.execute();\n  return 'All historical Security records have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_SECURITY_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.DIM_SECURITY SELECT TPCDI_WH.PUBLIC.DIM_SECURITY_SEQ.NEXTVAL, FINWIRE_SEC_ODS_STM.SYMBOL, FINWIRE_SEC_ODS_STM.ISSUE_TYPE, DIM_STATUS_TYPE.ST_NAME, FINWIRE_SEC_ODS_STM.NAME, FINWIRE_SEC_ODS_STM.EX_ID, COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_SEC_ODS_STM.SH_OUT, FINWIRE_SEC_ODS_STM.FIRST_TRADE_DATE, FINWIRE_SEC_ODS_STM.FIRST_TRADE_EXCHG, FINWIRE_SEC_ODS_STM.DIVIDEND, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON FINWIRE_SEC_ODS_STM.STATUS = DIM_STATUS_TYPE.ST_ID LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_SEC_ODS_STM.METADATA$ACTION = 'INSERT'\"}\n      );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_SECURITY_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Dim Security records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TRADE_HISTORICAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_ODS.PUBLIC.TRADE_ODS SELECT TR.T_ID, TH.TH_DTS, TO_DATE(TH.TH_DTS), TH.TH_ST_ID, TR.T_TT_ID, TR.T_IS_CASH, TR.T_S_SYMB, TR.T_QTY, TR.T_BID_PRICE, TR.T_CA_ID, TR.T_EXEC_NAME, TR.T_TRADE_PRICE, TR.T_CHRG, TR.T_COMM, TR.T_TAX, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_I_STM TR INNER JOIN TPCDI_STG.PUBLIC.TRADEHISTORY_STG_I_STM TH ON TR.T_ID = TH.TH_T_ID WHERE (TH.TH_ST_ID = 'SBMT' AND TR.T_TT_ID IN ('TMB','TMS')) OR TH.TH_ST_ID = 'PNDG' \"}\n      );\n  ods_stmt.execute();\n  var audit1_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit1_stmt.execute();\n  var dim1_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP()\"}\n      );\n  dim1_stmt.execute();\n  var cods_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.TRADE_ODS USING (SELECT TR.T_ID T_ID, TH.TH_DTS T_DTS, TO_DATE(TH.TH_DTS) T_DT, TH.TH_ST_ID T_ST_ID, TR.T_TT_ID T_TT_ID, TR.T_IS_CASH T_IS_CASH, TR.T_S_SYMB T_S_SYMB, TR.T_QTY T_QTY, TR.T_BID_PRICE T_BID_PRICE, TR.T_CA_ID T_CA_ID, TR.T_EXEC_NAME T_EXEC_NAME, TR.T_TRADE_PRICE T_TRADE_PRICE, TR.T_CHRG T_CHRG, TR.T_COMM T_COMM, TR.T_TAX T_TAX FROM TPCDI_STG.PUBLIC.TRADE_STG_U_STM TR INNER JOIN TPCDI_STG.PUBLIC.TRADEHISTORY_STG_U_STM TH ON TR.T_ID = TH.TH_T_ID WHERE TH.TH_ST_ID in ('CMPT','CNCL') ) TRADE_STG ON TPCDI_ODS.PUBLIC.TRADE_ODS.T_ID = TRADE_STG.T_ID WHEN MATCHED THEN UPDATE SET TRADE_ODS.T_DTS = TRADE_STG.T_DTS, TRADE_ODS.T_DT = TRADE_STG.T_DT, TRADE_ODS.T_ST_ID = TRADE_STG.T_ST_ID, TRADE_ODS.T_TT_ID = TRADE_STG.T_TT_ID, TRADE_ODS.T_IS_CASH = TRADE_STG.T_IS_CASH, TRADE_ODS.T_S_SYMB = TRADE_STG.T_S_SYMB, TRADE_ODS.T_QTY = TRADE_STG.T_QTY, TRADE_ODS.T_BID_PRICE = TRADE_STG.T_BID_PRICE, TRADE_ODS.T_CA_ID = TRADE_STG.T_CA_ID, TRADE_ODS.T_EXEC_NAME = TRADE_STG.T_EXEC_NAME, TRADE_ODS.T_TRADE_PRICE = TRADE_STG.T_TRADE_PRICE, TRADE_ODS.T_CHRG = TRADE_STG.T_CHRG, TRADE_ODS.T_COMM = TRADE_STG.T_COMM, TRADE_ODS.T_TAX = TRADE_STG.T_TAX, TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP()  WHEN NOT MATCHED THEN INSERT VALUES (TRADE_STG.T_ID, TRADE_STG.T_DTS, TRADE_STG.T_DT, TRADE_STG.T_ST_ID, TRADE_STG.T_TT_ID, TRADE_STG.T_IS_CASH, TRADE_STG.T_S_SYMB, TRADE_STG.T_QTY, TRADE_STG.T_BID_PRICE, TRADE_STG.T_CA_ID, TRADE_STG.T_EXEC_NAME, TRADE_STG.T_TRADE_PRICE, TRADE_STG.T_CHRG, TRADE_STG.T_COMM, TRADE_STG.T_TAX, CURRENT_TIMESTAMP())\"}\n      );\n  cods_stmt.execute();\n  var audit2_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit2_stmt.execute();\n  var dim2_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP()\"}\n      );\n  dim2_stmt.execute();\n  return 'Dim Trade historical records have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TRADE_INCREMENTAL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var iods_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_ODS.PUBLIC.TRADE_ODS SELECT T_ID, T_DTS, TO_DATE(T_DTS), T_ST_ID, T_TT_ID, T_IS_CASH, T_S_SYMB, T_QTY, T_BID_PRICE, T_CA_ID, T_EXEC_NAME, T_TRADE_PRICE, T_CHRG, T_COMM, T_TAX, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_I_STM WHERE CDC_FLAG = 'I' \"}\n      );\n  iods_stmt.execute();\n  var audit1_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit1_stmt.execute();\n  var dim1_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() \"}\n      );\n  dim1_stmt.execute();\n  var sods_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_ODS.PUBLIC.TRADE_ODS SET TRADE_ODS.T_DTS = COALESCE(TS.T_DTS,TRADE_ODS.T_DTS), TRADE_ODS.T_DT = COALESCE(TO_DATE(TS.T_DTS),TRADE_ODS.T_DTS), TRADE_ODS.T_ST_ID = COALESCE(TS.T_ST_ID,TRADE_ODS.T_ST_ID), TRADE_ODS.T_TT_ID = COALESCE(TS.T_TT_ID,TRADE_ODS.T_TT_ID), TRADE_ODS.T_IS_CASH = COALESCE(TS.T_IS_CASH,TRADE_ODS.T_IS_CASH), TRADE_ODS.T_S_SYMB = COALESCE(TS.T_S_SYMB,TRADE_ODS.T_S_SYMB), TRADE_ODS.T_QTY = COALESCE(TS.T_QTY,TRADE_ODS.T_QTY), TRADE_ODS.T_BID_PRICE = COALESCE(TS.T_BID_PRICE,TRADE_ODS.T_BID_PRICE), TRADE_ODS.T_CA_ID = COALESCE(TS.T_CA_ID,TRADE_ODS.T_CA_ID), TRADE_ODS.T_EXEC_NAME = COALESCE(TS.T_EXEC_NAME,TRADE_ODS.T_EXEC_NAME), TRADE_ODS.T_TRADE_PRICE = COALESCE(TS.T_TRADE_PRICE,TRADE_ODS.T_TRADE_PRICE), TRADE_ODS.T_CHRG = COALESCE(TS.T_CHRG,TRADE_ODS.T_CHRG), TRADE_ODS.T_COMM = COALESCE(TS.T_COMM,TRADE_ODS.T_COMM), TRADE_ODS.T_TAX = COALESCE(TS.T_TAX,TRADE_ODS.T_TAX), TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_US_STM TS WHERE TS.CDC_FLAG = 'U' AND TS.T_ST_ID = 'SBMT' AND TRADE_ODS.T_ID = TS.T_ID\"}\n      );\n  sods_stmt.execute();\n  var audit2_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit2_stmt.execute();\n  var dim2_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() \"}\n      );\n  dim2_stmt.execute();\n  var cods_stmt = snowflake.createStatement(\n      {sqlText: \"UPDATE TPCDI_ODS.PUBLIC.TRADE_ODS SET TRADE_ODS.T_DTS = COALESCE(TS.T_DTS,TRADE_ODS.T_DTS), TRADE_ODS.T_DT = COALESCE(TO_DATE(TS.T_DTS),TRADE_ODS.T_DTS), TRADE_ODS.T_ST_ID = COALESCE(TS.T_ST_ID,TRADE_ODS.T_ST_ID), TRADE_ODS.T_TT_ID = COALESCE(TS.T_TT_ID,TRADE_ODS.T_TT_ID), TRADE_ODS.T_IS_CASH = COALESCE(TS.T_IS_CASH,TRADE_ODS.T_IS_CASH), TRADE_ODS.T_S_SYMB = COALESCE(TS.T_S_SYMB,TRADE_ODS.T_S_SYMB), TRADE_ODS.T_QTY = COALESCE(TS.T_QTY,TRADE_ODS.T_QTY), TRADE_ODS.T_BID_PRICE = COALESCE(TS.T_BID_PRICE,TRADE_ODS.T_BID_PRICE), TRADE_ODS.T_CA_ID = COALESCE(TS.T_CA_ID,TRADE_ODS.T_CA_ID), TRADE_ODS.T_EXEC_NAME = COALESCE(TS.T_EXEC_NAME,TRADE_ODS.T_EXEC_NAME), TRADE_ODS.T_TRADE_PRICE = COALESCE(TS.T_TRADE_PRICE,TRADE_ODS.T_TRADE_PRICE), TRADE_ODS.T_CHRG = COALESCE(TS.T_CHRG,TRADE_ODS.T_CHRG), TRADE_ODS.T_COMM = COALESCE(TS.T_COMM,TRADE_ODS.T_COMM), TRADE_ODS.T_TAX = COALESCE(TS.T_TAX,TRADE_ODS.T_TAX), TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_UC_STM TS WHERE TS.CDC_FLAG = 'U' AND TS.T_ST_ID in ('CMPT','CNCL') AND TRADE_ODS.T_ID = TS.T_ID \"}\n      );\n  cods_stmt.execute();\n  var audit3_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit3_stmt.execute();\n  var dim3_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() \"}\n      );\n  dim3_stmt.execute();\n  return 'Dim Trade incremental records have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "DIM_TRADE_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_WH.PUBLIC.DIM_TRADE USING (SELECT TRADE_ODS_STM.T_ID TRADE_ID, COALESCE(DIM_ACCOUNT_NOW.SK_BROKER_ID,0) SK_BROKER_ID, DIM_DATE.DATE_ID DATE_ID, DIM_TIME.TIME_ID TIME_ID, DIM_STATUS_TYPE.ST_NAME STATUS, DIM_TRADE_TYPE.TT_NAME TYPE, TRADE_ODS_STM.T_IS_CASH CASH_FLAG, COALESCE(DIM_SECURITY_NOW.SK_SECURITY_ID,0) SK_SECURITY_ID, COALESCE(DIM_SECURITY_NOW.SK_COMPANY_ID,0) SK_COMPANY_ID, TRADE_ODS_STM.T_QTY QUANTITY, TRADE_ODS_STM.T_BID_PRICE BID_PRICE, COALESCE(DIM_ACCOUNT_NOW.SK_CUSTOMER_ID,0) SK_CUSTOMER_ID, COALESCE(DIM_ACCOUNT_NOW.SK_ACCOUNT_ID,0) SK_ACCOUNT_ID, TRADE_ODS_STM.T_EXEC_NAME EXECUTED_BY, TRADE_ODS_STM.T_TRADE_PRICE TRADE_PRICE, TRADE_ODS_STM.T_CHRG FEE, TRADE_ODS_STM.T_COMM COMMISSION, TRADE_ODS_STM.T_TAX TAX, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) BATCH_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_ODS.PUBLIC.TRADE_ODS_STM   INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON TRADE_ODS_STM.T_ST_ID = DIM_STATUS_TYPE.ST_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE_TYPE ON TRADE_ODS_STM.T_TT_ID = DIM_TRADE_TYPE.TT_ID LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON TRADE_ODS_STM.T_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON TRADE_ODS_STM.T_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TRADE_ODS_STM.T_DT = DIM_DATE.DATE_VALUE INNER JOIN TPCDI_WH.PUBLIC.DIM_TIME ON TO_TIME(TO_CHAR(TRADE_ODS_STM.T_DTS,'HH:MM:SS')) = DIM_TIME.TIME_VALUE) TRADE_UPDATES ON DIM_TRADE.TRADE_ID = TRADE_UPDATES.TRADE_ID WHEN MATCHED AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'TRUE' AND TRADE_UPDATES.STATUS IN ('Completed','Canceled') THEN UPDATE SET DIM_TRADE.SK_BROKER_ID = TRADE_UPDATES.SK_BROKER_ID, DIM_TRADE.SK_CLOSE_DATE_ID = TRADE_UPDATES.DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID = TRADE_UPDATES.TIME_ID, DIM_TRADE.STATUS = TRADE_UPDATES.STATUS, DIM_TRADE.TYPE = TRADE_UPDATES.TYPE, DIM_TRADE.CASH_FLAG = TRADE_UPDATES.CASH_FLAG, DIM_TRADE.SK_SECURITY_ID = TRADE_UPDATES.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID = TRADE_UPDATES.SK_COMPANY_ID, DIM_TRADE.QUANTITY = TRADE_UPDATES.QUANTITY, DIM_TRADE.BID_PRICE = TRADE_UPDATES.BID_PRICE, DIM_TRADE.SK_CUSTOMER_ID = TRADE_UPDATES.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID = TRADE_UPDATES.SK_ACCOUNT_ID, DIM_TRADE.EXECUTED_BY = TRADE_UPDATES.EXECUTED_BY, DIM_TRADE.TRADE_PRICE = TRADE_UPDATES.TRADE_PRICE, DIM_TRADE.FEE = TRADE_UPDATES.FEE, DIM_TRADE.COMMISSION = TRADE_UPDATES.COMMISSION, DIM_TRADE.TAX = TRADE_UPDATES.TAX, DIM_TRADE.BATCH_ID = TRADE_UPDATES.BATCH_ID, DIM_TRADE.LAST_UPDATED_TS = LOCALTIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (TRADE_UPDATES.TRADE_ID, TRADE_UPDATES.SK_BROKER_ID, TRADE_UPDATES.DATE_ID, TRADE_UPDATES.TIME_ID, NULL, NULL, TRADE_UPDATES.STATUS, TRADE_UPDATES.TYPE, TRADE_UPDATES.CASH_FLAG, TRADE_UPDATES.SK_SECURITY_ID, TRADE_UPDATES.SK_COMPANY_ID, TRADE_UPDATES.QUANTITY, TRADE_UPDATES.BID_PRICE, TRADE_UPDATES.SK_CUSTOMER_ID, TRADE_UPDATES.SK_ACCOUNT_ID, TRADE_UPDATES.EXECUTED_BY, TRADE_UPDATES.TRADE_PRICE, TRADE_UPDATES.FEE, TRADE_UPDATES.COMMISSION, TRADE_UPDATES.TAX, TRADE_UPDATES.BATCH_ID, LOCALTIMESTAMP() )\"}      );\n  dim_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  return 'Dim Trade rows have been processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FINWIRE_CMP_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "levels"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var level_counter = 1\n  while (level_counter <= LEVELS)\n  {\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS USING (WITH NTH_PTS_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(C.PTS,\" + level_counter + \") OVER (PARTITION BY C.CIK ORDER BY C.PTS) AS NTH_PTS_DATE, C.CIK AS C_CIK FROM TPCDI_STG.PUBLIC.FINWIRE_CMP_STG C) SELECT FCS.PTS, FCS.REC_TYPE, FCS.COMPANY_NAME, FCS.CIK, FCS.STATUS, FCS.INDUSTRY_ID, FCS.SP_RATING, FCS.FOUNDING_DATE, FCS.ADDR_LINE1, FCS.ADDR_LINE2, FCS.POSTAL_CODE, FCS.CITY, FCS.STATE_PROVINCE, FCS.COUNTRY, FCS.CEO_NAME, FCS.DESCRIPTION FROM TPCDI_STG.PUBLIC.FINWIRE_CMP_STG FCS JOIN NTH_PTS_DATE_ROW ON NTH_PTS_DATE_ROW.NTH_PTS_DATE = FCS.PTS AND NTH_PTS_DATE_ROW.C_CIK = FCS.CIK) FINWIRE_CMP_STG ON TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS.CIK = FINWIRE_CMP_STG.CIK WHEN MATCHED THEN UPDATE SET FINWIRE_CMP_ODS.PTS = FINWIRE_CMP_STG.PTS, FINWIRE_CMP_ODS.REC_TYPE = FINWIRE_CMP_STG.REC_TYPE, FINWIRE_CMP_ODS.COMPANY_NAME = FINWIRE_CMP_STG.COMPANY_NAME, FINWIRE_CMP_ODS.STATUS = FINWIRE_CMP_STG.STATUS, FINWIRE_CMP_ODS.INDUSTRY_ID = FINWIRE_CMP_STG.INDUSTRY_ID, FINWIRE_CMP_ODS.SP_RATING = FINWIRE_CMP_STG.SP_RATING, FINWIRE_CMP_ODS.FOUNDING_DATE = FINWIRE_CMP_STG.FOUNDING_DATE, FINWIRE_CMP_ODS.ADDR_LINE1 = FINWIRE_CMP_STG.ADDR_LINE1, FINWIRE_CMP_ODS.ADDR_LINE2 = FINWIRE_CMP_STG.ADDR_LINE2, FINWIRE_CMP_ODS.POSTAL_CODE = FINWIRE_CMP_STG.POSTAL_CODE, FINWIRE_CMP_ODS.CITY = FINWIRE_CMP_STG.CITY, FINWIRE_CMP_ODS.STATE_PROVINCE = FINWIRE_CMP_STG.STATE_PROVINCE, FINWIRE_CMP_ODS.COUNTRY = FINWIRE_CMP_STG.COUNTRY, FINWIRE_CMP_ODS.CEO_NAME = FINWIRE_CMP_STG.CEO_NAME, FINWIRE_CMP_ODS.DESCRIPTION = FINWIRE_CMP_STG.DESCRIPTION, FINWIRE_CMP_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES ( FINWIRE_CMP_STG.PTS, FINWIRE_CMP_STG.REC_TYPE, FINWIRE_CMP_STG.COMPANY_NAME, FINWIRE_CMP_STG.CIK, FINWIRE_CMP_STG.STATUS, FINWIRE_CMP_STG.INDUSTRY_ID, FINWIRE_CMP_STG.SP_RATING, FINWIRE_CMP_STG.FOUNDING_DATE, FINWIRE_CMP_STG.ADDR_LINE1, FINWIRE_CMP_STG.ADDR_LINE2, FINWIRE_CMP_STG.POSTAL_CODE, FINWIRE_CMP_STG.CITY, FINWIRE_CMP_STG.STATE_PROVINCE, FINWIRE_CMP_STG.COUNTRY, FINWIRE_CMP_STG.CEO_NAME, FINWIRE_CMP_STG.DESCRIPTION, CURRENT_TIMESTAMP())\"}\n    );\n  ods_stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_CMP_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n    );\n  audit_stmt.execute();\n  var dim_stmt = snowflake.createStatement(\n      {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_COMPANY_SP()\"}\n    );\n  dim_stmt.execute();\n  level_counter++\n  }\n  return 'Company records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FINWIRE_FIN_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS SELECT PTS, REC_TYPE, YEAR, QUARTER, QTR_START_DATE, POSTING_DATE, REVENUE, EARNINGS, EPS, DILUTED_EPS, MARGIN, INVENTORY, ASSETS, LIABILITIES, SH_OUT, DILUTED_SH_OUT, CO_NAME_OR_CIK, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.FINWIRE_FIN_STG\"}\n      );\n  stmt.execute();\n  var audit_stmt = snowflake.createStatement(\n      {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_FIN_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n  audit_stmt.execute();\n  return 'Financial ODS records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "FINWIRE_SEC_ODS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "name_datatype_list": {
              "kind": "name_datatype_list",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "levels"
                }
              },
              "data_type": {
                "kind": "data_type",
                "numeric": {
                  "kind": "numeric",
                  "FLOAT": "float"
                }
              }
            },
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  var level_counter = 1\n  while (level_counter <= LEVELS)\n  {\n  var ods_stmt = snowflake.createStatement(\n      {sqlText: \"MERGE INTO TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS USING ( WITH NTH_PTS_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(S.PTS,\" + level_counter + \") OVER (PARTITION BY S.SYMBOL ORDER BY S.PTS) AS NTH_PTS_DATE, S.SYMBOL AS S_SYMBOL FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG S) SELECT FSS.PTS, FSS.REC_TYPE, FSS.SYMBOL, FSS.ISSUE_TYPE, FSS.STATUS, FSS.NAME, FSS.EX_ID, FSS.SH_OUT, FSS.FIRST_TRADE_DATE, FSS.FIRST_TRADE_EXCHG, FSS.DIVIDEND, FSS.CO_NAME_OR_CIK FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG FSS JOIN NTH_PTS_DATE_ROW ON NTH_PTS_DATE_ROW.NTH_PTS_DATE = FSS.PTS AND NTH_PTS_DATE_ROW.S_SYMBOL = FSS.SYMBOL ) FINWIRE_SEC_STG ON TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS.SYMBOL = FINWIRE_SEC_STG.SYMBOL WHEN MATCHED THEN UPDATE SET FINWIRE_SEC_ODS.PTS = FINWIRE_SEC_STG.PTS, FINWIRE_SEC_ODS.REC_TYPE = FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_ODS.ISSUE_TYPE = FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_ODS.STATUS = FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_ODS.NAME = FINWIRE_SEC_STG.NAME, FINWIRE_SEC_ODS.EX_ID = FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_ODS.SH_OUT = FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_ODS.FIRST_TRADE_DATE = FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_ODS.FIRST_TRADE_EXCHG = FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_ODS.DIVIDEND = FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_ODS.CO_NAME_OR_CIK = FINWIRE_SEC_STG.CO_NAME_OR_CIK, FINWIRE_SEC_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES ( FINWIRE_SEC_STG.PTS, FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_STG.SYMBOL, FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_STG.NAME, FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_STG.CO_NAME_OR_CIK, CURRENT_TIMESTAMP())\"}\n      );\n    ods_stmt.execute();\n    var audit_stmt = snowflake.createStatement(\n        {sqlText: \"INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_SEC_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))\"}\n      );\n    audit_stmt.execute();\n    if (level_counter == LEVELS) {\n    var stm_stmt = snowflake.createStatement(\n        {sqlText: \"CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_SECURITY_STM ON TABLE TPCDI_WH.PUBLIC.DIM_SECURITY\"}\n      );\n    stm_stmt.execute();\n    }\n    var wh_stmt = snowflake.createStatement(\n        {sqlText: \"CALL TPCDI_WH.PUBLIC.DIM_SECURITY_SP()\"}\n      );\n    wh_stmt.execute();\n    level_counter++\n  }\n  return 'Historical Security records processed.';\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "RESET_ALL_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.CTRL_BATCH\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.LOAD_SNAPSHOT\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.AUDIT\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG\"} ); rs = stmt.execute();\n  //stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_TEST_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.DATE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.FINWIRE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.HR_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.PROSPECT_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.TAXRATE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.TIME_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_ODS.PUBLIC.TRADE_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_ACCOUNT\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_BROKER\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_COMPANY\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_CUSTOMER\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_DATE\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_FINANCIAL\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_INDUSTRY\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_SECURITY\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_STATUS_TYPE\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TAX_RATE\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TIME\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TRADE\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TRADE_TYPE\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_CASH_BALANCES\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_HOLDINGS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_PROSPECT\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_WATCHES\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR ACCOUNT.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_BROKER_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR BROKER.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_COMPANY_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR COMPANY.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_CUSTOMER_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR CUSTOMER.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_SECURITY_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR SECURITY.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE BATCH_ID FOR THE BATCH CONTROL TABLE.'\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM ON TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM ON TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CUSTOMER_STG_STM ON TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM ON TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DATE_STG_STM ON TABLE TPCDI_STG.PUBLIC.DATE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM ON TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HR_STG_STM ON TABLE TPCDI_STG.PUBLIC.HR_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.INDUSTRY_STG_STM ON TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.PROSPECT_STG_STM ON TABLE TPCDI_STG.PUBLIC.PROSPECT_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM ON TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TAXRATE_STG_STM ON TABLE TPCDI_STG.PUBLIC.TAXRATE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TIME_STG_STM ON TABLE TPCDI_STG.PUBLIC.TIME_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_I_STM ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_U_STM ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADETYPE_STG_STM ON TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_I_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_UC_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_US_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_U_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_ACTV_STM ON TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_CNCL_STM ON TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.ACCOUNT_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.CUSTOMER_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.TRADE_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.TRADE_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS\"} ); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_SECURITY_STM ON TABLE TPCDI_ODS.PUBLIC.TRADE_ODS\"} ); rs = stmt.execute();\n  rs.next();\n  return \"All objects have been reset.\";\n  $$"
          }
        },
        "SEMICOLON": ";"
      },
      {
        "kind": "sql_stmt_list_001",
        "sql_stmt": {
          "kind": "sql_stmt",
          "create_or_replace_procedure": {
            "kind": "create_or_replace_procedure",
            "create_replace": {
              "kind": "create_replace",
              "CREATE": "CREATE",
              "create_replace_001": {
                "kind": "create_replace_001",
                "OR": "OR",
                "REPLACE": "REPLACE"
              }
            },
            "PROCEDURE": "PROCEDURE",
            "proc_name": {
              "kind": "proc_name",
              "name": {
                "kind": "name",
                "var_name": {
                  "kind": "var_name",
                  "REGULAR_ID": "TPCDI_WH"
                },
                "name_002": [
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "PUBLIC"
                    }
                  },
                  {
                    "kind": "name_001",
                    "PERIOD": ".",
                    "var_name": {
                      "kind": "var_name",
                      "REGULAR_ID": "STOP_TASKS_SP"
                    }
                  }
                ]
              }
            },
            "LEFT_PAREN": "(",
            "RIGHT_PAREN": ")",
            "RETURNS": "returns",
            "create_or_replace_procedure_001": {
              "kind": "create_or_replace_procedure_001",
              "create_or_replace_procedure_001_000_001": {
                "kind": "create_or_replace_procedure_001_000_001",
                "data_type": {
                  "kind": "data_type",
                  "string_binary": {
                    "kind": "string_binary",
                    "STRING": "string"
                  }
                }
              }
            },
            "LANGUAGE": "language",
            "create_or_replace_procedure_002": {
              "kind": "create_or_replace_procedure_002",
              "JAVASCRIPT": "javascript"
            },
            "AS": "AS",
            "MULTILINEJS": "  $$\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.CHECK_STREAM_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_INCREMENTAL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_5_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_10_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_100_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_1000_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_5_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_10_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_100_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  stmt = snowflake.createStatement({sqlText: \"ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_1000_CTRL_TSK SUSPEND\"}); rs = stmt.execute();\n  rs.next();\n  output = rs.getColumnValue(1);\n  return output;\n  $$"
          }
        },
        "SEMICOLON": ";"
      }
    ]
  },
  "captures": [
    {
      "line": 219,
      "pos": 0,
      "pat": "(\\s*--).*$",
      "kind": "slcomments",
      "data": "-- This procedure updates the ACCOUNT_ODS table with closed accounts from the historical load.",
      "prev": "",
      "nxt": "-- This procedure updates the ACCOUNT_ODS table with closed accounts from the historical load."
    },
    {
      "line": 224,
      "pos": 1,
      "pat": "(\\s*--).*$",
      "kind": "slcomments",
      "data": "-- This procedure inserts new accounts into ACCOUNT_ODS from the historical load.",
      "prev": "",
      "nxt": ";-- This procedure inserts new accounts into ACCOUNT_ODS from the historical load."
    },
    {
      "line": 230,
      "pos": 0,
      "pat": "(\\s*--).*$",
      "kind": "slcomments",
      "data": "-- This procedure merges new and updated accounts into the ACCOUNT_ODS table for the incremental loads.",
      "prev": "",
      "nxt": "-- This procedure merges new and updated accounts into the ACCOUNT_ODS table for the incremental loads."
    },
    {
      "line": 236,
      "pos": 0,
      "pat": "(\\s*--).*$",
      "kind": "slcomments",
      "data": "-- This procedure processes account updates into ACCOUNT_ODS in the order in which they happened for the historical load.",
      "prev": "",
      "nxt": "-- This procedure processes account updates into ACCOUNT_ODS in the order in which they happened for the historical load."
    }
  ]
}