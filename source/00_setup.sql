-- Main Execution Procedure for TPC_DI Benchmark
CREATE OR REPLACE FILE FORMAT TPCDI_STG.PUBLIC.TXT_CSV COMPRESSION = 'AUTO' FIELD_DELIMITER = ',' RECORD_DELIMITER = '\n' SKIP_HEADER = 0 FIELD_OPTIONALLY_ENCLOSED_BY = '\042' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\n') ;

CREATE OR REPLACE FILE FORMAT TPCDI_STG.PUBLIC.TXT_PIPE COMPRESSION = 'AUTO' FIELD_DELIMITER = '|' RECORD_DELIMITER = '\n' SKIP_HEADER = 0 FIELD_OPTIONALLY_ENCLOSED_BY = 'NONE' TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE ESCAPE = 'NONE' ESCAPE_UNENCLOSED_FIELD = '\134' DATE_FORMAT = 'AUTO' TIMESTAMP_FORMAT = 'AUTO' NULL_IF = ('\\n') ;

CREATE OR REPLACE FILE FORMAT TPCDI_STG.PUBLIC.TXT_FIXED_WIDTH TYPE = CSV COMPRESSION = 'AUTO' FIELD_DELIMITER = NONE RECORD_DELIMITER = '\n' SKIP_HEADER = 0 TRIM_SPACE = FALSE ERROR_ON_COLUMN_COUNT_MISMATCH = TRUE NULL_IF = ('\\n') ;

CREATE OR REPLACE FILE FORMAT TPCDI_STG.PUBLIC.XML  TYPE = 'XML'  COMPRESSION = 'NONE'  PRESERVE_SPACE = FALSE  STRIP_OUTER_ELEMENT = TRUE  DISABLE_SNOWFLAKE_DATA = FALSE  DISABLE_AUTO_CONVERT = FALSE  IGNORE_UTF8_ERRORS = FALSE ;
-- Setup warehouse for execution

CREATE OR REPLACE WAREHOUSE TPCDI_GENERAL WITH WAREHOUSE_SIZE = 'MEDIUM' AUTO_SUSPEND = 600 AUTO_RESUME = TRUE MIN_CLUSTER_COUNT = 1 MAX_CLUSTER_COUNT = 2 SCALING_POLICY = 'STANDARD' COMMENT = 'Warehouse to run TPC-DI Benchmark';-- CREATE Database/schema

CREATE OR REPLACE DATABASE TPCDI_STG;

CREATE OR REPLACE SCHEMA TPCDI_STG.PUBLIC;

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG ( CDC_FLAG CHAR(1) COMMENT 'I OR U DENOTES INSERT OR UPDATE', CDC_DSN INT COMMENT 'DATABASE SEQUENCE NUMBER', CA_ID INT NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER', CA_B_ID INT NOT NULL COMMENT 'IDENTIFIER OF THE MANAGING BROKER', CA_C_ID INT NOT NULL COMMENT 'OWNING CUSTOMER IDENTIFIER', CA_NAME CHAR(50) COMMENT 'NAME OF CUSTOMER ACCOUNT', CA_TAX_ST INT COMMENT '0, 1 OR 2 TAX STATUS OF THIS ACCOUNT', CA_ST_ID CHAR(4) COMMENT 'ACTV OR INAC CUSTOMER STATUS TYPE IDENTIFIER' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM
ON TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG ( CDC_FLAG CHAR(1) COMMENT 'I DENOTES INSERT', CDC_DSN INT COMMENT 'DATABASE SEQUENCE NUMBER', CT_CA_ID INT NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER', CT_DTS DATETIME NOT NULL COMMENT 'TIMESTAMP OF WHEN THE TRADE TOOK PLACE', CT_AMT NUMBER(10,2) NOT NULL COMMENT 'AMOUNT OF THE CASH TRANSACTION', CT_NAME CHAR(100) NOT NULL COMMENT 'TRANSACTION NAME OR DESCRIPTION: E.G. "CASH FROM SALE OF DUPONT STOCK".' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM
ON TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG ( XML VARIANT COMMENT 'XML STRING' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG_STM
ON TABLE TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG ( CDC_FLAG CHAR(1) COMMENT 'DENOTES INSERT OR UPDATE', CDC_DSN INT COMMENT 'DATABASE SEQUENCE NUMBER', C_ID INT NOT NULL COMMENT 'CUSTOMER IDENTIFIER', C_TAX_ID CHAR(20) NOT NULL COMMENT 'CUSTOMER’S TAX IDENTIFIER', C_ST_ID CHAR(4) COMMENT 'ACTV OR INAC CUSTOMER STATUS TYPE IDENTIFIER', C_L_NAME CHAR(25) NOT NULL COMMENT 'PRIMARY CUSTOMER''S LAST NAME.', C_F_NAME CHAR(20) NOT NULL COMMENT 'PRIMARY CUSTOMER''S FIRST NAME.', C_M_NAME CHAR(1) COMMENT 'PRIMARY CUSTOMER''S MIDDLE INITIAL', C_GNDR CHAR(1) COMMENT 'GENDER OF THE PRIMARY CUSTOMER', C_TIER NUMBER(1) COMMENT 'CUSTOMER TIER', C_DOB DATE NOT NULL COMMENT 'CUSTOMER’S DATE OF BIRTH, AS YYYY-MM-DD.', C_ADLINE1 CHAR(80) NOT NULL COMMENT 'ADDRESS LINE 1', C_ADLINE2 CHAR(80) COMMENT 'ADDRESS LINE 2', C_ZIPCODE CHAR(12) NOT NULL COMMENT 'ZIP OR POSTAL CODE', C_CITY CHAR(25) NOT NULL COMMENT 'CITY', C_STATE_PROV CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE', C_CTRY CHAR(24) COMMENT 'COUNTRY', C_CTRY_1 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 1.', C_AREA_1 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 1.', C_LOCAL_1 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 1.', C_EXT_1 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 1.', C_CTRY_2 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 2.', C_AREA_2 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 2.', C_LOCAL_2 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 2.', C_EXT_2 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 2.', C_CTRY_3 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 3.', C_AREA_3 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 3.', C_LOCAL_3 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 3.', C_EXT_3 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 3.', C_EMAIL_1 CHAR(50) COMMENT 'CUSTOMER''S E-MAIL ADDRESS 1.', C_EMAIL_2 CHAR(50) COMMENT 'CUSTOMER''S E-MAIL ADDRESS 2.', C_LCL_TX_ID CHAR(4) NOT NULL COMMENT 'CUSTOMER''S LOCAL TAX RATE', C_NAT_TX_ID CHAR(4) NOT NULL COMMENT 'CUSTOMER''S NATIONAL TAX RATE' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CUSTOMER_STG_STM
ON TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG ( CDC_FLAG CHAR(1) COMMENT 'I DENOTES INSERT', CDC_DSN INT COMMENT 'DATABASE SEQUENCE NUMBER', DM_DATE DATE NOT NULL COMMENT 'DATE OF LAST COMPLETED TRADING DAY.', DM_S_SYMB CHAR(15) NOT NULL COMMENT 'SECURITY SYMBOL OF THE SECURITY', DM_CLOSE NUMBER(8,2) NOT NULL COMMENT 'CLOSING PRICE OF THE SECURITY ON THIS DAY.', DM_HIGH NUMBER(8,2) NOT NULL COMMENT 'HIGHEST PRICE FOR THE SECUIRITY ON THIS DAY.', DM_LOW NUMBER(8,2) NOT NULL COMMENT 'LOWEST PRICE FOR THE SECURITY ON THIS DAY.', DM_VOL INT NOT NULL COMMENT 'VOLUME OF THE SECURITY ON THIS DAY.' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM
ON TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.DATE_STG ( SK_DATEID INT NOT NULL COMMENT 'SURROGATE KEY FOR THE DATE', DATEVALUE CHAR(20) NOT NULL COMMENT 'THE DATE AS TEXT, E.G. “2004-07-07”', DATEDESC CHAR(20) NOT NULL COMMENT 'THE DATE MONTH DAY, YYYY, E.G. JULY 7, 2004', CALENDARYEARID NUMBER(4) NOT NULL COMMENT 'YEAR NUMBER AS A NUMBER', CALENDARYEARDESC CHAR(20) NOT NULL COMMENT 'YEAR NUMBER AS TEXT', CALENDARQTRID NUMBER(5) NOT NULL COMMENT 'QUARTER AS A NUMBER, E.G. 20042', CALENDARQTRDESC CHAR(20) NOT NULL COMMENT 'QUARTER AS TEXT, E.G. “2004 Q2”', CALENDARMONTHID NUMBER(6) NOT NULL COMMENT 'MONTH AS A NUMBER, E.G. 20047', CALENDARMONTHDESC CHAR(20) NOT NULL COMMENT 'MONTH AS TEXT, E.G. “2004 JULY”', CALENDARWEEKID NUMBER(6) NOT NULL COMMENT 'WEEK AS A NUMBER, E.G. 200428', CALENDARWEEKDESC CHAR(20) NOT NULL COMMENT 'WEEK AS TEXT, E.G. “2004-W28”', DAYOFWEEKNUM NUMBER(1) NOT NULL COMMENT 'DAY OF WEEK AS A NUMBER, E.G. 3', DAYOFWEEKDESC CHAR(10) NOT NULL COMMENT 'DAY OF WEEK AS TEXT, E.G. “WEDNESDAY”', FISCALYEARID NUMBER(4) NOT NULL COMMENT 'FISCAL YEAR AS A NUMBER, E.G. 2005', FISCALYEARDESC CHAR(20) NOT NULL COMMENT 'FISCAL YEAR AS TEXT, E.G. “2005”', FISCALQTRID NUMBER(5) NOT NULL COMMENT 'FISCAL QUARTER AS A NUMBER, E.G. 20051', FISCALQTRDESC CHAR(20) NOT NULL COMMENT 'FISCAL QUARTER AS TEXT, E.G. “2005 Q1”', HOLIDAYFLAG BOOLEAN COMMENT 'INDICATES HOLIDAYS' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DATE_STG_STM
ON TABLE TPCDI_STG.PUBLIC.DATE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.FINWIRE_STG ( PTS VARCHAR(15) NOT NULL COMMENT 'POSTING DATE & TIME AS YYYYMMDD-HHMMSS - FIN, CMP, SEC', REC_TYPE VARCHAR(3) NOT NULL COMMENT '“FIN”, "CMP", OR "SEC" - FIN, CMP, SEC', COMPANY_NAME VARCHAR(60) NOT NULL COMMENT 'NAME OF THE COMPANY - CMP', CIK VARCHAR(10) NOT NULL COMMENT 'COMPANY IDENTIFICATION CODE FROM SEC - CMP', STATUS VARCHAR(4) NOT NULL COMMENT 'ACTV FOR ACTIVE COMPANY, INAC FOR INACTIVE - CMP, SEC', INDUSTRY_ID VARCHAR(2) NOT NULL COMMENT 'CODE FOR INDUSTRY SEGMENT - CMP', SP_RATING VARCHAR(4) NOT NULL COMMENT 'S&P RATING - CMP', FOUNDING_DATE VARCHAR(8) COMMENT 'A DATE AS YYYYMMDD - CMP', ADDR_LINE1 VARCHAR(80) NOT NULL COMMENT 'MAILING ADDRESS - CMP', ADDR_LINE2 VARCHAR(80) COMMENT 'MAILING ADDRESS - CMP', POSTAL_CODE VARCHAR(12) NOT NULL COMMENT 'MAILING ADDRESS - CMP', CITY VARCHAR(25) NOT NULL COMMENT 'MAILING ADDRESS - CMP', STATE_PROVINCE VARCHAR(20) NOT NULL COMMENT 'MAILING ADDRESS - CMP', COUNTRY VARCHAR(24) COMMENT 'MAILING ADDRESS - CMP', CEO_NAME VARCHAR(46) NOT NULL COMMENT 'NAME OF COMPANY CEO - CMP', DESCRIPTION VARCHAR(150) NOT NULL COMMENT 'DESCRIPTION OF THE COMPANY - CMP', YEAR VARCHAR(4) NOT NULL COMMENT 'YEAR OF THE QUARTER END. - FIN', QUARTER VARCHAR(1) NOT NULL COMMENT 'QUARTER NUMBER: VALID VALUES ARE 1, 2, 3, 4 - FIN', QTR_START_DATE VARCHAR(8) NOT NULL COMMENT 'START DATE OF QUARTER, AS YYYYMMDD - FIN', POSTING_DATE VARCHAR(8) NOT NULL COMMENT 'POSTING DATE OF QUARTERLY REPORT AS YYYYMMDD - FIN', REVENUE VARCHAR(17) NOT NULL COMMENT 'REPORTED REVENUE FOR THE QUARTER - FIN', EARNINGS VARCHAR(17) NOT NULL COMMENT 'NET EARNINGS REPORTED FOR THE QUARTER - FIN', EPS VARCHAR(12) NOT NULL COMMENT 'BASIC EARNINGS PER SHARE FOR THE QUARTER - FIN', DILUTED_EPS VARCHAR(12) NOT NULL COMMENT 'DILUTED EARNINGS PER SHARE FOR THE QUARTER - FIN', MARGIN VARCHAR(12) NOT NULL COMMENT 'PROFIT DIVIDED BY REVENUES FOR THE QUARTER - FIN', INVENTORY VARCHAR(17) NOT NULL COMMENT 'VALUE OF INVENTORY ON HAND AT END OF QUARTER - FIN', ASSETS VARCHAR(17) NOT NULL COMMENT 'VALUE OF TOTAL ASSETS AT THE END OF QUARTER - FIN', LIABILITIES VARCHAR(17) NOT NULL COMMENT 'VALUE OF TOTAL LIABILITIES AT THE END OF QUARTER - FIN', SH_OUT VARCHAR(13) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING - FIN, SEC', DILUTED_SH_OUT VARCHAR(13) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING (DILUTED) - FIN', CO_NAME_OR_CIK VARCHAR(60) NOT NULL COMMENT 'COMPANY CIK NUMBER (IF ONLY DIGITS, 10 VARCHARS) OR NAME (IF NOT ONLY DIGITS, 60 VARCHARS) - FIN, SEC', SYMBOL VARCHAR(15) NOT NULL COMMENT 'SECURITY SYMBOL - SEC', ISSUE_TYPE VARCHAR(6) NOT NULL COMMENT 'ISSUE TYPE - SEC', NAME VARCHAR(70) NOT NULL COMMENT 'SECURITY NAME - SEC', EX_ID VARCHAR(6) NOT NULL COMMENT 'ID OF THE EXCHANGE THE SECURITY IS TRADED ON - SEC', FIRST_TRADE_DATE VARCHAR(8) NOT NULL COMMENT 'DATE OF FIRST TRADE AS YYYYMMDD - SEC', FIRST_TRADE_EXCHG VARCHAR(8) NOT NULL COMMENT 'DATE OF FIRST TRADE ON EXCHANGE AS YYYYMMDD - SEC', DIVIDEND VARCHAR(12) NOT NULL COMMENT 'DIVIDEND AS VALUE_T - SEC' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.FINWIRE_STG_CMP_STM
ON TABLE TPCDI_STG.PUBLIC.FINWIRE_STG
;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.FINWIRE_STG_FIN_STM
ON TABLE TPCDI_STG.PUBLIC.FINWIRE_STG
;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.FINWIRE_STG_SEC_STM
ON TABLE TPCDI_STG.PUBLIC.FINWIRE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG ( CDC_FLAG CHAR(1) COMMENT 'I DENOTES INSERT', CDC_DSN INT COMMENT 'DATABASE SEQUENCE NUMBER', HH_H_T_ID NUMBER(15) NOT NULL COMMENT 'TRADE IDENTIFIER OF THE TRADE THAT ORIGINALLY CREATED THE HOLDING ROW.', HH_T_ID NUMBER(15) NOT NULL COMMENT 'TRADE IDENTIFIER OF THE CURRENT TRADE', HH_BEFORE_QTY NUMBER(6) NOT NULL COMMENT 'QUANTITY OF THIS SECURITY HELD BEFORE THE MODIFYING TRADE.', HH_AFTER_QTY NUMBER(6) NOT NULL COMMENT 'QUANTITY OF THIS SECURITY HELD AFTER THE MODIFYING TRADE.' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM
ON TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.HR_STG ( EMPLOYEEID NUMBER(11) NOT NULL COMMENT 'ID OF EMPLOYEE', MANAGERID NUMBER(11) NOT NULL COMMENT 'ID OF EMPLOYEE''S MANAGER', EMPLOYEEFIRSTNAME CHAR(30) NOT NULL COMMENT 'FIRST NAME', EMPLOYEELASTNAME CHAR(30) NOT NULL COMMENT 'LAST NAME', EMPLOYEEMI CHAR(1) COMMENT 'MIDDLE INITIAL', EMPLOYEEJOBCODE NUMBER(3) COMMENT 'NUMERIC JOB CODE', EMPLOYEEBRANCH CHAR(30) COMMENT 'FACILITY IN WHICH EMPLOYEE HAS OFFICE', EMPLOYEEOFFICE CHAR(10) COMMENT 'OFFICE NUMBER OR DESCRIPTION', EMPLOYEEPHONE CHAR(14) COMMENT 'EMPLOYEE PHONE NUMBER' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HR_STG_STM
ON TABLE TPCDI_STG.PUBLIC.HR_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG ( IN_ID CHAR(2) NOT NULL COMMENT 'INDUSTRY CODE', IN_NAME CHAR(50) NOT NULL COMMENT 'INDUSTRY DESCRIPTION', IN_SC_ID CHAR(4) NOT NULL COMMENT 'SECTOR IDENTIFIER' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.INDUSTRY_STG_STM
ON TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.PROSPECT_STG ( AGENCYID CHAR(30) NOT NULL COMMENT 'UNIQUE IDENTIFIER FROM AGENCY', LASTNAME CHAR(30) NOT NULL COMMENT 'LAST NAME', FIRSTNAME CHAR(30) NOT NULL COMMENT 'FIRST NAME', MIDDLEINITIAL CHAR(1) COMMENT 'MIDDLE INITIAL', GENDER CHAR(1) COMMENT '''M'' OR ''F'' OR ''U''', ADDRESSLINE1 CHAR(80) COMMENT 'POSTAL ADDRESS', ADDRESSLINE2 CHAR(80) COMMENT 'POSTAL ADDRESS', POSTALCODE CHAR(12) COMMENT 'POSTAL CODE', CITY CHAR(25) NOT NULL COMMENT 'CITY', STATE CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE', COUNTRY CHAR(24) COMMENT 'POSTAL COUNTRY', PHONE CHAR(30) COMMENT 'TELEPHONE NUMBER', INCOME NUMBER(9) COMMENT 'ANNUAL INCOME', NUMBERCARS NUMBER(2) COMMENT 'CARS OWNED', NUMBERCHILDREN NUMBER(2) COMMENT 'DEPENDENT CHILDREN', MARITALSTATUS CHAR(1) COMMENT '''S'' OR ''M'' OR ''D'' OR ''W'' OR ''U''', AGE NUMBER(3) COMMENT 'CURRENT AGE', CREDITRATING NUMBER(4) COMMENT 'NUMERIC RATING', OWNORRENTFLAG CHAR(1) COMMENT '''O'' OR ''R'' OR ''U''', EMPLOYER CHAR(30) COMMENT 'NAME OF EMPLOYER', NUMBERCREDITCARDS NUMBER(2) COMMENT 'CREDIT CARDS', NETWORTH NUMBER(12) COMMENT 'ESTIMATED TOTAL NET WORTH' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.PROSPECT_STG_STM
ON TABLE TPCDI_STG.PUBLIC.PROSPECT_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG ( ST_ID CHAR(4) NOT NULL COMMENT 'STATUS CODE', ST_NAME CHAR(10) NOT NULL COMMENT 'STATUS DESCRIPTION' ) ; 

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM
ON TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.TAXRATE_STG ( TX_ID CHAR(4) NOT NULL COMMENT 'TAX RATE CODE', TX_NAME CHAR(50) NOT NULL COMMENT 'TAX RATE DESCRIPTION', TX_RATE NUMBER(6,5) NOT NULL COMMENT 'TAX RATE' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TAXRATE_STG_STM
ON TABLE TPCDI_STG.PUBLIC.TAXRATE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.TIME_STG ( SK_TIMEID INT NOT NULL COMMENT 'SURROGATE KEY FOR THE TIME' , TIMEVALUE CHAR(20) NOT NULL COMMENT 'THE TIME AS TEXT, E.G. “01:23:45”' , HOURID NUMBER(2) NOT NULL COMMENT 'HOUR NUMBER AS A NUMBER, E.G. 01' , HOURDESC CHAR(20) NOT NULL COMMENT 'HOUR NUMBER AS TEXT, E.G. “01”' , MINUTEID NUMBER(2) NOT NULL COMMENT 'MINUTE AS A NUMBER, E.G. 23' , MINUTEDESC CHAR(20) NOT NULL COMMENT 'MINUTE AS TEXT, E.G. “01:23”' , SECONDID NUMBER(2) NOT NULL COMMENT 'SECOND AS A NUMBER, E.G. 45' , SECONDDESC CHAR(20) NOT NULL COMMENT 'SECOND AS TEXT, E.G. “01:23:45”' , MARKETHOURSFLAG BOOLEAN COMMENT 'INDICATES A TIME DURING MARKET HOURS' , OFFICEHOURSFLAG BOOLEAN COMMENT 'INDICATES A TIME DURING OFFICE HOURS' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TIME_STG_STM
ON TABLE TPCDI_STG.PUBLIC.TIME_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG (   TH_T_ID NUMBER(15) NOT NULL COMMENT 'TRADE IDENTIFIER. CORRESPONDS TO T_ID IN THE TRADE.TXT FILE' , TH_DTS DATETIME NOT NULL COMMENT 'WHEN THE TRADE HISTORY WAS UPDATED.' , TH_ST_ID CHAR(4) NOT NULL COMMENT 'STATUS TYPE IDENTIFIER.' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_I_STM
ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG
;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_U_STM
ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG
;
-- CREATE TABLE STATEMENT COMMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG ( TT_ID CHAR(3) NOT NULL COMMENT 'TRADE TYPE CODE', TT_NAME CHAR(12) NOT NULL COMMENT 'TRADE TYPE DESCRIPTION', TT_IS_SELL INT NOT NULL COMMENT 'FLAG INDICATING A SALE', TT_IS_MRKT INT NOT NULL COMMENT 'FLAG INDICATING A MARKET ORDER' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADETYPE_STG_STM
ON TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.TRADE_STG ( CDC_FLAG CHAR(1) COMMENT 'I, U DENOTES INSERT, UPDATE' , CDC_DSN NUMBER(12) COMMENT 'DATABASE SEQUENCE NUMBER' , T_ID NUMBER(15) NOT NULL COMMENT 'TRADE IDENTIFIER.' , T_DTS DATETIME NOT NULL COMMENT 'DATE AND TIME OF TRADE.' , T_ST_ID CHAR(4) NOT NULL COMMENT 'STATUS TYPE IDENTIFIER' , T_TT_ID CHAR(3) NOT NULL COMMENT 'TRADE TYPE IDENTIFIER' , T_IS_CASH INT COMMENT 'IS THIS TRADE A CASH (1) OR MARGIN (0) TRADE?' , T_S_SYMB CHAR(15) NOT NULL COMMENT 'SECURITY SYMBOL OF THE SECURITY' , T_QTY NUMBER(6) COMMENT 'QUANTITY OF SECURITIES TRADED.' , T_BID_PRICE NUMBER(8,2) COMMENT 'THE REQUESTED UNIT PRICE.' , T_CA_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER.' , T_EXEC_NAME CHAR(49) NOT NULL COMMENT 'NAME OF THE PERSON EXECUTING THE TRADE.' , T_TRADE_PRICE NUMBER(8,2) COMMENT 'UNIT PRICE AT WHICH THE SECURITY WAS TRADED.' , T_CHRG NUMBER(10,2) COMMENT 'FEE CHARGED FOR PLACING THIS TRADE REQUEST.' , T_COMM NUMBER(10,2) COMMENT 'COMMISSION EARNED ON THIS TRADE' , T_TAX NUMBER(10,2) COMMENT 'AMOUNT OF TAX DUE ON THIS TRADE' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_I_STM
ON TABLE TPCDI_STG.PUBLIC.TRADE_STG
;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_U_STM
ON TABLE TPCDI_STG.PUBLIC.TRADE_STG
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG ( CDC_FLAG CHAR(1) COMMENT 'I, U DENOTES INSERT, UPDATE', CDC_DSN NUMBER(12) COMMENT 'DATABASE SEQUENCE NUMBER', W_C_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER IDENTIFIER', W_S_SYMB CHAR(15) NOT NULL COMMENT 'SYMBOL OF THE SECURITY TO WATCH', W_DTS DATETIME NOT NULL COMMENT 'DATE AND TIME STAMP FOR THE ACTION', W_ACTION CHAR(4) COMMENT 'WHETHER ACTIVATING OR CANCELING THE WATCH' ) ;

CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_STM
ON TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG
;
-- Create some staging views
CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.ACCOUNT_CLOSE_STG AS
  SELECT
  XML:"@ActionTS"::TIMESTAMP AS ACTION_DATE
  ,XML:"@ActionType"::STRING AS ACTION_TYPE
  ,XML:"$"."@C_ID"::NUMBER AS CUSTOMER_ID
  --,XML:"$"."$"."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  --,XML:"$"."$"[4]."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
  WHERE XML:"@ActionType"::STRING = 'CLOSEACCT';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.ACCOUNT_NEW_STG AS
  SELECT
  XML:"@ActionTS"::TIMESTAMP AS ACTION_DATE
  ,XML:"@ActionType"::STRING AS ACTION_TYPE
  ,XML:"$"."@C_ID"::NUMBER AS CUSTOMER_ID
  --,XML:"$"."$"."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  --,XML:"$"."$"."@CA_TAX_ST"::NUMBER AS CUSTOMER_ACCOUNT_TAX_STATUS
  --,XML:"$"."$"."$"[0]."$"::STRING AS CUSTOMER_ACCOUNT_BROKER_ID
  --,XML:"$"."$"."$"[1]."$"::STRING AS CUSTOMER_ACCOUNT_NAME
  --,XML:"$"."$"[4]."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  --,XML:"$"."$"[4]."@CA_TAX_ST"::NUMBER AS CUSTOMER_ACCOUNT_TAX_STATUS
  --,XML:"$"."$"[4]."$"[0]."$"::STRING AS CUSTOMER_ACCOUNT_BROKER_ID
  --,XML:"$"."$"[4]."$"[1]."$"::STRING AS CUSTOMER_ACCOUNT_NAME
  FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
  WHERE XML:"@ActionType"::STRING = 'ADDACCT';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AS
  SELECT
  XML:"@ActionTS"::TIMESTAMP AS ACTION_DATE
  ,XML:"@ActionType"::STRING AS ACTION_TYPE
  ,XML:"$"."@C_ID"::NUMBER AS CUSTOMER_ID
  --,XML:"$"."$"."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  --,XML:"$"."$"."@CA_TAX_ST"::NUMBER AS CUSTOMER_ACCOUNT_TAX_STATUS
  --,XML:"$"."$"."$"[0]."$"::STRING AS CUSTOMER_ACCOUNT_BROKER_ID
  --,XML:"$"."$"."$"[1]."$"::STRING AS CUSTOMER_ACCOUNT_NAME
  --,XML:"$"."$"[4]."@CA_ID"::NUMBER AS CUSTOMER_ACCOUNT_ID
  --,XML:"$"."$"[4]."@CA_TAX_ST"::NUMBER AS CUSTOMER_ACCOUNT_TAX_STATUS
  --,XML:"$"."$"[4]."$"[0]."$"::STRING AS CUSTOMER_ACCOUNT_BROKER_ID
  --,XML:"$"."$"[4]."$"[1]."$"::STRING AS CUSTOMER_ACCOUNT_NAME
  FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
  WHERE XML:"@ActionType"::STRING = 'UPDACCT';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.CUSTOMER_INACT_STG AS
  SELECT XML:"$"."@C_ID"::NUMBER AS C_ID 
  FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
  WHERE XML:"@ActionType"::STRING = 'INACT';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.CUSTOMER_NEW_STG AS
  SELECT
    XML:"@ActionTS"::TIMESTAMP AS ACTION_DATE
  , XML:"@ActionType"::STRING AS ACTION_TYPE
  , XML:"$"."@C_DOB"::DATE AS DATE_OF_BIRTH
  , XML:"$"."@C_GNDR"::STRING AS GENDER
  , XML:"$"."@C_ID"::NUMBER AS CUSTOMER_ID
  , XML:"$"."@C_TAX_ID"::STRING AS CUSTOMER_TAX_ID
  , XML:"$"."@C_TIER"::STRING AS CUSTOMER_TIER
  /*
  , XML:"$"."$"[0]."$"[0]."$"::STRING AS LAST_NAME
  , XML:"$"."$"[0]."$"[1]."$"::STRING AS FIRST_NAME
  , XML:"$"."$"[0]."$"[2]."$"::STRING AS MIDDLE_INITIAL
  , XML:"$"."$"[1]."$"[0]."$"::STRING AS ADDRESS_LINE_1
  , XML:"$"."$"[1]."$"[1]."$"::STRING AS ADDRESS_LINE_2
  , XML:"$"."$"[1]."$"[2]."$"::STRING AS ZIP_CODE
  , XML:"$"."$"[1]."$"[3]."$"::STRING AS CITY
  , XML:"$"."$"[1]."$"[4]."$"::STRING AS STATE_PROVINCE
  , XML:"$"."$"[1]."$"[5]."$"::STRING AS COUNTRY
  , XML:"$"."$"[2]."$"[0]."$"::STRING AS PRIMARY_EMAIL
  , XML:"$"."$"[2]."$"[1]."$"::STRING AS ALTERNATE_EMAIL
  , XML:"$"."$"[2]."$"[2]."$"[0]."$"::STRING AS PHONE_1_COUNTRY_CODE
  , XML:"$"."$"[2]."$"[2]."$"[1]."$"::STRING AS PHONE_1_AREA_CODE
  , XML:"$"."$"[2]."$"[2]."$"[2]."$"::STRING AS PHONE_1_PHONE_NUMBER
  , XML:"$"."$"[2]."$"[2]."$"[3]."$"::STRING AS PHONE_1_EXTENSION
  , XML:"$"."$"[2]."$"[3]."$"[0]."$"::STRING AS PHONE_2_COUNTRY_CODE
  , XML:"$"."$"[2]."$"[3]."$"[1]."$"::STRING AS PHONE_2_AREA_CODE
  , XML:"$"."$"[2]."$"[3]."$"[2]."$"::STRING AS PHONE_2_PHONE_NUMBER
  , XML:"$"."$"[2]."$"[3]."$"[3]."$"::STRING AS PHONE_2_EXTENSION
  , XML:"$"."$"[2]."$"[4]."$"[0]."$"::STRING AS PHONE_3_COUNTRY_CODE
  , XML:"$"."$"[2]."$"[4]."$"[1]."$"::STRING AS PHONE_3_AREA_CODE
  , XML:"$"."$"[2]."$"[4]."$"[2]."$"::STRING AS PHONE_3_PHONE_NUMBER
  , XML:"$"."$"[2]."$"[4]."$"[3]."$"::STRING AS PHONE_3_EXTENSION
  , XML:"$"."$"[3]."$"[0]."$"::STRING AS LOCAL_TAX_ID
  , XML:"$"."$"[3]."$"[1]."$"::STRING AS NATIONAL_TAX_ID
  , XML:"$"."$"[4]."@CA_ID"::STRING AS CUSTOMER_ACCOUNT_ID
  , XML:"$"."$"[4]."$"[1]."$"::STRING AS CUSTOMER_ACCOUNT_NAME
  */
  FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
  WHERE XML:"@ActionType"::STRING = 'NEW';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.UPDCUST_LEVEL1 AS
SELECT FL.THIS
FROM TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG
   , LATERAL FLATTEN(INPUT => TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG.XML:"$"
                            , RECURSIVE => TRUE
                            ) FL; 
--WHERE XML:"@ActionType"::STRING = 'UPDCUST' AND FL.PATH = '[\'$\']';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.UPDCUST_LEVEL2 AS 
SELECT
   THIS:"@C_ID"::NUMBER AS C_ID
 , (CASE WHEN THIS:"@C_TIER" = '' THEN NULL ELSE THIS:"@C_TIER" END)::NUMBER AS C_TIER
 , XMLGET(THIS, 'Address') AS ADDRESS
 , XMLGET(THIS, 'ContactInfo') AS CONTACTINFO
FROM TPCDI_STG.PUBLIC.UPDCUST_LEVEL1;

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.UPDCUST_LEVEL3 AS 
SELECT
   C_ID AS C_ID
 , C_TIER AS C_TIER
 , XMLGET(ADDRESS,'C_ADLINE1'):"$"::STRING AS ADDRESSLINE1
 , XMLGET(ADDRESS,'C_ADLINE2'):"$"::STRING AS ADDRESSLINE2
 , XMLGET(ADDRESS,'C_ZIPCODE'):"$"::STRING AS ZIPCODE
 , XMLGET(ADDRESS,'C_CITY'):"$"::STRING AS CITY
 , XMLGET(ADDRESS,'C_STATE_PROV'):"$"::STRING AS STATEPROV
 , XMLGET(ADDRESS,'C_CTRY'):"$"::STRING AS COUNTRY
 , XMLGET(CONTACTINFO,'C_PRIM_EMAIL'):"$"::STRING AS PRIMARYEMAIL
 , XMLGET(CONTACTINFO,'C_ALT_EMAIL'):"$"::STRING AS ALTERNATEEMAIL
 , XMLGET(CONTACTINFO,'C_PHONE_1') AS C_PHONE_1
 , XMLGET(CONTACTINFO,'C_PHONE_2') AS C_PHONE_2
 , XMLGET(CONTACTINFO,'C_PHONE_3') AS C_PHONE_3
FROM TPCDI_STG.PUBLIC.UPDCUST_LEVEL2;

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.CUSTOMER_UPDT_STG AS
  SELECT
    C_ID
  , C_TIER
  , ADDRESSLINE1
  , ADDRESSLINE2
  , ZIPCODE
  , CITY
  , STATEPROV
  , COUNTRY
  , PRIMARYEMAIL
  , ALTERNATEEMAIL
  , XMLGET(C_PHONE_1,'C_CTRY_CODE'):"$"::STRING AS PH1COUNTRYCODE
  , XMLGET(C_PHONE_1,'C_AREA_CODE'):"$"::STRING AS PH1AREACODE
  , XMLGET(C_PHONE_1,'C_LOCAL'):"$"::STRING AS PH1LOCALNUMBER
  , XMLGET(C_PHONE_1,'C_EXT'):"$"::STRING AS PH1EXTENSION
  , XMLGET(C_PHONE_2,'C_CTRY_CODE'):"$"::STRING AS PH2COUNTRYCODE
  , XMLGET(C_PHONE_2,'C_AREA_CODE'):"$"::STRING AS PH2AREACODE
  , XMLGET(C_PHONE_2,'C_LOCAL'):"$"::STRING AS PH2LOCALNUMBER
  , XMLGET(C_PHONE_2,'C_EXT'):"$"::STRING AS PH2EXTENSION
  , XMLGET(C_PHONE_3,'C_CTRY_CODE'):"$"::STRING AS PH3COUNTRYCODE
  , XMLGET(C_PHONE_3,'C_AREA_CODE'):"$"::STRING AS PH3AREACODE
  , XMLGET(C_PHONE_3,'C_LOCAL'):"$"::STRING AS PH3LOCALNUMBER
  , XMLGET(C_PHONE_3,'C_EXT'):"$"::STRING AS PH3EXTENSION
  FROM TPCDI_STG.PUBLIC.UPDCUST_LEVEL3;

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.FINWIRE_CMP_STG AS
  SELECT
      TO_TIMESTAMP_NTZ(PTS,'YYYYMMDD-HH24MISS') AS PTS,
      REC_TYPE,
      COMPANY_NAME,
      CIK,
      STATUS,
      INDUSTRY_ID,
      SP_RATING,
      TRY_TO_DATE(FOUNDING_DATE) AS FOUNDING_DATE,
      ADDR_LINE1,
      ADDR_LINE2,
      POSTAL_CODE,
      CITY,
      STATE_PROVINCE,
      COUNTRY,
      CEO_NAME,
      DESCRIPTION
  FROM TPCDI_STG.PUBLIC.FINWIRE_STG
  WHERE REC_TYPE = 'CMP';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.FINWIRE_FIN_STG AS
  SELECT
      TO_TIMESTAMP_NTZ(PTS,'YYYYMMDD-HH24MISS') AS PTS,
      REC_TYPE,
      TO_NUMBER(YEAR,4,0) AS YEAR,
      TO_NUMBER(QUARTER,1,0) AS QUARTER,
      TO_DATE(QTR_START_DATE, 'YYYYMMDD') AS QTR_START_DATE,
      TO_DATE(POSTING_DATE, 'YYYYMMDD') AS POSTING_DATE,
      TO_NUMBER(REVENUE,15,2) AS REVENUE,
      TO_NUMBER(EARNINGS,15,2) AS EARNINGS,
      TO_NUMBER(EPS,10,2) AS EPS,
      TO_NUMBER(DILUTED_EPS,10,2) AS DILUTED_EPS,
      TO_NUMBER(MARGIN,10,2) AS MARGIN,
      TO_NUMBER(INVENTORY,15,2) AS INVENTORY,
      TO_NUMBER(ASSETS,15,2) AS ASSETS,
      TO_NUMBER(LIABILITIES,15,2) AS LIABILITIES,
      TO_NUMBER(SH_OUT,13,0) AS SH_OUT,
      TO_NUMBER(DILUTED_SH_OUT,13,0) AS DILUTED_SH_OUT,
      CO_NAME_OR_CIK 
  FROM TPCDI_STG.PUBLIC.FINWIRE_STG
  WHERE REC_TYPE = 'FIN'; 

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.FINWIRE_SEC_STG AS
  SELECT
      TO_TIMESTAMP_NTZ(PTS,'YYYYMMDD-HH24MISS') AS PTS,
      REC_TYPE,
      SYMBOL,
      ISSUE_TYPE,
      STATUS,
      NAME,
      EX_ID,
      TO_NUMBER(SH_OUT,13,0) AS SH_OUT,
      TO_DATE(FIRST_TRADE_DATE,'YYYYMMDD') AS FIRST_TRADE_DATE,
      TO_DATE(FIRST_TRADE_EXCHG,'YYYYMMDD') AS FIRST_TRADE_EXCHG,
      TO_NUMBER(DIVIDEND,10,2) AS DIVIDEND,
      CO_NAME_OR_CIK
  FROM TPCDI_STG.PUBLIC.FINWIRE_STG
  WHERE REC_TYPE = 'SEC';

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_ACCOUNT_SP(scale float,batches float,wait float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load incremental files	
  var batch_counter = 3;
  while (batch_counter <= BATCHES)
  {
    var incrm_stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.ACCOUNT_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/Account FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
      );
    incrm_stmt.execute();
    // insert wait here
    //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
    //rs = stmt.execute();	
    batch_counter++
  }
  // Suspend Load Task
  var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_" + tpcdi_scale + "_TSK SUSPEND"});
  task_stmt.execute();
  return "All account files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.CASHTRANSACTION_STG(CT_CA_ID,CT_DTS,CT_AMT,CT_NAME) FROM (SELECT $1 $3    ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/CashTransaction) FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical cashtransaction files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_SP(scale float,batches float,wait float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load incremental files
        var batch_counter = 1;
        while (batch_counter <= BATCHES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.CASHTRANSACTION_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/CashTransaction FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                batch_counter++
        }
        // Suspend Load Task
        var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_" + tpcdi_scale + "_TSK SUSPEND"});
        task_stmt.execute();
        return "All incremental cashtransaction files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_SP(files float,wait float)
        returns float
        language javascript
        as
        $$
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "INSERT INTO TPCDI_STG.PUBLIC.CASHTRANSACTION_STG SELECT       TO_CHAR(NULL) $1       ,ROW_NUMBER() OVER (ORDER BY 1) $2      ,$1 $3  ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/load/cash_transaction/CashTransaction01.txt (FILE_FORMAT => 'TXT_PIPE')"}
                );
        hist_stmt.execute();
        // Insert wait here
        //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
        //rs = stmt.execute();
        // Load incremental files
        var file_counter = 2;
        while (file_counter <= FILES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.CASHTRANSACTION_STG FROM @TPCDI_FILES/load/cash_transaction/ FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*0" + file_counter + ".txt' ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                file_counter++
        }
        return "All cashtransaction files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load CUSTOMER_MGMT_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/CustomerMgmt FILE_FORMAT = (FORMAT_NAME = 'XML') ON_ERROR=CONTINUE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All customer_mgmt files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_CUSTOMER_SP(scale float,batches float,wait float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load incremental files
  var batch_counter = 1;
  while (batch_counter <= BATCHES)
  {
    var incrm_stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.CUSTOMER_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/Customer FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
      );
    incrm_stmt.execute();
    // insert wait here
    //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
    //rs = stmt.execute();
    batch_counter++
  }
  // Suspend Load Task
  var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_" + tpcdi_scale + "_TSK SUSPEND"});
  task_stmt.execute();
  return "All customer files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.DAILYMARKET_STG(DM_DATE,DM_S_SYMB,DM_CLOSE,DM_HIGH,DM_LOW,DM_VOL) FROM (SELECT $1 $3      ,$2 $4  ,$3 $5  ,$4 $6  ,$5 $7  ,$6 $8 FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/DailyMarket) FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical dailymarket files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_SP(scale float,batches float,wait float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load incremental files
        var batch_counter = 1;
        while (batch_counter <= BATCHES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.DAILYMARKET_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/DailyMarket FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                batch_counter++
        }
        // Suspend Load Task
        var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_" + tpcdi_scale + "_TSK SUSPEND"});
        task_stmt.execute();
        return "All incremental dailymarket files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_SP(files float,wait float)
        returns float
        language javascript
        as
        $$
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "INSERT INTO TPCDI_STG.PUBLIC.DAILYMARKET_STG SELECT   TO_CHAR(NULL) $1       ,ROW_NUMBER() OVER (ORDER BY 1) $2      ,$1 $3  ,$2 $4  ,$3 $5  ,$4 $6  ,$5 $7  ,$6 $8 FROM @TPCDI_FILES/load/daily_market/DailyMarket01.txt (FILE_FORMAT => 'TXT_PIPE')"}
                );
        hist_stmt.execute();
        // Insert wait here
        //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
        //rs = stmt.execute();
        // Load incremental files
        var file_counter = 2;
        while (file_counter <= FILES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.DAILYMARKET_STG FROM @TPCDI_FILES/load/daily_market/ FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*0" + file_counter + ".txt' ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                file_counter++
        }
        return "All dailymarket files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_DATE_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load DATE_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.DATE_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/Date.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_DATE_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All date files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_FINWIRE_SP(scale float)
  returns string
  language javascript
  as
  $$
   // Load incremental files
  var tpcdi_scale = SCALE;
  var batch_counter = 1;
  var BATCHES = 3;
  var WAIT = 60;
  while (batch_counter <= BATCHES)      {
                // Load All FINWIRE files
         var incrm_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.FINWIRE_STG FROM ( SELECT SUBSTR($1, 0, 15) PTS, SUBSTR($1, 16, 3) REC_TYPE, SUBSTR($1, 19, 60) COMPANY_NAME, SUBSTR($1, 79, 10) CIK, IFF( SUBSTR($1, 16, 3) = ' CMP', SUBSTR($1, 89, 4), SUBSTR($1, 40, 4) ) STATUS, SUBSTR($1, 93, 2) INDUSTRY_ID, SUBSTR($1, 95, 4) SP_RATING, SUBSTR($1, 99, 8) FOUNDING_DATE, SUBSTR($1, 107, 80) ADDR_LINE1, SUBSTR($1, 187, 80) ADDR_LINE2, SUBSTR($1, 267, 12) POSTAL_CODE, SUBSTR($1, 279, 25) CITY, SUBSTR($1, 304, 20) STATE_PROVINCE, SUBSTR($1, 324, 24) COUNTRY, SUBSTR($1, 348, 46) CEO_NAME, SUBSTR($1, 394, 150) DESCRIPTION, SUBSTR($1, 19, 4) YEAR, SUBSTR($1, 23, 1) QUARTER, SUBSTR($1, 24, 8) QTR_START_DATE, SUBSTR($1, 32, 8) POSTING_DATE, SUBSTR($1, 40, 17) REVENUE, SUBSTR($1, 57, 17) EARNINGS, SUBSTR($1, 74, 12) EPS, SUBSTR($1, 86, 12) DILUTED_EPS, SUBSTR($1, 98, 12) MARGIN, SUBSTR($1, 110, 17) INVENTORY, SUBSTR($1, 127, 17) ASSETS, SUBSTR($1, 144, 17) LIABILITIES, IFF( SUBSTR($1, 16, 3) = 'FIN', SUBSTR($1, 161, 13), SUBSTR($1, 120, 13) ) SH_OUT, SUBSTR($1, 174, 13) DILUTED_SH_OUT, IFF( SUBSTR($1, 16, 3) = 'FIN', SUBSTR($1, 187, 60), SUBSTR($1, 161, 60) ) CO_NAME_OR_CIK, SUBSTR($1, 19, 15) SYMBOL, SUBSTR($1, 34, 6) ISSUE_TYPE, SUBSTR($1, 44, 70) NAME, SUBSTR($1, 114, 6) EX_ID, SUBSTR($1, 133, 8) FIRST_TRADE_DATE, SUBSTR($1, 141, 8) FIRST_TRADE_EXCHG, SUBSTR($1, 149, 12) DIVIDEND FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/FINWIRE) FILE_FORMAT = (FORMAT_NAME = 'TXT_FIXED_WIDTH')  PATTERN = '^(?:(?!csv).)*$' ON_ERROR = SKIP_FILE"}
         );
         incrm_stmt.execute();
         // insert wait here
    //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
    //rs = stmt.execute();
    batch_counter++
        }

  return "All FINWIRE files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG(HH_H_T_ID,HH_T_ID,HH_BEFORE_QTY,HH_AFTER_QTY) FROM (SELECT $1 $3       ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/HoldingHistory) FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical holding history files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_SP(scale float,batches float,wait float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load incremental files
        var batch_counter = 1;
        while (batch_counter <= BATCHES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/HoldingHistory FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                batch_counter++
        }
        // Suspend Load Task
        var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_" + tpcdi_scale + "_TSK SUSPEND"});
        task_stmt.execute();
        return "All incremental holding history files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_SP(files float,wait float)
        returns float
        language javascript
        as
        $$
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "INSERT INTO TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG SELECT        TO_CHAR(NULL) $1       ,ROW_NUMBER() OVER (ORDER BY 1) $2      ,$1 $3  ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/load/holding_history/HoldingHistory01.txt (FILE_FORMAT => 'TXT_PIPE')"}
                );
        hist_stmt.execute();
        // Insert wait here
        //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
        //rs = stmt.execute();
        // Load incremental files
        var file_counter = 2;
        while (file_counter <= FILES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG FROM @TPCDI_FILES/load/holding_history/ FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*0" + file_counter + ".txt' ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                file_counter++
        }
        return "All holding history files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_HR_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load HR_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.HR_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/HR FILE_FORMAT = (FORMAT_NAME = 'TXT_CSV') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_HR_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All HR files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load INDUSTRY_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.INDUSTRY_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/Industry.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All industry files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_SP(" + tpcdi_scale + ",1,1,5)"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical prospect files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_SP(" + tpcdi_scale + ",3,2,60)"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All incremental prospect files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_PROSPECT_SP(scale float,files float,position float,wait float)
  returns string
  language javascript
  as
  $$
  // Load historical and incremental files
  var tpcdi_scale = SCALE
  var file_counter = POSITION;
  while (file_counter <= FILES)
  {
    var incrm_stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.PROSPECT_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + file_counter + "/Prospect FILE_FORMAT = (FORMAT_NAME = 'TXT_CSV') ON_ERROR = SKIP_FILE"}
      );
    incrm_stmt.execute();
    // insert wait here
    //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
    //rs = stmt.execute();
    file_counter++
  }
  return "All prospect files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_REFERENCE_FILES_SP()
  returns string
  language javascript
  as
  $$
  // Load Reference Files
  // Load DATE_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_DATE_SP()"}
    );
  rs = stmt.execute();
  // Load TIME_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_TIME_SP()"}
    );
  rs = stmt.execute();
  // Load TRADETYPE_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP()"}
    );
  rs = stmt.execute();
  // Load STATUSTYPE_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP()"}
    );
  rs = stmt.execute();
  // Load TAXRATE_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP()"}
    );
  rs = stmt.execute();
  // Load INDUSTRY_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP()"}
    );
  rs = stmt.execute();
  // Load HR_STG
  stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_STG.PUBLIC.LOAD_HR_SP()"}
    );
  rs = stmt.execute();
  rs.next();
  return "All reference files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load STATUSTYPE_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.STATUSTYPE_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/StatusType.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All statustype files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load TAXRATE_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TAXRATE_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/TaxRate.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All taxrate files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TIME_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load TIME_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TIME_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/Time.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  rs.next();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_TIME_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All time files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  // Load TRADETYPE_STG
  stmt = snowflake.createStatement(
      {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADETYPE_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/TradeType.txt FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
    );
  rs = stmt.execute();
  // Stop task
  var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_" + tpcdi_scale + "_TSK SUSPEND"});
  stoptask_stmt.execute();
  return "All tradetype files have been loaded.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TRADE_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADE_STG(T_ID,T_DTS,T_ST_ID,T_TT_ID,T_IS_CASH,T_S_SYMB,T_QTY,T_BID_PRICE,T_CA_ID,T_EXEC_NAME,T_TRADE_PRICE,T_CHRG,T_COMM,T_TAX) FROM (SELECT $1 $3       ,$2 $4  ,$3 $5  ,$4 $6  ,$5 $7  ,$6 $8  ,$7 $9  ,$8 $10         ,$9 $11         ,$10 $12        ,$11 $13        ,$12 $14        ,$13 $15        ,$14 $16 FROM @TPCDI_FILES) FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*//tpcdi/sf=" + tpcdi_scale + "/Batch1/Trade[^HT].*' ON_ERROR = SKIP_FILE"}
                );
        hist_stmt.execute();
        // Load trade history
        var hist2_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADEHISTORY_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/TradeHistory FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist2_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical trade and tradehistory files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TRADE_I_SP(scale float,batches float,wait float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load incremental files
        var batch_counter = 1;
        while (batch_counter <= BATCHES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADE_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/Trade FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                batch_counter++
        }
        // Suspend Load Task
        var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_" + tpcdi_scale + "_TSK SUSPEND"});
        task_stmt.execute();
        return "All incremental trade files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_TRADE_SP(files float,wait float)
        returns float
        language javascript
        as
        $$
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "INSERT INTO TPCDI_STG.PUBLIC.TRADE_STG SELECT         TO_CHAR(NULL) $1       ,ROW_NUMBER() OVER (ORDER BY 1) $2      ,$1 $3  ,$2 $4  ,$3 $5  ,$4 $6  ,$5 $7  ,$6 $8  ,$7 $9  ,$8 $10         ,$9 $11         ,$10 $12        ,$11 $13        ,$12 $14        ,$13 $15        ,$14 $16 FROM @TPCDI_FILES/load/trade/Trade01.txt (FILE_FORMAT => 'TXT_PIPE')"}
                );
        hist_stmt.execute();
        // Load trade history
        var hist2_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADEHISTORY_STG          FROM @TPCDI_FILES/load/trade_history/TradeHistory01.txt                 FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist2_stmt.execute();
        // Insert wait here
        //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
        //rs = stmt.execute();
        // Load incremental files
        var file_counter = 2;
        while (file_counter <= FILES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.TRADE_STG FROM @TPCDI_FILES/load/trade/ FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*0" + file_counter + ".txt' ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                rs = stmt.execute();
                file_counter++
        }
        return "All trade and tradehistory files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_SP(scale float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "COPY INTO TPCDI_STG.PUBLIC.WATCH_HISTORY_STG(W_C_ID,W_S_SYMB,W_DTS,W_ACTION) FROM (SELECT $1 $3      ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch1/WatchHistory) FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                );
        hist_stmt.execute();
        // Stop task
        var stoptask_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_" + tpcdi_scale + "_TSK SUSPEND"});
        stoptask_stmt.execute();
        return "All historical watch_history files have been loaded.";
        $$
;
CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_SP(scale float,batches float,wait float)
        returns float
        language javascript
        as
        $$
        var tpcdi_scale = SCALE
        // Load incremental files
        var batch_counter = 1;
        while (batch_counter <= BATCHES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.WATCH_HISTORY_STG FROM @TPCDI_FILES/tmp/tpcdi/sf=" + tpcdi_scale + "/Batch" + batch_counter + "/WatchHistory FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                batch_counter++
        }
        // Suspend Load Task
        var task_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_" + tpcdi_scale + "_TSK SUSPEND"});
        task_stmt.execute();
        return "All incremental watch_history files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_SP(files float,wait float)
        returns float
        language javascript
        as
        $$
        // Load historical file
        var hist_stmt = snowflake.createStatement(
                {sqlText: "INSERT INTO TPCDI_STG.PUBLIC.WATCH_HISTORY_STG SELECT         TO_CHAR(NULL) $1       ,ROW_NUMBER() OVER (ORDER BY 1) $2      ,$1 $3  ,$2 $4  ,$3 $5  ,$4 $6 FROM @TPCDI_FILES/load/watch_history/WatchHistory01.txt (FILE_FORMAT => 'TXT_PIPE')"}
                );
        hist_stmt.execute();
        // Insert wait here
        //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
        //rs = stmt.execute();
        var file_counter = 2;
        while (file_counter <= FILES)
        {
                var incrm_stmt = snowflake.createStatement(
                        {sqlText: "COPY INTO TPCDI_STG.PUBLIC.WATCH_HISTORY_STG FROM @TPCDI_FILES/load/watch_history/ FILE_FORMAT = (FORMAT_NAME = 'TXT_PIPE') PATTERN='.*0" + file_counter + ".txt' ON_ERROR = SKIP_FILE"}
                        );
                incrm_stmt.execute();
                // insert wait here
                //stmt = snowflake.createStatement({sqlText:"call system$wait(" + WAIT + ", 'SECONDS')"});
                //rs = stmt.execute();
                file_counter++
        }
        return "All watch_history files have been loaded.";
        $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(scale float)
  returns string
  language javascript
  as
  $$
  // Purpose: resume all tasks associated with loading historical files into the tpcdi_stg database
  // tpcdi_scale is an input variable that represents the TPC-DI data size; 5,10,100,1000 are possible values
  var tpcdi_scale = SCALE
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_DATE_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_TIME_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_HR_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_FINWIRE_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  //var stmt = snowflake.createStatement({sqlText:"call system$wait(10, 'SECONDS')"});
  //stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_" + tpcdi_scale + "_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  return "All historical load tasks started.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(scale float)
  returns string
  language javascript
  as
  $$
  // Purpose:  all tasks associated with loading historical files into the tpcdi_stg database
  // tpcdi_scale is an input variable that represents the TPC-DI data size; 5,10,100,1000 are possible values
  var tpcdi_scale = SCALE
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_" + tpcdi_scale + "_TSK "});
  stmt.execute();
  return "All incremental load tasks started.";
  $$
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_ACCOUNT_SP(1000,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_ACCOUNT_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_ACCOUNT_SP(10,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_ACCOUNT_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_ACCOUNT_SP(5,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_H_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_SP(1000,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_SP(10,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CASHTRANSACTION_I_SP(5,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_SP(1000,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_SP(10,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_SP(5,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_SP(100)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_CUSTOMER_MGMT_SP(5)
;


CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_SP(10)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_H_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_SP(1000,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_SP(10,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DAILYMARKET_I_SP(5,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DATE_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DATE_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DATE_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DATE_SP(100)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DATE_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DATE_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_DATE_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_DATE_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_FINWIRE_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_FINWIRE_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_FINWIRE_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_FINWIRE_SP(100)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_FINWIRE_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_FINWIRE_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_FINWIRE_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_FINWIRE_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_H_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_SP(1000,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_SP(10,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HOLDING_HISTORY_I_SP(5,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HR_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HR_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HR_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HR_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HR_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HR_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_HR_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_HR_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_INDUSTRY_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_INDUSTRY_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_H_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_PROSPECT_I_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_STATUSTYPE_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TAXRATE_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TAXRATE_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TIME_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TIME_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TIME_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TIME_SP(100)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TIME_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TIME_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TIME_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TIME_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADETYPE_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADETYPE_SP(5)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_H_SP(1000)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_H_SP(100)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_H_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_H_SP(5)
;


CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_I_SP(1000,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_I_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_I_SP(10,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_TRADE_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_TRADE_I_SP(5,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_SP(1000)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_SP(100)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_SP(10)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_H_SP(5)
;
  CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_1000_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_SP(1000,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_100_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_SP(100,3,60)
;
CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_10_TSK
  WAREHOUSE = TPCDI_GENERAL
  
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_SP(10,3,60)
;

CREATE OR REPLACE TASK TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_5_TSK
  WAREHOUSE = TPCDI_GENERAL
  
AS
CALL TPCDI_STG.PUBLIC.LOAD_WATCH_HISTORY_I_SP(5,3,60)
;
-- Create database/schema
CREATE OR REPLACE DATABASE TPCDI_ODS;

CREATE OR REPLACE SCHEMA TPCDI_ODS.PUBLIC;

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS ( CA_ID INT NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER', CA_B_ID INT COMMENT 'IDENTIFIER OF THE MANAGING BROKER', CA_C_ID INT NOT NULL COMMENT 'OWNING CUSTOMER IDENTIFIER', CA_NAME CHAR(50) COMMENT 'NAME OF CUSTOMER ACCOUNT', CA_TAX_ST INT COMMENT '0, 1 OR 2 TAX STATUS OF THIS ACCOUNT', CA_ST_ID CHAR(4) COMMENT 'ACTV OR INAC CUSTOMER STATUS TYPE IDENTIFIER', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.ACCOUNT_ODS_STM
ON TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS ( C_ID INT NOT NULL COMMENT 'CUSTOMER IDENTIFIER', C_TAX_ID CHAR(20) NOT NULL COMMENT 'CUSTOMER’S TAX IDENTIFIER', C_ST_ID CHAR(4) COMMENT 'ACTV OR INAC CUSTOMER STATUS TYPE IDENTIFIER', C_L_NAME CHAR(25) NOT NULL COMMENT 'PRIMARY CUSTOMER''S LAST NAME.', C_F_NAME CHAR(20) NOT NULL COMMENT 'PRIMARY CUSTOMER''S FIRST NAME.', C_M_NAME CHAR(1) COMMENT 'PRIMARY CUSTOMER''S MIDDLE INITIAL', C_GNDR CHAR(1) COMMENT 'GENDER OF THE PRIMARY CUSTOMER', C_TIER NUMBER(1) COMMENT 'CUSTOMER TIER', C_DOB DATE NOT NULL COMMENT 'CUSTOMER’S DATE OF BIRTH, AS YYYY-MM-DD.', C_ADLINE1 CHAR(80) NOT NULL COMMENT 'ADDRESS LINE 1', C_ADLINE2 CHAR(80) COMMENT 'ADDRESS LINE 2', C_ZIPCODE CHAR(12) NOT NULL COMMENT 'ZIP OR POSTAL CODE', C_CITY CHAR(25) NOT NULL COMMENT 'CITY', C_STATE_PROV CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE', C_CTRY CHAR(24) COMMENT 'COUNTRY', C_CTRY_1 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 1.', C_AREA_1 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 1.', C_LOCAL_1 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 1.', C_EXT_1 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 1.', C_CTRY_2 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 2.', C_AREA_2 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 2.', C_LOCAL_2 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 2.', C_EXT_2 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 2.', C_CTRY_3 CHAR(3) COMMENT 'COUNTRY CODE FOR CUSTOMER''S PHONE 3.', C_AREA_3 CHAR(3) COMMENT 'AREA CODE FOR CUSTOMER''S PHONE 3.', C_LOCAL_3 CHAR(10) COMMENT 'LOCAL NUMBER FOR CUSTOMER''S PHONE 3.', C_EXT_3 CHAR(5) COMMENT 'EXTENSION NUMBER FOR CUSTOMER''S PHONE 3.', C_EMAIL_1 CHAR(100) COMMENT 'CUSTOMER''S E-MAIL ADDRESS 1.', C_EMAIL_2 CHAR(100) COMMENT 'CUSTOMER''S E-MAIL ADDRESS 2.', C_LCL_TX_ID CHAR(4) NOT NULL COMMENT 'CUSTOMER''S LOCAL TAX RATE', C_NAT_TX_ID CHAR(4) NOT NULL COMMENT 'CUSTOMER''S NATIONAL TAX RATE', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.CUSTOMER_ODS_STM
ON TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS ( PTS TIMESTAMP_NTZ NOT NULL COMMENT 'POSTING DATE & TIME AS YYYYMMDD-HHMMSS', REC_TYPE VARCHAR(3) NOT NULL COMMENT 'CMP', COMPANY_NAME VARCHAR(60) NOT NULL COMMENT 'NAME OF THE COMPANY', CIK VARCHAR(10) NOT NULL COMMENT 'COMPANY IDENTIFICATION CODE FROM SEC', STATUS VARCHAR(4) NOT NULL COMMENT 'ACTV FOR ACTIVE COMPANY, INAC FOR INACTIVE', INDUSTRY_ID VARCHAR(2) NOT NULL COMMENT 'CODE FOR INDUSTRY SEGMENT', SP_RATING VARCHAR(4) NOT NULL COMMENT 'S&P RATING', FOUNDING_DATE DATE COMMENT 'A DATE AS YYYYMMDD', ADDR_LINE1 VARCHAR(80) NOT NULL COMMENT 'MAILING ADDRESS', ADDR_LINE2 VARCHAR(80) COMMENT 'MAILING ADDRESS', POSTAL_CODE VARCHAR(12) NOT NULL COMMENT 'MAILING ADDRESS', CITY VARCHAR(25) NOT NULL COMMENT 'MAILING ADDRESS', STATE_PROVINCE VARCHAR(20) NOT NULL COMMENT 'MAILING ADDRESS', COUNTRY VARCHAR(24) COMMENT 'MAILING ADDRESS', CEO_NAME VARCHAR(46) NOT NULL COMMENT 'NAME OF COMPANY CEO', DESCRIPTION VARCHAR(150) NOT NULL COMMENT 'DESCRIPTION OF THE COMPANY', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

-- CREATE STREAM STATEMENT

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS
;
-- CREATE TABLE STATEMENT
-- MOVED TO BEING A VIEW INSTEAD OF A TABLE

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS ( PTS TIMESTAMP_NTZ NOT NULL COMMENT 'POSTING DATE & TIME AS YYYYMMDD-HHMMSS', REC_TYPE VARCHAR(3) NOT NULL COMMENT 'FIN', YEAR NUMBER(4,0) NOT NULL COMMENT 'YEAR OF THE QUARTER END', QUARTER NUMBER(1,0) NOT NULL COMMENT 'QUARTER NUMBER: VALID VALUES ARE 1, 2, 3, 4', QTR_START_DATE DATE NOT NULL COMMENT 'START DATE OF QUARTER, AS YYYYMMDD', POSTING_DATE DATE NOT NULL COMMENT 'POSTING DATE OF QUARTERLY REPORT AS YYYYMMDD', REVENUE NUMBER(15,2) NOT NULL COMMENT 'REPORTED REVENUE FOR THE QUARTER', EARNINGS NUMBER(15,2) NOT NULL COMMENT 'NET EARNINGS REPORTED FOR THE QUARTER', EPS NUMBER(10,2) NOT NULL COMMENT 'BASIC EARNINGS PER SHARE FOR THE QUARTER', DILUTED_EPS NUMBER(10,2) NOT NULL COMMENT 'DILUTED EARNINGS PER SHARE FOR THE QUARTER', MARGIN NUMBER(10,2) NOT NULL COMMENT 'PROFIT DIVIDED BY REVENUES FOR THE QUARTER', INVENTORY NUMBER(15,2) NOT NULL COMMENT 'VALUE OF INVENTORY ON HAND AT END OF QUARTER', ASSETS NUMBER(15,2) NOT NULL COMMENT 'VALUE OF TOTAL ASSETS AT THE END OF QUARTER', LIABILITIES NUMBER(15,2) NOT NULL COMMENT 'VALUE OF TOTAL LIABILITIES AT THE END OF QUARTER', SH_OUT NUMBER(13,0) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING', DILUTED_SH_OUT NUMBER(13,0) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING (DILUTED)', CO_NAME_OR_CIK VARCHAR(60) NOT NULL COMMENT 'COMPANY CIK NUMBER (IF ONLY DIGITS, 10 VARCHARS) OR NAME (IF NOT ONLY DIGITS, 60 VARCHARS)', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

-- CREATE STREAM STATEMENT

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS
;
-- CREATE TABLE STATEMENT
-- MOVED TO BEING A VIEW INSTEAD OF A TABLE

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS ( PTS TIMESTAMP_NTZ NOT NULL COMMENT 'POSTING DATE & TIME AS YYYYMMDD-HHMMSS', REC_TYPE VARCHAR(3) NOT NULL COMMENT '“SEC”', SYMBOL VARCHAR(15) NOT NULL COMMENT 'SECURITY SYMBOL', ISSUE_TYPE VARCHAR(6) NOT NULL COMMENT 'ISSUE TYPE', STATUS VARCHAR(4) NOT NULL COMMENT 'ACTV FOR ACTIVE SECURITY, INAC FOR INACTIVE', NAME VARCHAR(70) NOT NULL COMMENT 'SECURITY NAME', EX_ID VARCHAR(6) NOT NULL COMMENT 'ID OF THE EXCHANGE THE SECURITY IS TRADED ON', SH_OUT NUMBER(13,0) NOT NULL COMMENT 'NUMBER OF SHARES OUTSTANDING', FIRST_TRADE_DATE DATE NOT NULL COMMENT 'DATE OF FIRST TRADE AS YYYYMMDD', FIRST_TRADE_EXCHG DATE NOT NULL COMMENT 'DATE OF FIRST TRADE ON EXCHANGE AS YYYYMMDD', DIVIDEND NUMBER(10,2) NOT NULL COMMENT 'DIVIDEND AS VALUE_T', CO_NAME_OR_CIK VARCHAR(60) NOT NULL COMMENT 'COMPANY CIK NUMBER (IF ONLY DIGITS, 10 CHARS) OR NAME (IF NOT ONLY DIGITS, 60 CHARS)', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

-- CREATE STREAM STATEMENT

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS
;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_ODS.PUBLIC.TRADE_ODS ( T_ID NUMBER(15) NOT NULL COMMENT 'TRADE IDENTIFIER.', T_DTS DATETIME NOT NULL COMMENT 'DATE AND TIME OF TRADE.', T_DT DATE NOT NULL COMMENT 'DATE OF TRADE.', T_ST_ID CHAR(4) NOT NULL COMMENT 'STATUS TYPE IDENTIFIER', T_TT_ID CHAR(3) NOT NULL COMMENT 'TRADE TYPE IDENTIFIER', T_IS_CASH INT COMMENT 'IS THIS TRADE A CASH (1) OR MARGIN (0) TRADE?', T_S_SYMB CHAR(15) NOT NULL COMMENT 'SECURITY SYMBOL OF THE SECURITY', T_QTY NUMBER(6) COMMENT 'QUANTITY OF SECURITIES TRADED.', T_BID_PRICE NUMBER(8,2) COMMENT 'THE REQUESTED UNIT PRICE.', T_CA_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER.', T_EXEC_NAME CHAR(49) NOT NULL COMMENT 'NAME OF THE PERSON EXECUTING THE TRADE.', T_TRADE_PRICE NUMBER(8,2) COMMENT 'UNIT PRICE AT WHICH THE SECURITY WAS TRADED.', T_CHRG NUMBER(10,2) COMMENT 'FEE CHARGED FOR PLACING THIS TRADE REQUEST.', T_COMM NUMBER(10,2) COMMENT 'COMMISSION EARNED ON THIS TRADE', T_TAX NUMBER(10,2) COMMENT 'AMOUNT OF TAX DUE ON THIS TRADE', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'LAST TIME THIS RECORD WAS INSERTED OR UPDATED' ) ;

CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.TRADE_ODS_STM
ON TABLE TPCDI_ODS.PUBLIC.TRADE_ODS
;
-- no views-- no procedures-- no tasks-- CREATE Database/schema

CREATE OR REPLACE DATABASE TPCDI_WH;

CREATE OR REPLACE SCHEMA TPCDI_WH.PUBLIC;

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.AUDIT ( PROC_NAME VARCHAR COMMENT 'STORED PROCEDURE NAME' , LOG_TIME TIMESTAMP_LTZ NULL COMMENT 'A TIMESTAMP SHORTLY AFTER THE PROC FINISHED', BATCH_ID NUMBER NULL COMMENT 'THE BATCH WHEN THE PROC WAS RUN', INSERTED_ROWS NUMBER COMMENT 'THE NUMBER OF ROWS INSERTED BY A PROC RUN', UPDATED_ROWS NUMBER COMMENT 'THE NUMBER OF ROWS UPDATED BY A PROC RUN' ) ;
-- CREATE SEQUENCE STATEMENT

CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE BATCH_ID FOR THE BATCH CONTROL TABLE.' ; 

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.CTRL_BATCH ( BATCH_ID NUMBER(11) COMMENT 'BATCH NUMBER', BATCH_TS TIMESTAMP_LTZ NOT NULL COMMENT 'THE TIMESTAMP THE BATCH STARTED' ) ;

-- CREATE SEQUENCE STATEMENT

CREATE SEQUENCE IF NOT EXISTS TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR ACCOUNT.' ; 

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_ACCOUNT ( SK_ACCOUNT_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR ACCOUNTID', ACCOUNT_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER ACCOUNT IDENTIFIER', SK_BROKER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY OF MANAGING BROKER', SK_CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY OF CUSTOMER', STATUS CHAR(10) NOT NULL COMMENT 'ACCOUNT STATUS, ACTIVE OR CLOSED', ACCOUNT_DESC CHAR(50) COMMENT 'NAME OF CUSTOMER ACCOUNT', TAX_STATUS NUMBER(1) COMMENT '0, 1 OR 2 TAX STATUS OF THIS ACCOUNT', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED', INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE SEQUENCE STATEMENT

CREATE SEQUENCE IF NOT EXISTS TPCDI_WH.PUBLIC.DIM_BROKER_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR BROKER.' ; 

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_BROKER ( SK_BROKER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR BROKER', BROKER_ID NUMBER(11) NOT NULL COMMENT 'NATURAL KEY FOR BROKER', MANAGER_ID NUMBER(11) COMMENT 'NATURAL KEY FOR MANAGER’S HR RECORD', FIRST_NAME CHAR(50) NOT NULL COMMENT 'FIRST NAME', LAST_NAME CHAR(50) NOT NULL COMMENT 'LAST NAME', MIDDLE_INITIAL CHAR(1) COMMENT 'MIDDLE INITIAL', BRANCH CHAR(50) COMMENT 'FACILITY IN WHICH EMPLOYEE HAS OFFICE', OFFICE CHAR(50) COMMENT 'OFFICE NUMBER OR DESCRIPTION', PHONE CHAR(14) COMMENT 'EMPLOYEE PHONE NUMBER', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED', INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE SEQUENCE STATEMENT

CREATE SEQUENCE IF NOT EXISTS TPCDI_WH.PUBLIC.DIM_COMPANY_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR COMPANY.' ; 

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_COMPANY (   SK_COMPANY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR COMPANYID' , COMPANY_ID NUMBER(11) NOT NULL COMMENT 'COMPANY IDENTIFIER (CIK NUMBER)' , STATUS CHAR(10) NOT NULL COMMENT 'COMPANY STATUS' , NAME CHAR(60) NOT NULL COMMENT 'COMPANY NAME' , INDUSTRY CHAR(50) NOT NULL COMMENT 'COMPANY''S INDUSTRY' , SP_RATING CHAR(4) COMMENT 'STANDARD & POOR COMPANY''S RATING' , IS_LOW_GRADE INT COMMENT 'TRUE IF THIS COMPANY IS LOW GRADE' , CEO CHAR(100) NOT NULL COMMENT 'CEO NAME' , ADDRESS_LINE1 CHAR(80) COMMENT 'ADDRESS LINE 1' , ADDRESS_LINE2 CHAR(80) COMMENT 'ADDRESS LINE 2' , POSTAL_CODE CHAR(12) NOT NULL COMMENT 'ZIP OR POSTAL CODE' , CITY CHAR(25) NOT NULL COMMENT 'CITY' , STATE_PROV CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE' , COUNTRY CHAR(24) COMMENT 'COUNTRY' , DESCRIPTION CHAR(150) NOT NULL COMMENT 'COMPANY DESCRIPTION' , FOUNDING_DATE DATE COMMENT 'DATE THE COMPANY WAS FOUNDED'  , BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED'  , INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE SEQUENCE STATEMENT

CREATE SEQUENCE IF NOT EXISTS TPCDI_WH.PUBLIC.DIM_CUSTOMER_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR CUSTOMER.' ;
 
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_CUSTOMER ( SK_CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR CUSTOMERID', CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER IDENTIFIER', TAX_ID CHAR(20) NOT NULL COMMENT 'CUSTOMER''S TAX IDENTIFIER', STATUS CHAR(10) NOT NULL COMMENT 'CUSTOMER STATUS TYPE', LAST_NAME CHAR(30) NOT NULL COMMENT 'CUSTOMER''S LAST NAME.', FIRST_NAME CHAR(30) NOT NULL COMMENT 'CUSTOMER''S FIRST NAME.', MIDDLE_INITIAL CHAR(1) COMMENT 'CUSTOMER''S MIDDLE NAME INITIAL', GENDER CHAR(1) COMMENT 'GENDER OF THE CUSTOMER', TIER NUMBER(1) COMMENT 'CUSTOMER TIER', DOB DATE NOT NULL COMMENT 'CUSTOMER''S DATE OF BIRTH.', ADDRESS_LINE_1 CHAR(80) NOT NULL COMMENT 'ADDRESS LINE 1', ADDRESS_LINE_2 CHAR(80) COMMENT 'ADDRESS LINE 2', POSTAL_CODE CHAR(12) NOT NULL COMMENT 'ZIP OR POSTAL CODE', CITY CHAR(25) NOT NULL COMMENT 'CITY', STATE_PROV CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE', COUNTRY CHAR(24) COMMENT 'COUNTRY', PHONE1 CHAR(30) COMMENT 'PHONE NUMBER 1', PHONE2 CHAR(30) COMMENT 'PHONE NUMBER 2', PHONE3 CHAR(30) COMMENT 'PHONE NUMBER 3', EMAIL1 CHAR(100) COMMENT 'EMAIL ADDRESS 1', EMAIL2 CHAR(100) COMMENT 'EMAIL ADDRESS 2', NATIONAL_TAX_RATE_DESC CHAR(50) COMMENT 'NATIONAL TAX RATE DESCRIPTION', NATIONAL_TAX_RATE NUMBER(6,5) COMMENT 'NATIONAL TAX RATE', LOCAL_TAX_RATE_DESC CHAR(50) COMMENT 'LOCAL TAX RATE DESCRIPTION', LOCAL_TAX_RATE NUMBER(6,5) COMMENT 'LOCAL TAX RATE', AGENCY_ID CHAR(30) COMMENT 'AGENCY IDENTIFIER', CREDIT_RATING NUMBER(5) COMMENT 'CREDIT RATING', NET_WORTH NUMBER(10) COMMENT 'NET WORTH', MARKETING_NAMEPLATE CHAR(100) COMMENT 'MARKETING NAMEPLATE', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED', INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_DATE ( DATE_ID NUMBER NOT NULL COMMENT 'SURROGATE KEY FOR THE DATE', DATE_VALUE DATE NOT NULL COMMENT 'THE DATE STORED APPROPRIATELY FOR DOING COMPARISONS IN THE DATA WAREHOUSE', DATE_DESC VARCHAR(20) NOT NULL COMMENT 'THE DATE IN FULL WRITTEN FORM, E.G. JULY 7, 2004', CALENDAR_YEAR_ID NUMBER NOT NULL COMMENT 'YEAR NUMBER AS A NUMBER', CALENDAR_YEAR_DESC VARCHAR(20) NOT NULL COMMENT 'YEAR NUMBER AS TEXT', CALENDAR_QTR_ID NUMBER NOT NULL COMMENT 'QUARTER AS A NUMBER, E.G. 20042', CALENDAR_QTR_DESC VARCHAR(20) NOT NULL COMMENT 'QUARTER AS TEXT, E.G. 2004 Q2', CALENDAR_MONTH_ID NUMBER NOT NULL COMMENT 'MONTH AS A NUMBER, E.G. 20047', CALENDAR_MONTH_DESC VARCHAR(20) NOT NULL COMMENT 'MONTH AS TEXT, E.G. 2004 JULY', CALENDAR_WEEK_ID NUMBER NOT NULL COMMENT 'WEEK AS A NUMBER, E.G. 200428', CALENDAR_WEEK_DESC VARCHAR(20) NOT NULL COMMENT 'WEEK AS TEXT, E.G. 2004-W28', DAY_OF_WEEK_NUM NUMBER NOT NULL COMMENT 'DAY OF WEEK AS A NUMBER, E.G. 3', DAY_OF_WEEK_DESC VARCHAR(10) NOT NULL COMMENT 'DAY OF WEEK AS TEXT, E.G. WEDNESDAY', FISCAL_YEAR_ID NUMBER NOT NULL COMMENT 'FISCAL YEAR AS A NUMBER, E.G. 2005', FISCAL_YEAR_DESC VARCHAR(20) NOT NULL COMMENT 'FISCAL YEAR AS TEXT, E.G. 2005', FISCAL_QTR_ID NUMBER NOT NULL COMMENT 'FISCAL QUARTER AS A NUMBER, E.G. 20051', FISCAL_QTR_DESC VARCHAR(20) NOT NULL COMMENT 'FISCAL QUARTER AS TEXT, E.G. 2005 Q1', HOLIDAY_FLAG BOOLEAN COMMENT 'INDICATES HOLIDAYS' ) ;  
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_FINANCIAL ( SK_COMPANYID NUMBER(11) NOT NULL COMMENT 'COMPANY SK.', FI_YEAR NUMBER(4) NOT NULL COMMENT 'YEAR OF THE QUARTER END.', FI_QTR NUMBER(1) NOT NULL COMMENT 'QUARTER NUMBER THAT THE FINANCIAL INFORMATION IS FOR: VALID VALUES 1, 2, 3, 4.', FI_QTR_START_DATE DATE NOT NULL COMMENT 'START DATE OF QUARTER.', FI_REVENUE NUMBER(15,2) NOT NULL COMMENT 'REPORTED REVENUE FOR THE QUARTER.', FI_NET_EARN NUMBER(15,2) NOT NULL COMMENT 'NET EARNINGS REPORTED FOR THE QUARTER.', FI_BASIC_EPS NUMBER(10,2) NOT NULL COMMENT 'BASIC EARNINGS PER SHARE FOR THE QUARTER.', FI_DILUT_EPS NUMBER(10,2) NOT NULL COMMENT 'DILUTED EARNINGS PER SHARE FOR THE QUARTER.', FI_MARGIN NUMBER(10,2) NOT NULL COMMENT 'PROFIT DIVIDED BY REVENUES FOR THE QUARTER.', FI_INVENTORY NUMBER(15,2) NOT NULL COMMENT 'VALUE OF INVENTORY ON HAND AT THE END OF QUARTER.', FI_ASSETS NUMBER(15,2) NOT NULL COMMENT 'VALUE OF TOTAL ASSETS AT THE END OF THE QUARTER.', FI_LIABILITY NUMBER(15,2) NOT NULL COMMENT 'VALUE OF TOTAL LIABILITIES AT THE END OF THE QUARTER.', FI_OUT_BASIC NUMBER(12) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING (BASIC).', FI_OUT_DILUT NUMBER(12) NOT NULL COMMENT 'AVERAGE NUMBER OF SHARES OUTSTANDING (DILUTED).', INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED'  ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_INDUSTRY ( IN_ID CHAR(2) NOT NULL COMMENT 'INDUSTRY CODE', IN_NAME CHAR(50) NOT NULL COMMENT 'INDUSTRY DESCRIPTION' ) ;
-- CREATE SEQUENCE STATEMENT

CREATE SEQUENCE IF NOT EXISTS TPCDI_WH.PUBLIC.DIM_SECURITY_SEQ   START WITH = 1   INCREMENT = 1   COMMENT = 'DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR SECURITY.' ; 

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_SECURITY ( SK_SECURITY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR SYMBOL' , SYMBOL CHAR(15) NOT NULL COMMENT 'IDENTIFIES SECURITY ON TICKER' , ISSUE CHAR(6) NOT NULL COMMENT 'ISSUE TYPE' , STATUS CHAR(10) NOT NULL COMMENT 'STATUS TYPE' , NAME CHAR(70) NOT NULL COMMENT 'SECURITY NAME' , EXCHANGE_ID CHAR(6) NOT NULL COMMENT 'EXCHANGE THE SECURITY IS TRADED ON' , SK_COMPANY_ID NUMBER(11) NOT NULL COMMENT 'COMPANY ISSUING SECURITY' , SHARES_OUTSTANDING NUMBER(12) NOT NULL COMMENT 'SHARES OUTSTANDING' , FIRST_TRADE DATE NOT NULL COMMENT 'DATE OF FIRST TRADE' , FIRST_TRADE_ON_EXCHANGE DATE NOT NULL COMMENT 'DATE OF FIRST TRADE ON THIS EXCHANGE' , DIVIDEND NUMBER(10,2) NOT NULL COMMENT 'ANNUAL DIVIDEND PER SHARE'  , BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED' , INSERTED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ( ST_ID CHAR(4) NOT NULL COMMENT 'STATUS CODE', ST_NAME CHAR(10) NOT NULL COMMENT 'STATUS DESCRIPTION' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_TAX_RATE ( TX_ID CHAR(4) NOT NULL COMMENT 'TAX RATE CODE', TX_NAME CHAR(50) NOT NULL COMMENT 'TAX RATE DESCRIPTION', TX_RATE NUMBER(6,5) NOT NULL COMMENT 'TAX RATE' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_TIME ( TIME_ID NUMBER NOT NULL COMMENT 'SURROGATE KEY FOR THE TIME', TIME_VALUE TIME NOT NULL COMMENT 'THE TIME STORED APPROPRIATELY FOR DOING COMPARISONS IN THE DATA WAREHOUSE', HOUR_ID NUMBER NOT NULL COMMENT 'HOUR NUMBER AS A NUMBER, E.G. 01', HOUR_DESC VARCHAR(20) NOT NULL COMMENT 'HOUR NUMBER AS TEXT, E.G. 01', MINUTE_ID NUMBER NOT NULL COMMENT 'MINUTE AS A NUMBER, E.G. 23', MINUTE_DESC VARCHAR(20) NOT NULL COMMENT 'MINUTE AS TEXT, E.G. 01:23', SECOND_ID NUMBER NOT NULL COMMENT 'SECOND AS A NUMBER, E.G. 45', SECOND_DESC VARCHAR(20) NOT NULL COMMENT 'SECOND AS TEXT, E.G. 01:23:45', MARKET_HOURS_FLAG BOOLEAN COMMENT 'INDICATES A TIME DURING MARKET HOURS', OFFICE_HOURS_FLAG BOOLEAN COMMENT 'INDICATES A TIME DURING OFFICE HOURS' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_TRADE ( TRADE_ID NUMBER(11) COMMENT 'NOT NULL TRADE IDENTIFIER', SK_BROKER_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR BROKERID', SK_CREATE_DATE_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR DATE CREATED', SK_CREATE_TIME_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR TIME CREATED', SK_CLOSE_DATE_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR DATE CLOSED', SK_CLOSE_TIME_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR TIME CLOSED', STATUS CHAR(10) NOT NULL COMMENT 'TRADE STATUS', TYPE CHAR(12) NOT NULL COMMENT 'TRADE TYPE', CASH_FLAG INT NOT NULL COMMENT 'IS THIS TRADE A CASH (1) OR MARGIN (0) TRADE?', SK_SECURITY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR SECURITYID', SK_COMPANY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR COMPANYID', QUANTITY NUMBER(6,0) NOT NULL COMMENT 'QUANTITY OF SECURITIES TRADED.', BID_PRICE NUMBER(8,2) NOT NULL COMMENT 'THE REQUESTED UNIT PRICE.', SK_CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR CUSTOMERID', SK_ACCOUNT_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR ACCOUNTID', EXECUTED_BY CHAR(64) NOT NULL COMMENT 'NAME OF PERSON EXECUTING THE TRADE.', TRADE_PRICE NUMBER(8,2) COMMENT 'UNIT PRICE AT WHICH THE SECURITY WAS TRADED.', FEE NUMBER(10,2) COMMENT 'FEE CHARGED FOR PLACING THIS TRADE REQUEST', COMMISSION NUMBER(10,2) COMMENT 'COMMISSION EARNED ON THIS TRADE', TAX NUMBER(10,2) COMMENT 'AMOUNT OF TAX DUE ON THIS TRADE', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED', LAST_UPDATED_TS TIMESTAMP_LTZ NOT NULL COMMENT 'TIMESTAMP WHEN THIS RECORD WAS LAST UPDATED' ) ;
-- CREATE TABLE STATEMENT COMMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.DIM_TRADE_TYPE  ( TT_ID CHAR(3) NOT NULL COMMENT 'TRADE TYPE CODE', TT_NAME CHAR(12) NOT NULL COMMENT 'TRADE TYPE DESCRIPTION', TT_IS_SELL INT NOT NULL COMMENT 'FLAG INDICATING A SALE', TT_IS_MRKT INT NOT NULL COMMENT 'FLAG INDICATING A MARKET ORDER' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.FACT_CASH_BALANCES ( SK_CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR CUSTOMERID', SK_ACCOUNT_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR ACCOUNTID', SK_DATE_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR THE DATE', CASH NUMBER(15,2) NOT NULL COMMENT 'CASH BALANCE FOR THE ACCOUNT AFTER APPLYING CHANGES FOR THIS DAY', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.FACT_HOLDINGS ( TRADE_ID NUMBER(11) COMMENT 'KEY FOR ORIGNIAL TRADE INDENTIFIER', CURRENT_TRADE_ID NUMBER(11) COMMENT 'KEY FOR THE CURRENT TRADE', SK_CUSTOMER_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR CUSTOMER IDENTIFIER', SK_ACCOUNT_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR ACCOUNT IDENTIFIER', SK_SECURITY_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR SECURITY IDENTIFIER', SK_COMPANY_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR COMPANY IDENTIFIER', SK_DATE_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR THE DATE ASSOCIATED WITH THE CURRENT TRADE', SK_TIME_ID NUMBER(11) COMMENT 'SURROGATE KEY FOR THE TIME ASSOCIATED WITH THE CURRENT TRADE', CURRENT_PRICE NUMBER(8,2) COMMENT 'UNIT PRICE OF THIS SECURITY FOR THE CURRENT TRADE', CURRENT_HOLDING NUMBER(6) COMMENT 'QUANTITY OF A SECURITY HELD AFTER THE CURRENT TRADE. THE VALUE CAN BE A POSITIVE OR NEGATIVE INTEGER', BATCH_ID NUMBER(5) COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY ( SK_SECURITY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR SECURITYID', SK_COMPANY_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR COMPANYID', SK_DATE_ID NUMBER(11) NOT NULL COMMENT 'SURROGATE KEY FOR THE DATE', PE_RATIO NUMBER(10,2) COMMENT 'PRICE TO EARNINGS PER SHARE RATIO', YIELD NUMBER(5,2) NOT NULL COMMENT 'DIVIDEND TO PRICE RATIO, AS A PERCENTAGE', FIFTY_TWO_WEEK_HIGH NUMBER(8,2) NOT NULL COMMENT 'SECURITY HIGHEST PRICE IN LAST 52 WEEKS FROM THIS DAY', SK_FIFTY_TWO_WEEK_HIGH_DATE NUMBER(11) NOT NULL COMMENT 'EARLIEST DATE ON WHICH THE 52 WEEK HIGH PRICE WAS SET', FIFTY_TWO_WEEK_LOW NUMBER(8,2) NOT NULL COMMENT 'SECURITY LOWEST PRICE IN LAST 52 WEEKS FROM THIS DAY', SK_FIFTY_TWO_WEEK_LOW_DATE NUMBER(11) NOT NULL COMMENT 'EARLIEST DATE ON WHICH THE 52 WEEK LOW PRICE WAS SET', CLOSE_PRICE NUMBER(8,2) NOT NULL COMMENT 'SECURITY CLOSING PRICE ON THIS DAY', DAY_HIGH NUMBER(8,2) NOT NULL COMMENT 'HIGHEST PRICE FOR THE SECURITY ON THIS DAY', DAY_LOW NUMBER(8,2) NOT NULL COMMENT 'LOWEST PRICE FOR THE SECURITY ON THIS DAY', VOLUME NUMBER(12) NOT NULL COMMENT 'TRADING VOLUME OF THE SECURITY ON THIS DAY', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED' ) ;
-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.FACT_PROSPECT ( AGENCY_ID CHAR(30) NOT NULL COMMENT 'UNIQUE IDENTIFIER FROM AGENCY', SK_RECORD_DATE_ID NUMBER NOT NULL COMMENT 'LAST DATE THIS PROSPECT APPEARED IN INPUT', SK_UPDATE_DATE_ID NUMBER NOT NULL COMMENT 'LATEST CHANGE DATE FOR THIS PROSPECT', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS LAST MODIFIED', IS_CUSTOMER BOOLEAN NOT NULL COMMENT 'TRUE IF THIS PERSON IS ALSO IN DIMCUSTOMER, ELSE FALSE', LAST_NAME CHAR(30) NOT NULL COMMENT 'LAST NAME', FIRST_NAME CHAR(30) NOT NULL COMMENT 'FIRST NAME', MIDDLE_INITIAL CHAR(1)  COMMENT 'MIDDLE INITIAL', GENDER CHAR(1)  COMMENT 'M/F/U', ADDRESS_LINE1 CHAR(80) COMMENT 'POSTAL ADDRESS', ADDRESS_LINE2 CHAR(80) COMMENT 'POSTAL ADDRESS', POSTAL_CODE CHAR(12) COMMENT 'POSTAL CODE', CITY CHAR(25) NOT NULL COMMENT 'CITY', STATE CHAR(20) NOT NULL COMMENT 'STATE OR PROVINCE', COUNTRY CHAR(24) COMMENT 'POSTAL COUNTRY', PHONE CHAR(30) COMMENT 'TELEPHONE NUMBER', INCOME NUMBER(9) COMMENT 'ANNUAL INCOME', NUMBER_CARS NUMBER(2) COMMENT 'CARS OWNED', NUMBER_CHILDREN NUMBER(2) COMMENT 'DEPENDENT CHILDREN', MARITAL_STATUS CHAR(1) COMMENT 'S/M/D/W/U', AGE NUMBER(3) COMMENT 'CURRENT AGE', CREDIT_RATING NUMBER(4) COMMENT 'NUMERIC RATING', OWN_OR_RENT_FLAG CHAR(1) COMMENT 'O/R/U', EMPLOYER CHAR(30) COMMENT 'NAME OF EMPLOYER', NUMBER_CREDIT_CARDS NUMBER(2) COMMENT 'CREDIT CARDS', NET_WORTH NUMBER(12) COMMENT 'ESTIMATED TOTAL NET WORTH', MARKETING_NAMEPLATE CHAR(100) COMMENT 'FOR MARKETING PURPOSES' ) ;

-- CREATE TABLE STATEMENT

CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.FACT_WATCHES ( SK_CUSTOMER_ID NUMBER(11) NOT NULL COMMENT 'CUSTOMER ASSOCIATED WITH WATCH LIST', SK_SECURITY_ID NUMBER(11) NOT NULL COMMENT 'SECURITY LISTED ON WATCH LIST', SK_DATE_ID_DATE_PLACED NUMBER(11) NOT NULL COMMENT 'DATE THE WATCH LIST ITEM WAS ADDED', SK_DATE_ID_DATE_REMOVED NUMBER(11) COMMENT 'DATE THE WATCH LIST ITEM WAS REMOVED', BATCH_ID NUMBER(5) NOT NULL COMMENT 'BATCH ID WHEN THIS RECORD WAS INSERTED' ) ;
CREATE OR REPLACE TABLE TPCDI_WH.PUBLIC.LOAD_SNAPSHOT ( DATABASE VARCHAR NOT NULL COMMENT 'DATABASE NAME', SNAPSHOT_TIME TIMESTAMP_LTZ NOT NULL COMMENT 'THE TIMESTAMP THE SNAPSHOT WAS TAKEN', ROW_COUNT NUMBER NOT NULL COMMENT 'THE SUM OF ROWS IN ALL TABLES IN THE CORRESPONDING DATABASE' ) ;
CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.DIM_FINANCIAL_ROLL_YEAR_EPS AS
  SELECT
  DIM_COMPANY.SK_COMPANY_ID,
  DIM_COMPANY.COMPANY_ID,
  DIM_FINANCIAL.FI_QTR_START_DATE,
  YEAR(DIM_FINANCIAL.FI_QTR_START_DATE)::STRING || QUARTER(DIM_FINANCIAL.FI_QTR_START_DATE)::STRING AS YEAR_QTR,
  DIM_FINANCIAL.FI_BASIC_EPS,
  SUM(DIM_FINANCIAL.FI_BASIC_EPS) OVER (PARTITION BY DIM_FINANCIAL.SK_COMPANYID ORDER BY DIM_FINANCIAL.FI_QTR_START_DATE ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS ROLL_YEAR_EPS
  FROM TPCDI_WH.PUBLIC.DIM_FINANCIAL
  INNER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY ON
    DIM_FINANCIAL.SK_COMPANYID = DIM_COMPANY.SK_COMPANY_ID;

CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW AS
  WITH CURRENT_SK_IDS AS
  (SELECT DISTINCT LAST_VALUE(SK_ACCOUNT_ID) OVER (PARTITION BY ACCOUNT_ID ORDER BY SK_ACCOUNT_ID) AS SK_ACCOUNT_ID_LAST
  FROM TPCDI_WH.PUBLIC.DIM_ACCOUNT)
  SELECT * FROM TPCDI_WH.PUBLIC.DIM_ACCOUNT
  JOIN CURRENT_SK_IDS ON CURRENT_SK_IDS.SK_ACCOUNT_ID_LAST = DIM_ACCOUNT.SK_ACCOUNT_ID;

CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.DIM_COMPANY_NOW AS
  WITH CURRENT_SK_IDS AS
  (SELECT DISTINCT LAST_VALUE(SK_COMPANY_ID) OVER (PARTITION BY COMPANY_ID ORDER BY SK_COMPANY_ID) AS SK_COMPANY_ID_LAST
  FROM TPCDI_WH.PUBLIC.DIM_COMPANY)
  SELECT * FROM TPCDI_WH.PUBLIC.DIM_COMPANY
  JOIN CURRENT_SK_IDS ON CURRENT_SK_IDS.SK_COMPANY_ID_LAST = DIM_COMPANY.SK_COMPANY_ID;

CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW AS
  WITH CURRENT_SK_IDS AS
  (SELECT DISTINCT LAST_VALUE(SK_CUSTOMER_ID) OVER (PARTITION BY CUSTOMER_ID ORDER BY SK_CUSTOMER_ID) AS SK_CUSTOMER_ID_LAST
  FROM TPCDI_WH.PUBLIC.DIM_CUSTOMER)
  SELECT * FROM TPCDI_WH.PUBLIC.DIM_CUSTOMER
  JOIN CURRENT_SK_IDS ON CURRENT_SK_IDS.SK_CUSTOMER_ID_LAST = DIM_CUSTOMER.SK_CUSTOMER_ID;

CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.DIM_SECURITY_NOW AS
  WITH CURRENT_SK_IDS AS
  (SELECT DISTINCT LAST_VALUE(SK_SECURITY_ID) OVER (PARTITION BY SYMBOL ORDER BY SK_SECURITY_ID) AS SK_SECURITY_ID_LAST
  FROM TPCDI_WH.PUBLIC.DIM_SECURITY)
  SELECT * FROM TPCDI_WH.PUBLIC.DIM_SECURITY
  JOIN CURRENT_SK_IDS ON CURRENT_SK_IDS.SK_SECURITY_ID_LAST = DIM_SECURITY.SK_SECURITY_ID;
  
CREATE OR REPLACE VIEW TPCDI_WH.PUBLIC.TABLE_ROW_COUNTS AS
  SELECT 
  TABLE_CATALOG AS DATABASE,
  TABLE_NAME, 
  ROW_COUNT
  FROM TPCDI_WH.INFORMATION_SCHEMA.TABLES
  WHERE TABLE_SCHEMA = 'PUBLIC'
  UNION
  SELECT 
  TABLE_CATALOG AS DATABASE,
  TABLE_NAME, 
  ROW_COUNT
  FROM TPCDI_ODS.INFORMATION_SCHEMA.TABLES
  WHERE TABLE_SCHEMA = 'PUBLIC'
  UNION
  SELECT 
  TABLE_CATALOG AS DATABASE,
  TABLE_NAME, 
  ROW_COUNT
  FROM TPCDI_STG.INFORMATION_SCHEMA.TABLES
  WHERE TABLE_SCHEMA = 'PUBLIC';

CREATE OR REPLACE VIEW TPCDI_STG.PUBLIC.DAILY_MARKET_HIGH_LOW_STG AS
  WITH GET_HIGHS_LOWS AS (
  SELECT
  DM_S_SYMB SYMBOL,
  DIM_DATE.DATE_ID DATE,
  DM_HIGH DAY_HIGH,
  DM_LOW DAY_LOW,
  MAX(DM_HIGH) OVER (PARTITION BY DM_S_SYMB ORDER BY DM_DATE ROWS BETWEEN 364 PRECEDING AND CURRENT ROW) AS YEAR_HIGH,
  MIN(DM_LOW) OVER (PARTITION BY DM_S_SYMB ORDER BY DM_DATE ROWS BETWEEN 364 PRECEDING AND CURRENT ROW) AS YEAR_LOW
  FROM TPCDI_STG.PUBLIC.DAILYMARKET_STG
  INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON
    DAILYMARKET_STG.DM_DATE = DIM_DATE.DATE_VALUE
  ORDER BY 1,2
  )
  SELECT
  GET_HIGHS_LOWS.SYMBOL,
  GET_HIGHS_LOWS.DATE,
  GET_HIGHS_LOWS.DAY_HIGH,
  GET_HIGHS_LOWS.YEAR_HIGH,
  REPLACE(MIN(HIGH.DM_DATE)::STRING,'-')::NUMBER AS EARLIEST_HIGH_DATE,
  GET_HIGHS_LOWS.DAY_LOW,
  GET_HIGHS_LOWS.YEAR_LOW,
  REPLACE(MIN(LOW.DM_DATE)::STRING,'-')::NUMBER AS EARLIEST_LOW_DATE
  FROM GET_HIGHS_LOWS
  INNER JOIN TPCDI_STG.PUBLIC.DAILYMARKET_STG HIGH
      ON HIGH.DM_S_SYMB = GET_HIGHS_LOWS.SYMBOL AND HIGH.DM_HIGH = GET_HIGHS_LOWS.YEAR_HIGH
  INNER JOIN TPCDI_STG.PUBLIC.DAILYMARKET_STG LOW
      ON LOW.DM_S_SYMB = GET_HIGHS_LOWS.SYMBOL AND LOW.DM_LOW = GET_HIGHS_LOWS.YEAR_LOW
  GROUP BY 1,2,3,4,6,7
  ORDER BY 1,2;CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_BROKER SELECT TPCDI_WH.PUBLIC.DIM_BROKER_SEQ.NEXTVAL, EMPLOYEEID, MANAGERID, EMPLOYEEFIRSTNAME, EMPLOYEELASTNAME, EMPLOYEEMI, EMPLOYEEBRANCH, EMPLOYEEOFFICE, EMPLOYEEPHONE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP() FROM TPCDI_STG.PUBLIC.HR_STG_STM WHERE EMPLOYEEJOBCODE = 314 AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'FALSE'"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_BROKER_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  var tsk_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK SUSPEND"}
    );
  tsk_stmt.execute();
  return "Broker records processed.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_DATE USING ( SELECT SK_DATEID ,DATEVALUE ,DATEDESC ,CALENDARYEARID ,CALENDARYEARDESC ,CALENDARQTRID ,CALENDARQTRDESC ,CALENDARMONTHID ,CALENDARMONTHDESC ,CALENDARWEEKID ,CALENDARWEEKDESC ,DAYOFWEEKNUM ,DAYOFWEEKDESC ,FISCALYEARID ,FISCALYEARDESC ,FISCALQTRID ,FISCALQTRDESC ,HOLIDAYFLAG ,METADATA$ACTION ,METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.DATE_STG_STM ) DATE_STG ON TPCDI_WH.PUBLIC.DIM_DATE.DATE_ID = DATE_STG.SK_DATEID WHEN MATCHED AND DATE_STG.METADATA$ACTION = 'INSERT' AND DATE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_DATE.DATE_VALUE = DATE_STG.DATEVALUE ,DIM_DATE.DATE_DESC = DATE_STG.DATEDESC ,DIM_DATE.CALENDAR_YEAR_ID = DATE_STG.CALENDARYEARID ,DIM_DATE.CALENDAR_YEAR_DESC = DATE_STG.CALENDARYEARDESC ,DIM_DATE.CALENDAR_QTR_ID = DATE_STG.CALENDARQTRID ,DIM_DATE.CALENDAR_QTR_DESC = DATE_STG.CALENDARQTRDESC ,DIM_DATE.CALENDAR_MONTH_ID = DATE_STG.CALENDARMONTHID ,DIM_DATE.CALENDAR_MONTH_DESC = DATE_STG.CALENDARMONTHDESC ,DIM_DATE.CALENDAR_WEEK_ID = DATE_STG.CALENDARWEEKID ,DIM_DATE.CALENDAR_WEEK_DESC = DATE_STG.CALENDARWEEKDESC ,DIM_DATE.DAY_OF_WEEK_NUM = DATE_STG.DAYOFWEEKNUM ,DIM_DATE.DAY_OF_WEEK_DESC = DATE_STG.DAYOFWEEKDESC ,DIM_DATE.FISCAL_YEAR_ID = DATE_STG.FISCALYEARID ,DIM_DATE.FISCAL_YEAR_DESC = DATE_STG.FISCALYEARDESC ,DIM_DATE.FISCAL_QTR_ID = DATE_STG.FISCALQTRID ,DIM_DATE.FISCAL_QTR_DESC = DATE_STG.FISCALQTRDESC ,DIM_DATE.HOLIDAY_FLAG = DATE_STG.HOLIDAYFLAG WHEN NOT MATCHED AND DATE_STG.METADATA$ACTION = 'INSERT' AND DATE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (   DATE_ID   ,DATE_VALUE   ,DATE_DESC   ,CALENDAR_YEAR_ID   ,CALENDAR_YEAR_DESC   ,CALENDAR_QTR_ID   ,CALENDAR_QTR_DESC   ,CALENDAR_MONTH_ID   ,CALENDAR_MONTH_DESC   ,CALENDAR_WEEK_ID   ,CALENDAR_WEEK_DESC   ,DAY_OF_WEEK_NUM   ,DAY_OF_WEEK_DESC   ,FISCAL_YEAR_ID   ,FISCAL_YEAR_DESC   ,FISCAL_QTR_ID   ,FISCAL_QTR_DESC   ,HOLIDAY_FLAG ) VALUES (   DATE_STG.SK_DATEID   ,DATE_STG.DATEVALUE   ,DATE_STG.DATEDESC   ,DATE_STG.CALENDARYEARID   ,DATE_STG.CALENDARYEARDESC   ,DATE_STG.CALENDARQTRID   ,DATE_STG.CALENDARQTRDESC   ,DATE_STG.CALENDARMONTHID   ,DATE_STG.CALENDARMONTHDESC   ,DATE_STG.CALENDARWEEKID   ,DATE_STG.CALENDARWEEKDESC   ,DATE_STG.DAYOFWEEKNUM   ,DATE_STG.DAYOFWEEKDESC   ,DATE_STG.FISCALYEARID   ,DATE_STG.FISCALYEARDESC   ,DATE_STG.FISCALQTRID   ,DATE_STG.FISCALQTRDESC   ,DATE_STG.HOLIDAYFLAG )"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_DATE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dimension loaded.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_INDUSTRY USING (SELECT IN_ID, IN_NAME, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.INDUSTRY_STG_STM) INDUSTRY_STG ON TPCDI_WH.PUBLIC.DIM_INDUSTRY.IN_ID = INDUSTRY_STG.IN_ID WHEN MATCHED AND INDUSTRY_STG.METADATA$ACTION = 'INSERT' AND INDUSTRY_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_INDUSTRY.IN_NAME = INDUSTRY_STG.IN_NAME WHEN NOT MATCHED AND INDUSTRY_STG.METADATA$ACTION = 'INSERT' AND INDUSTRY_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (IN_ID, IN_NAME) VALUES (INDUSTRY_STG.IN_ID, INDUSTRY_STG.IN_NAME)"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_INDUSTRY_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dim Industry records processed.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_STATUS_TYPE USING (SELECT ST_ID, ST_NAME, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM) STATUS_TYPE_STG ON TPCDI_WH.PUBLIC.DIM_STATUS_TYPE.ST_ID = STATUS_TYPE_STG.ST_ID WHEN MATCHED AND STATUS_TYPE_STG.METADATA$ACTION = 'INSERT' AND STATUS_TYPE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_STATUS_TYPE.ST_NAME = STATUS_TYPE_STG.ST_NAME WHEN NOT MATCHED AND STATUS_TYPE_STG.METADATA$ACTION = 'INSERT' AND STATUS_TYPE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (ST_ID, ST_NAME) VALUES (STATUS_TYPE_STG.ST_ID, STATUS_TYPE_STG.ST_NAME)"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_STATUS_TYPE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dim Status Type records processed.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_TAX_RATE USING (SELECT TX_ID, TX_NAME, TX_RATE, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TAXRATE_STG_STM) TAX_RATE_STG ON TPCDI_WH.PUBLIC.DIM_TAX_RATE.TX_ID = TAX_RATE_STG.TX_ID WHEN MATCHED AND TAX_RATE_STG.METADATA$ACTION = 'INSERT' AND TAX_RATE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TAX_RATE.TX_NAME = TAX_RATE_STG.TX_NAME, DIM_TAX_RATE.TX_RATE = TAX_RATE_STG.TX_RATE WHEN NOT MATCHED AND TAX_RATE_STG.METADATA$ACTION = 'INSERT' AND TAX_RATE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TX_ID , TX_NAME , TX_RATE) VALUES (TAX_RATE_STG.TX_ID, TAX_RATE_STG.TX_NAME, TAX_RATE_STG.TX_RATE)"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TAX_RATE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dim Tax Rate records processed.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_TIME USING (SELECT SK_TIMEID, TIMEVALUE, HOURID, HOURDESC, MINUTEID, MINUTEDESC, SECONDID, SECONDDESC, MARKETHOURSFLAG, OFFICEHOURSFLAG, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TIME_STG_STM ) TIME_STG ON TPCDI_WH.PUBLIC.DIM_TIME.TIME_ID = TIME_STG.SK_TIMEID WHEN MATCHED AND TIME_STG.METADATA$ACTION = 'INSERT' AND TIME_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TIME.TIME_VALUE = TIME_STG.TIMEVALUE, DIM_TIME.HOUR_ID = TIME_STG.HOURID, DIM_TIME.HOUR_DESC = TIME_STG.HOURDESC, DIM_TIME.MINUTE_ID = TIME_STG.MINUTEID, DIM_TIME.MINUTE_DESC = TIME_STG.MINUTEDESC, DIM_TIME.SECOND_ID = TIME_STG.SECONDID, DIM_TIME.SECOND_DESC = TIME_STG.SECONDDESC, DIM_TIME.MARKET_HOURS_FLAG = TIME_STG.MARKETHOURSFLAG, DIM_TIME.OFFICE_HOURS_FLAG = TIME_STG.OFFICEHOURSFLAG WHEN NOT MATCHED AND TIME_STG.METADATA$ACTION = 'INSERT' AND TIME_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TIME_ID, TIME_VALUE, HOUR_ID, HOUR_DESC, MINUTE_ID, MINUTE_DESC, SECOND_ID, SECOND_DESC, MARKET_HOURS_FLAG, OFFICE_HOURS_FLAG) VALUES (TIME_STG.SK_TIMEID, TIME_STG.TIMEVALUE, TIME_STG.HOURID, TIME_STG.HOURDESC, TIME_STG.MINUTEID, TIME_STG.MINUTEDESC, TIME_STG.SECONDID, TIME_STG.SECONDDESC, TIME_STG.MARKETHOURSFLAG, TIME_STG.OFFICEHOURSFLAG)"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TIME_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dim Time records processed.";
  $$
;CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_TRADE_TYPE USING (SELECT TT_ID, TT_NAME, TT_IS_SELL, TT_IS_MRKT, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.TRADETYPE_STG_STM ) TRADE_TYPE_STG ON TPCDI_WH.PUBLIC.DIM_TRADE_TYPE.TT_ID = TRADE_TYPE_STG.TT_ID WHEN MATCHED AND TRADE_TYPE_STG.METADATA$ACTION = 'INSERT' AND TRADE_TYPE_STG.METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET DIM_TRADE_TYPE.TT_NAME = TRADE_TYPE_STG.TT_NAME, DIM_TRADE_TYPE.TT_IS_SELL = TRADE_TYPE_STG.TT_IS_SELL, DIM_TRADE_TYPE.TT_IS_MRKT = TRADE_TYPE_STG.TT_IS_MRKT WHEN NOT MATCHED AND TRADE_TYPE_STG.METADATA$ACTION = 'INSERT' AND TRADE_TYPE_STG.METADATA$ISUPDATE = 'FALSE' THEN INSERT (TT_ID, TT_NAME, TT_IS_SELL, TT_IS_MRKT) VALUES (TRADE_TYPE_STG.TT_ID, TRADE_TYPE_STG.TT_NAME, TRADE_TYPE_STG.TT_IS_SELL, TRADE_TYPE_STG.TT_IS_MRKT)"}
    );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_TYPE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return "Dim Trade Type records processed.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var ptask_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK SUSPEND"}
      );
  ptask_stmt.execute();
  var fact_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_CASH_BALANCES SELECT DIM_ACCOUNT_NOW.SK_CUSTOMER_ID, DIM_ACCOUNT_NOW.SK_ACCOUNT_ID, DIM_DATE.DATE_ID, SUM(CASHTRANSACTION_STG_STM.CT_AMT) OVER (PARTITION BY DIM_ACCOUNT_NOW.SK_ACCOUNT_ID ORDER BY DIM_DATE.DATE_ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON CASHTRANSACTION_STG_STM.CT_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TO_DATE(CASHTRANSACTION_STG_STM.CT_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) ORDER BY 3 ASC"}
      );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_CASH_BALANCES_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  var task_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_TSK SUSPEND"}
      );
  task_stmt.execute();
  return 'Fact Cash Balances transactions inserted.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_INCREMENTAL_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_CASH_BALANCES SELECT DIM_ACCOUNT_NOW.SK_CUSTOMER_ID, DIM_ACCOUNT_NOW.SK_ACCOUNT_ID, DIM_DATE.DATE_ID, CASHTRANSACTION_STG_STM_Q.NEW_CASH + IFNULL(CASHTRANSACTION_STG_STM_Q.LAST_CASH,0), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM (WITH GET_LAST_BALANCE AS (SELECT DISTINCT DIM_ACCOUNT_NOW.ACCOUNT_ID ACCOUNT_ID, LAST_VALUE(FACT_CASH_BALANCES.SK_DATE_ID) OVER (PARTITION BY FACT_CASH_BALANCES.SK_CUSTOMER_ID, FACT_CASH_BALANCES.SK_ACCOUNT_ID ORDER BY FACT_CASH_BALANCES.SK_DATE_ID) AS LAST_SK_DATE_ID, LAST_VALUE(FACT_CASH_BALANCES.CASH) OVER (PARTITION BY FACT_CASH_BALANCES.SK_CUSTOMER_ID, FACT_CASH_BALANCES.SK_ACCOUNT_ID ORDER BY FACT_CASH_BALANCES.SK_DATE_ID) AS LAST_CASH FROM TPCDI_WH.PUBLIC.FACT_CASH_BALANCES INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON         FACT_CASH_BALANCES.SK_ACCOUNT_ID = DIM_ACCOUNT_NOW.SK_ACCOUNT_ID) SELECT CASHTRANSACTION_STG_STM.CT_CA_ID, TO_DATE(CASHTRANSACTION_STG_STM.CT_DTS) AS DATE, SUM(CASHTRANSACTION_STG_STM.CT_AMT) AS NEW_CASH, MAX(GET_LAST_BALANCE.LAST_CASH) AS LAST_CASH FROM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM INNER JOIN GET_LAST_BALANCE ON CASHTRANSACTION_STG_STM.CT_CA_ID = GET_LAST_BALANCE.ACCOUNT_ID GROUP BY 1,2) CASHTRANSACTION_STG_STM_Q INNER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON CASHTRANSACTION_STG_STM_Q.CT_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON CASHTRANSACTION_STG_STM_Q.DATE = DIM_DATE.DATE_VALUE"}
      );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_CASH_BALANCES_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Fact Cash Balances transactions inserted.';
  $$
;  

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var tsk_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK SUSPEND"}
      );
  tsk_stmt.execute();
  var fact_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_HOLDINGS SELECT HH_H_T_ID, HH_T_ID, DIM_TRADE.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID, DIM_TRADE.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID, DIM_TRADE.SK_CLOSE_DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID, DIM_TRADE.TRADE_PRICE, HH_AFTER_QTY, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH)  FROM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE ON HOLDINGHISTORY_STG_STM.HH_T_ID = DIM_TRADE.TRADE_ID"}
      );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_HOLDINGS_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  var tsk_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.CHECK_STREAM_CTRL_TSK SUSPEND"}
      );
  tsk_stmt.execute();
  return 'Fact Holdings historical records processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_HOLDINGS_INCREMENTAL_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_HOLDINGS SELECT HH_H_T_ID, HH_T_ID, DIM_TRADE.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID, DIM_TRADE.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID, DIM_TRADE.SK_CLOSE_DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID, DIM_TRADE.TRADE_PRICE, HH_AFTER_QTY, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH)  FROM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE ON HOLDINGHISTORY_STG_STM.HH_T_ID = DIM_TRADE.TRADE_ID"}
      );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_HOLDINGS_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Fact Holdings incremental records processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()
  returns string
  language javascript
  as
  $$
  var hilo_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SET FACT_MARKET_HISTORY.FIFTY_TWO_WEEK_HIGH = DAILY_MARKET_HIGH_LOW_STG.YEAR_HIGH, FACT_MARKET_HISTORY.SK_FIFTY_TWO_WEEK_HIGH_DATE = DAILY_MARKET_HIGH_LOW_STG.EARLIEST_HIGH_DATE, FACT_MARKET_HISTORY.FIFTY_TWO_WEEK_LOW = DAILY_MARKET_HIGH_LOW_STG.YEAR_LOW, FACT_MARKET_HISTORY.SK_FIFTY_TWO_WEEK_LOW_DATE = DAILY_MARKET_HIGH_LOW_STG.EARLIEST_LOW_DATE FROM TPCDI_STG.PUBLIC.DAILY_MARKET_HIGH_LOW_STG, TPCDI_WH.PUBLIC.DIM_SECURITY WHERE FACT_MARKET_HISTORY.SK_SECURITY_ID = DIM_SECURITY.SK_SECURITY_ID AND FACT_MARKET_HISTORY.SK_DATE_ID = DAILY_MARKET_HIGH_LOW_STG.DATE AND DAILY_MARKET_HIGH_LOW_STG.SYMBOL = DIM_SECURITY.SYMBOL"}
    );
  hilo_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'High Low calculated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SELECT DIM_SECURITY_NOW.SK_SECURITY_ID, DIM_SECURITY_NOW.SK_COMPANY_ID, DIM_DATE.DATE_ID, TO_NUMBER(-1), ((DIM_SECURITY_NOW.DIVIDEND / DM_CLOSE) * 100), TO_NUMBER(-1), TO_NUMBER(-1), TO_NUMBER(-1), TO_NUMBER(-1), DAILYMARKET_STG_STM.DM_CLOSE, DAILYMARKET_STG_STM.DM_HIGH, DAILYMARKET_STG_STM.DM_LOW, DAILYMARKET_STG_STM.DM_VOL, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) FROM TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON DAILYMARKET_STG_STM.DM_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON DAILYMARKET_STG_STM.DM_DATE = DIM_DATE.DATE_VALUE ORDER BY 3"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_TRANS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Fact Market History transactions inserted.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.FACT_PROSPECT USING ( SELECT AGENCYID, LASTNAME, FIRSTNAME, MIDDLEINITIAL, GENDER, ADDRESSLINE1, ADDRESSLINE2, POSTALCODE, CITY, STATE, COUNTRY, PHONE, INCOME, NUMBERCARS, NUMBERCHILDREN, MARITALSTATUS, AGE, CREDITRATING, OWNORRENTFLAG, EMPLOYER, NUMBERCREDITCARDS, NETWORTH FROM TPCDI_STG.PUBLIC.PROSPECT_STG_STM) PROSPECT ON TPCDI_WH.PUBLIC.FACT_PROSPECT.AGENCY_ID = PROSPECT.AGENCYID WHEN MATCHED THEN UPDATE SET FACT_PROSPECT.LAST_NAME = PROSPECT.LASTNAME ,FACT_PROSPECT.FIRST_NAME = PROSPECT.FIRSTNAME, FACT_PROSPECT.MIDDLE_INITIAL = PROSPECT.MIDDLEINITIAL, FACT_PROSPECT.GENDER = PROSPECT.GENDER, FACT_PROSPECT.ADDRESS_LINE1 = PROSPECT.ADDRESSLINE1, FACT_PROSPECT.ADDRESS_LINE2 = PROSPECT.ADDRESSLINE2, FACT_PROSPECT.POSTAL_CODE = PROSPECT.POSTALCODE, FACT_PROSPECT.CITY = PROSPECT.CITY, FACT_PROSPECT.STATE = PROSPECT.STATE, FACT_PROSPECT.COUNTRY = PROSPECT.COUNTRY, FACT_PROSPECT.PHONE = PROSPECT.PHONE, FACT_PROSPECT.INCOME = PROSPECT.INCOME, FACT_PROSPECT.NUMBER_CARS = PROSPECT.NUMBERCARS, FACT_PROSPECT.NUMBER_CHILDREN = PROSPECT.NUMBERCHILDREN, FACT_PROSPECT.MARITAL_STATUS = PROSPECT.MARITALSTATUS, FACT_PROSPECT.AGE = PROSPECT.AGE, FACT_PROSPECT.CREDIT_RATING = PROSPECT.CREDITRATING, FACT_PROSPECT.OWN_OR_RENT_FLAG = PROSPECT.OWNORRENTFLAG, FACT_PROSPECT.EMPLOYER = PROSPECT.EMPLOYER, FACT_PROSPECT.NUMBER_CREDIT_CARDS = PROSPECT.NUMBERCREDITCARDS, FACT_PROSPECT.NET_WORTH = PROSPECT.NETWORTH, FACT_PROSPECT.SK_UPDATE_DATE_ID = (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()) WHEN NOT MATCHED THEN INSERT (AGENCY_ID, SK_RECORD_DATE_ID, SK_UPDATE_DATE_ID, BATCH_ID, IS_CUSTOMER, LAST_NAME, FIRST_NAME, MIDDLE_INITIAL, GENDER, ADDRESS_LINE1, ADDRESS_LINE2, POSTAL_CODE, CITY, STATE, COUNTRY, PHONE, INCOME, NUMBER_CARS, NUMBER_CHILDREN, MARITAL_STATUS, AGE, CREDIT_RATING, OWN_OR_RENT_FLAG, EMPLOYER, NUMBER_CREDIT_CARDS, NET_WORTH) VALUES (PROSPECT.AGENCYID, (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()), (SELECT MAX(DATE_ID) FROM TPCDI_WH.PUBLIC.DIM_DATE WHERE DATE_VALUE::DATE = CURRENT_DATE()), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 'FALSE', PROSPECT.LASTNAME, PROSPECT.FIRSTNAME, PROSPECT.MIDDLEINITIAL, PROSPECT.GENDER, PROSPECT.ADDRESSLINE1, PROSPECT.ADDRESSLINE2, PROSPECT.POSTALCODE, PROSPECT.CITY, PROSPECT.STATE, PROSPECT.COUNTRY, PROSPECT.PHONE, PROSPECT.INCOME, PROSPECT.NUMBERCARS, PROSPECT.NUMBERCHILDREN, PROSPECT.MARITALSTATUS, PROSPECT.AGE, PROSPECT.CREDITRATING, PROSPECT.OWNORRENTFLAG, PROSPECT.EMPLOYER, PROSPECT.NUMBERCREDITCARDS, PROSPECT.NETWORTH)"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_TRANS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Fact Prospect transactions loaded.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_WATCHES_ACTV_SP()
  returns string
  language javascript
  as
  $$
  var trans_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.FACT_WATCHES SELECT DIM_CUSTOMER_NOW.SK_CUSTOMER_ID SK_CUSTOMER_ID, DIM_SECURITY_NOW.SK_SECURITY_ID SK_SECURITY_ID, DIM_DATE.DATE_ID SK_DATE_ID_DATE_PLACED, NULL SK_DATE_ID_DATE_REMOVED, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) BATCH_ID FROM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_ACTV_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW ON WATCH_HISTORY_STG_ACTV_STM.W_C_ID = DIM_CUSTOMER_NOW.CUSTOMER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON WATCH_HISTORY_STG_ACTV_STM.W_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TO_DATE(WATCH_HISTORY_STG_ACTV_STM.W_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) WHERE WATCH_HISTORY_STG_ACTV_STM.W_ACTION = 'ACTV' "}
    );
  trans_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_WATCHES_ACTV_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Fact Watches active transactions processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_WATCHES_CNCL_SP()
  returns string
  language javascript
  as
  $$
  var trans_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_WATCHES SET FACT_WATCHES.SK_DATE_ID_DATE_REMOVED = ALL_CUST_SEC_SK.SK_DATE_ID_DATE_REMOVED FROM (SELECT DIM_CUSTOMER.SK_CUSTOMER_ID SK_CUSTOMER_ID, DIM_SECURITY.SK_SECURITY_ID SK_SECURITY_ID, DIM_DATE.DATE_ID SK_DATE_ID_DATE_REMOVED FROM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_CNCL_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER ON       WATCH_HISTORY_STG_CNCL_STM.W_C_ID = DIM_CUSTOMER.CUSTOMER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY ON       WATCH_HISTORY_STG_CNCL_STM.W_S_SYMB = DIM_SECURITY.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON       TO_DATE(WATCH_HISTORY_STG_CNCL_STM.W_DTS) = TO_DATE(DIM_DATE.DATE_VALUE) WHERE WATCH_HISTORY_STG_CNCL_STM.W_ACTION = 'CNCL') ALL_CUST_SEC_SK WHERE FACT_WATCHES.SK_CUSTOMER_ID = ALL_CUST_SEC_SK.SK_CUSTOMER_ID  AND FACT_WATCHES.SK_SECURITY_ID = ALL_CUST_SEC_SK.SK_SECURITY_ID AND FACT_WATCHES.SK_DATE_ID_DATE_REMOVED IS NULL "}
    );
  trans_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_WATCHES_CNCL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Fact Watches cancelled transactions processed.';
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var date_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_SP()"}
    );
  date_stmt.execute();
  var time_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_SP()"}
    );
  time_stmt.execute();
  var tt_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_SP()"}
    );
  tt_stmt.execute();
  var st_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_SP()"}
    );
  st_stmt.execute();
  var tr_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_SP()"}
    );
  tr_stmt.execute();
  var ind_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_SP()"}
    );
  ind_stmt.execute();
  return "All reference dimension tasks have been started.";
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()
  returns string
  language javascript
  as
  $$
  var pe_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY SET FACT_MARKET_HISTORY.PE_RATIO = FACT_MARKET_HISTORY.CLOSE_PRICE / ROLL_YEAR_EPS_CALC.ROLL_YEAR_EPS FROM (WITH MARKET_HISTORY_COMPANY_ID AS (SELECT FACT_MARKET_HISTORY.SK_SECURITY_ID, FACT_MARKET_HISTORY.SK_COMPANY_ID, FACT_MARKET_HISTORY.SK_DATE_ID, DIM_COMPANY.COMPANY_ID FROM TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY INNER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY ON FACT_MARKET_HISTORY.SK_COMPANY_ID = DIM_COMPANY.SK_COMPANY_ID) SELECT  MARKET_HISTORY_COMPANY_ID.SK_SECURITY_ID, MARKET_HISTORY_COMPANY_ID.SK_COMPANY_ID, MARKET_HISTORY_COMPANY_ID.SK_DATE_ID, MARKET_HISTORY_COMPANY_ID.COMPANY_ID, DIM_FINANCIAL_ROLL_YEAR_EPS.ROLL_YEAR_EPS FROM MARKET_HISTORY_COMPANY_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_FINANCIAL_ROLL_YEAR_EPS ON MARKET_HISTORY_COMPANY_ID.COMPANY_ID = DIM_FINANCIAL_ROLL_YEAR_EPS.COMPANY_ID AND YEAR(TO_DATE(MARKET_HISTORY_COMPANY_ID.SK_DATE_ID::STRING, 'YYYYMMDD')) || QUARTER(TO_DATE(MARKET_HISTORY_COMPANY_ID.SK_DATE_ID::STRING, 'YYYYMMDD')) = DIM_FINANCIAL_ROLL_YEAR_EPS.YEAR_QTR) ROLL_YEAR_EPS_CALC WHERE FACT_MARKET_HISTORY.SK_SECURITY_ID = ROLL_YEAR_EPS_CALC.SK_SECURITY_ID AND FACT_MARKET_HISTORY.SK_COMPANY_ID = ROLL_YEAR_EPS_CALC.SK_COMPANY_ID AND FACT_MARKET_HISTORY.SK_DATE_ID = ROLL_YEAR_EPS_CALC.SK_DATE_ID"}
    );
  pe_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_MARKET_HISTORY_CALC_PE_RATIO_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Fact Market History PE Ratio calculated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var tsk1_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK SUSPEND"}
      );
  tsk1_stmt.execute();
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()"}
      );
  fact_stmt.execute();
  var hilo_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()"}
      );
  hilo_stmt.execute();
  var pe_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()"}
      );
  pe_stmt.execute();
  var tsk2_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_TSK SUSPEND"}
      );
  tsk2_stmt.execute();
  return 'All historical Market History fact records processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_INCREMENTAL_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()"}
      );
  fact_stmt.execute();
  var hilo_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()"}
      );
  hilo_stmt.execute();
  var pe_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()"}
      );
  pe_stmt.execute();
  return 'All incremental Market History records have been processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_TRANS_SP()"}
      );
  fact_stmt.execute();
  var hilo_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_HIGH_LOW_SP()"}
      );
  hilo_stmt.execute();
  var pe_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_CALC_PE_RATIO_SP()"}
      );
  pe_stmt.execute();
  return 'All Market History records have been processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()"}
      );
  fact_stmt.execute();
  var namep_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()"}
      );
  namep_stmt.execute();
  var hv_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()"}
      );
  hv_stmt.execute();
  var exp_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()"}
      );
  exp_stmt.execute();
  var boom_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()"}
      );
  boom_stmt.execute();
  var mony_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()"}
      );
  mony_stmt.execute();
  var spnd_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()"}
      );
  spnd_stmt.execute();
  var inher_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()"}
      );
  inher_stmt.execute();
  var isc_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()"}
      );
  isc_stmt.execute();
  var tsk_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_TSK SUSPEND"}
      );
  tsk_stmt.execute();
  return 'Historical Prospect load completed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_INCREMENTAL_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()"}
      );
  fact_stmt.execute();
  var namep_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()"}
      );
  namep_stmt.execute();
  var hv_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()"}
      );
  hv_stmt.execute();
  var exp_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()"}
      );
  exp_stmt.execute();
  var boom_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()"}
      );
  boom_stmt.execute();
  var mony_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()"}
      );
  mony_stmt.execute();
  var spnd_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()"}
      );
  spnd_stmt.execute();
  var inher_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()"}
      );
  inher_stmt.execute();
  var isc_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()"}
      );
  isc_stmt.execute();
  return 'All incremental Prospect records processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT T1 SET T1.IS_CUSTOMER = 'TRUE' FROM TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW T2 WHERE UPPER(T1.LAST_NAME) = UPPER(T2.LAST_NAME) AND UPPER(T1.FIRST_NAME) = UPPER(T2.FIRST_NAME) AND UPPER(T1.ADDRESS_LINE1) = UPPER(T2.ADDRESS_LINE_1) AND UPPER(T1.ADDRESS_LINE2) = UPPER(T2.ADDRESS_LINE_2) AND UPPER(T1.POSTAL_CODE) = UPPER(T2.POSTAL_CODE) AND UPPER(T2.STATUS) = 'ACTV'"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_ISCUST_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Is Customer updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_TRANS_SP()"}
      );
  fact_stmt.execute();
  var namep_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()"}
      );
  namep_stmt.execute();
  var hv_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()"}
      );
  hv_stmt.execute();
  var exp_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()"}
      );
  exp_stmt.execute();
  var boom_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()"}
      );
  boom_stmt.execute();
  var mony_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()"}
      );
  mony_stmt.execute();
  var spnd_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()"}
      );
  spnd_stmt.execute();
  var inher_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()"}
      );
  inher_stmt.execute();
  var isc_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_ISCUST_SP()"}
      );
  isc_stmt.execute();
  return 'All Prospect records processed.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_BOOMER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'BOOMER',CONCAT(MARKETING_NAMEPLATE,'+BOOMER')) WHERE AGE > 45"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_BOOMER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate Boomer updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_EXPENSES_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'EXPENSES',CONCAT(MARKETING_NAMEPLATE,'+EXPENSES')) WHERE NUMBER_CHILDREN > 3 OR NUMBER_CREDIT_CARDS > 5"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_EXPENSES_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate Expenses updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_HIGHVALUE_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = 'HIGHVALUE' WHERE NET_WORTH > 1000000 OR INCOME > 200000"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_HIGHVALUE_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate High Value updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_INHERITED_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'INHERITED',CONCAT(MARKETING_NAMEPLATE,'+INHERITED')) WHERE AGE < 25 AND NET_WORTH > 1000000"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_INHERITED_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate Inherited updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_MONEYALERT_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'MONEYALERT',CONCAT(MARKETING_NAMEPLATE,'+MONEYALERT')) WHERE INCOME < 50000 OR CREDIT_RATING < 600 OR NET_WORTH < 100000"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_MONEYALERT_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate Money Alert updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_RESET_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = NULL WHERE MARKETING_NAMEPLATE IS NOT NULL"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_RESET_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate column reset.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_PROSPECT_MN_SPENDER_SP()
  returns string
  language javascript
  as
  $$
  var fact_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_WH.PUBLIC.FACT_PROSPECT SET MARKETING_NAMEPLATE = IFF(MARKETING_NAMEPLATE IS NULL,'SPENDER',CONCAT(MARKETING_NAMEPLATE,'+SPENDER')) WHERE NUMBER_CARS > 3 OR NUMBER_CREDIT_CARDS > 7"}
    );
  fact_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FACT_PROSPECT_MN_SPENDER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Marketing Nameplate Spender updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var mp_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_WATCHES_MASTER_SP()"}
      );
  mp_stmt.execute();
  var tsk_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK SUSPEND"}
      );
  tsk_stmt.execute();
  return 'Historical load complete.';
  $$
;  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_WATCHES_INCREMENTAL_SP()
  returns string
  language javascript
  as
  $$
  var mp_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_WATCHES_MASTER_SP()"}
      );
  mp_stmt.execute();
  return 'Incremental load complete.';
  $$;
    
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FACT_WATCHES_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var act_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_WATCHES_ACTV_SP()"}
      );
  act_stmt.execute();
  var can_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FACT_WATCHES_CNCL_SP()"}
      );
  can_stmt.execute();
  return 'Fact Watches load complete.';
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_SP()
  returns string
  language javascript
  as
  $$
  var whstmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.LOAD_SNAPSHOT SELECT TABLE_CATALOG, LOCALTIMESTAMP(), SUM(ROW_COUNT) FROM TPCDI_WH.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'PUBLIC' AND TABLE_NAME != 'LOAD_SNAPSHOT' and TABLE_NAME != 'CTRL_BATCH' AND TABLE_TYPE = 'BASE TABLE' GROUP BY 1,2"}
      );
  whstmt.execute();
  return "Snapshot successful.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.MAINTENANCE_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_TSK SUSPEND"}
    );
  dim_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK SUSPEND"}
    );
  dim_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK SUSPEND"}
    );
  dim_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "DROP STREAM IF EXISTS TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM"}
    );
  dim_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "DROP STREAM IF EXISTS TPCDI_WH.PUBLIC.DIM_SECURITY_STM"}
    );
  dim_stmt.execute();
  return "Dummy executed and streams dropped.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.RUN_HISTORICAL_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE;
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.RESET_ALL_SP()"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(" + tpcdi_scale + ")"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()"});
  stmt.execute();
  return "All tables have been reset and all historical tasks are started.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.RUN_ALL_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  var stmt = snowflake.createStatement({sqlText: "INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(" + tpcdi_scale + ")"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(" + tpcdi_scale + ")"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP()"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.START_TASKS_SP()"});
  stmt.execute();
  return "All tables have been reset, all historical tasks are started, and incremental flow control is ready.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.RUN_ALL_CLEAN_SP(scale float)
  returns string
  language javascript
  as
  $$
  var tpcdi_scale = SCALE
  var stmt = snowflake.createStatement({sqlText: "INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_STG.PUBLIC.START_LOAD_HISTORICAL_TASKS_SP(" + tpcdi_scale + ")"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "CALL TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()"});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_" + tpcdi_scale + "_CTRL_TSK "});
  stmt.execute();
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_" + tpcdi_scale + "_CTRL_TSK "});
  stmt.execute();
  return "All tables have been reset, all historical tasks are started, and incremental flow control is ready.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.START_DW_HISTORICAL_TASKS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK "});
  stmt.execute();
  return "All historical DW tasks started.";
  $$;
  
  CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement({sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK "});
  stmt.execute();
  return "All incremental DW tasks started.";
  $$;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.START_TASKS_SP()
  returns string
  language javascript
  as
  $$
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK "}
    );
  rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText:`call system$wait(10, 'SECONDS');`});
  //rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK"}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK"}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_TSK "}
    );
  rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText:`call system$wait(30, 'SECONDS');`});
  //rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText:`call system$wait(30, 'SECONDS');`});
  //rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText:`call system$wait(60, 'SECONDS');`});
  //rs = stmt.execute();
  stmt = snowflake.createStatement(
      {sqlText: "EXECUTE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK "}
    );
  rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText:`call system$wait(10, 'SECONDS');`});
  //rs = stmt.execute();
  rs.next();
  output = rs.getColumnValue(1);
  return output;
  $$
;

-- This procedure updates the ACCOUNT_ODS table with closed accounts from the historical load.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_INACT_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (SELECT CUSTOMER_ID, CUSTOMER_ACCOUNT_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_CLOSE_STG) ACS ON ACS.CUSTOMER_ACCOUNT_ID = ACCOUNT_ODS.CA_ID WHEN MATCHED THEN UPDATE SET ACCOUNT_ODS.CA_ST_ID = 'INAC', ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (ACS.CUSTOMER_ACCOUNT_ID, NULL, ACS.CUSTOMER_ID, NULL, NULL, 'INAC', CURRENT_TIMESTAMP())"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_INACT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Inactive Account ODS records processed.';
  $$
;-- This procedure inserts new accounts into ACCOUNT_ODS from the historical load.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_NEW_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS SELECT CUSTOMER_ACCOUNT_ID, CUSTOMER_ACCOUNT_BROKER_ID, CUSTOMER_ID, CUSTOMER_ACCOUNT_NAME, CUSTOMER_ACCOUNT_TAX_STATUS, 'ACTV' AS CA_ST_ID, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.ACCOUNT_NEW_STG"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
       {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_NEW_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'New Account ODS records processed.';
  $$
;
-- This procedure merges new and updated accounts into the ACCOUNT_ODS table for the incremental loads.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (SELECT CDC_FLAG, CDC_DSN, CA_ID, CA_B_ID, CA_C_ID, CA_NAME, CA_TAX_ST, CA_ST_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM) ACCOUNT_STG ON TPCDI_ODS.PUBLIC.ACCOUNT_ODS.CA_ID = ACCOUNT_STG.CA_ID WHEN MATCHED AND ACCOUNT_STG.CDC_FLAG = 'U' THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(ACCOUNT_STG.CA_B_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(ACCOUNT_STG.CA_C_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(ACCOUNT_STG.CA_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(ACCOUNT_STG.CA_TAX_ST,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.CA_ST_ID = COALESCE(ACCOUNT_STG.CA_ST_ID,ACCOUNT_ODS.CA_ST_ID), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED AND ACCOUNT_STG.CDC_FLAG = 'I' THEN INSERT VALUES (ACCOUNT_STG.CA_ID, ACCOUNT_STG.CA_B_ID, ACCOUNT_STG.CA_C_ID, ACCOUNT_STG.CA_NAME, ACCOUNT_STG.CA_TAX_ST, ACCOUNT_STG.CA_ST_ID, CURRENT_TIMESTAMP() )"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Account ODS records processed.';
  $$
;
-- This procedure processes account updates into ACCOUNT_ODS in the order in which they happened for the historical load.
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.ACCOUNT_UPDT_ODS_SP(levels float)
  returns string
  language javascript
  as
  $$
  var level_counter = 1
  while (level_counter <= LEVELS)
  {
  var ods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.ACCOUNT_ODS USING (WITH NTH_ACTION_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(AUN.ACTION_DATE," + level_counter + ") OVER (PARTITION BY AUN.CUSTOMER_ACCOUNT_ID ORDER BY AUN.ACTION_DATE) AS NTH_ACTION_DATE, AUN.CUSTOMER_ACCOUNT_ID AS AUN_CA_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AUN) SELECT AU.CUSTOMER_ACCOUNT_BROKER_ID, AU.CUSTOMER_ID, AU.CUSTOMER_ACCOUNT_NAME, AU.CUSTOMER_ACCOUNT_TAX_STATUS, AU.CUSTOMER_ACCOUNT_ID FROM TPCDI_STG.PUBLIC.ACCOUNT_UPDT_STG AU JOIN NTH_ACTION_DATE_ROW ON NTH_ACTION_DATE_ROW.NTH_ACTION_DATE = AU.ACTION_DATE AND NTH_ACTION_DATE_ROW.AUN_CA_ID = AU.CUSTOMER_ACCOUNT_ID) AUS ON AUS.CUSTOMER_ACCOUNT_ID = ACCOUNT_ODS.CA_ID WHEN MATCHED THEN UPDATE SET ACCOUNT_ODS.CA_B_ID = COALESCE(AUS.CUSTOMER_ACCOUNT_BROKER_ID,ACCOUNT_ODS.CA_B_ID), ACCOUNT_ODS.CA_C_ID = COALESCE(AUS.CUSTOMER_ID,ACCOUNT_ODS.CA_C_ID), ACCOUNT_ODS.CA_NAME = COALESCE(AUS.CUSTOMER_ACCOUNT_NAME,ACCOUNT_ODS.CA_NAME), ACCOUNT_ODS.CA_TAX_ST = COALESCE(AUS.CUSTOMER_ACCOUNT_TAX_STATUS,ACCOUNT_ODS.CA_TAX_ST), ACCOUNT_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (AUS.CUSTOMER_ACCOUNT_ID, AUS.CUSTOMER_ACCOUNT_BROKER_ID, AUS.CUSTOMER_ID, AUS.CUSTOMER_ACCOUNT_NAME, AUS.CUSTOMER_ACCOUNT_TAX_STATUS, 'ACTV', CURRENT_TIMESTAMP())"}
    );
  ods_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'ACCOUNT_UPDT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  var wh_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()"}
    );
  wh_stmt.execute();
  level_counter++
  }
  return 'Accounts updated.';
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.CUSTOMER_INACT_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_ODS.PUBLIC.CUSTOMER_ODS ODS SET ODS.C_ST_ID = 'INAC', ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_INACT_STG CIS WHERE CIS.C_ID = ODS.C_ID"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_INACT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Inactive customers processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.CUSTOMER_NEW_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_ODS.PUBLIC.CUSTOMER_ODS SELECT CNS.CUSTOMER_ID, CNS.CUSTOMER_TAX_ID, 'ACTV', CNS.LAST_NAME, CNS.FIRST_NAME, CNS.MIDDLE_INITIAL, CNS.GENDER, CNS.CUSTOMER_TIER, CNS.DATE_OF_BIRTH, CNS.ADDRESS_LINE_1, CNS.ADDRESS_LINE_2, CNS.ZIP_CODE, CNS.CITY, CNS.STATE_PROVINCE, CNS.COUNTRY, CNS.PHONE_1_COUNTRY_CODE, CNS.PHONE_1_AREA_CODE, CNS.PHONE_1_PHONE_NUMBER, CNS.PHONE_1_EXTENSION, CNS.PHONE_2_COUNTRY_CODE, CNS.PHONE_2_AREA_CODE, CNS.PHONE_2_PHONE_NUMBER, CNS.PHONE_2_EXTENSION, CNS.PHONE_3_COUNTRY_CODE, CNS.PHONE_3_AREA_CODE, CNS.PHONE_3_PHONE_NUMBER, CNS.PHONE_3_EXTENSION, CNS.PRIMARY_EMAIL, CNS.ALTERNATE_EMAIL, CNS.LOCAL_TAX_ID, CNS.NATIONAL_TAX_ID, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_NEW_STG CNS"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_NEW_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'New Customer ODS records processed.';
  $$;
  
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.CUSTOMER_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.CUSTOMER_ODS USING (SELECT CDC_FLAG, CDC_DSN, C_ID, C_TAX_ID, C_ST_ID, C_L_NAME, C_F_NAME, C_M_NAME, C_GNDR, C_TIER, C_DOB, C_ADLINE1, C_ADLINE2, C_ZIPCODE, C_CITY, C_STATE_PROV, C_CTRY, C_CTRY_1, C_AREA_1, C_LOCAL_1, C_EXT_1, C_CTRY_2, C_AREA_2, C_LOCAL_2, C_EXT_2, C_CTRY_3, C_AREA_3, C_LOCAL_3, C_EXT_3, C_EMAIL_1, C_EMAIL_2, C_LCL_TX_ID, C_NAT_TX_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_STG.PUBLIC.CUSTOMER_STG_STM) CUSTOMER_STG ON TPCDI_ODS.PUBLIC.CUSTOMER_ODS.C_ID = CUSTOMER_STG.C_ID WHEN MATCHED AND CUSTOMER_STG.CDC_FLAG = 'U' THEN UPDATE SET CUSTOMER_ODS.C_TAX_ID = COALESCE(CUSTOMER_STG.C_TAX_ID,CUSTOMER_ODS.C_TAX_ID), CUSTOMER_ODS.C_ST_ID = COALESCE(CUSTOMER_STG.C_ST_ID,CUSTOMER_ODS.C_ST_ID), CUSTOMER_ODS.C_L_NAME = COALESCE(CUSTOMER_STG.C_L_NAME,CUSTOMER_ODS.C_L_NAME), CUSTOMER_ODS.C_F_NAME = COALESCE(CUSTOMER_STG.C_F_NAME,CUSTOMER_ODS.C_F_NAME), CUSTOMER_ODS.C_M_NAME = COALESCE(CUSTOMER_STG.C_M_NAME,CUSTOMER_ODS.C_M_NAME), CUSTOMER_ODS.C_GNDR = COALESCE(CUSTOMER_STG.C_GNDR,CUSTOMER_ODS.C_GNDR), CUSTOMER_ODS.C_TIER = COALESCE(CUSTOMER_STG.C_TIER,CUSTOMER_ODS.C_TIER), CUSTOMER_ODS.C_DOB = COALESCE(CUSTOMER_STG.C_DOB,CUSTOMER_ODS.C_DOB), CUSTOMER_ODS.C_ADLINE1 = COALESCE(CUSTOMER_STG.C_ADLINE1,CUSTOMER_ODS.C_ADLINE1), CUSTOMER_ODS.C_ADLINE2 = COALESCE(CUSTOMER_STG.C_ADLINE2,CUSTOMER_ODS.C_ADLINE2), CUSTOMER_ODS.C_ZIPCODE = COALESCE(CUSTOMER_STG.C_ZIPCODE,CUSTOMER_ODS.C_ZIPCODE), CUSTOMER_ODS.C_CITY = COALESCE(CUSTOMER_STG.C_CITY,CUSTOMER_ODS.C_CITY), CUSTOMER_ODS.C_STATE_PROV = COALESCE(CUSTOMER_STG.C_STATE_PROV,CUSTOMER_ODS.C_STATE_PROV), CUSTOMER_ODS.C_CTRY = COALESCE(CUSTOMER_STG.C_CTRY,CUSTOMER_ODS.C_CTRY), CUSTOMER_ODS.C_CTRY_1 = COALESCE(CUSTOMER_STG.C_CTRY_1,CUSTOMER_ODS.C_CTRY_1), CUSTOMER_ODS.C_AREA_1 = COALESCE(CUSTOMER_STG.C_AREA_1,CUSTOMER_ODS.C_AREA_1), CUSTOMER_ODS.C_LOCAL_1 = COALESCE(CUSTOMER_STG.C_LOCAL_1,CUSTOMER_ODS.C_LOCAL_1), CUSTOMER_ODS.C_EXT_1 = COALESCE(CUSTOMER_STG.C_EXT_1,CUSTOMER_ODS.C_EXT_1), CUSTOMER_ODS.C_CTRY_2 = COALESCE(CUSTOMER_STG.C_CTRY_2,CUSTOMER_ODS.C_CTRY_2), CUSTOMER_ODS.C_AREA_2 = COALESCE(CUSTOMER_STG.C_AREA_2,CUSTOMER_ODS.C_AREA_2), CUSTOMER_ODS.C_LOCAL_2 = COALESCE(CUSTOMER_STG.C_LOCAL_2,CUSTOMER_ODS.C_LOCAL_2), CUSTOMER_ODS.C_EXT_2 = COALESCE(CUSTOMER_STG.C_EXT_2,CUSTOMER_ODS.C_EXT_2), CUSTOMER_ODS.C_CTRY_3 = COALESCE(CUSTOMER_STG.C_CTRY_3,CUSTOMER_ODS.C_CTRY_3), CUSTOMER_ODS.C_AREA_3 = COALESCE(CUSTOMER_STG.C_AREA_3,CUSTOMER_ODS.C_AREA_3), CUSTOMER_ODS.C_LOCAL_3 = COALESCE(CUSTOMER_STG.C_LOCAL_3,CUSTOMER_ODS.C_LOCAL_3), CUSTOMER_ODS.C_EXT_3 = COALESCE(CUSTOMER_STG.C_EXT_3,CUSTOMER_ODS.C_EXT_3), CUSTOMER_ODS.C_EMAIL_1 = COALESCE(CUSTOMER_STG.C_EMAIL_1,CUSTOMER_ODS.C_EMAIL_1), CUSTOMER_ODS.C_EMAIL_2 = COALESCE(CUSTOMER_STG.C_EMAIL_2,CUSTOMER_ODS.C_EMAIL_2), CUSTOMER_ODS.C_LCL_TX_ID = COALESCE(CUSTOMER_STG.C_LCL_TX_ID,CUSTOMER_ODS.C_LCL_TX_ID), CUSTOMER_ODS.C_NAT_TX_ID = COALESCE(CUSTOMER_STG.C_NAT_TX_ID,CUSTOMER_ODS.C_NAT_TX_ID), CUSTOMER_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED AND CUSTOMER_STG.CDC_FLAG = 'I' THEN INSERT VALUES (CUSTOMER_STG.C_ID, CUSTOMER_STG.C_TAX_ID, CUSTOMER_STG.C_ST_ID, CUSTOMER_STG.C_L_NAME, CUSTOMER_STG.C_F_NAME, CUSTOMER_STG.C_M_NAME, CUSTOMER_STG.C_GNDR, CUSTOMER_STG.C_TIER, CUSTOMER_STG.C_DOB, CUSTOMER_STG.C_ADLINE1, CUSTOMER_STG.C_ADLINE2, CUSTOMER_STG.C_ZIPCODE, CUSTOMER_STG.C_CITY, CUSTOMER_STG.C_STATE_PROV, CUSTOMER_STG.C_CTRY, CUSTOMER_STG.C_CTRY_1, CUSTOMER_STG.C_AREA_1, CUSTOMER_STG.C_LOCAL_1, CUSTOMER_STG.C_EXT_1, CUSTOMER_STG.C_CTRY_2, CUSTOMER_STG.C_AREA_2, CUSTOMER_STG.C_LOCAL_2, CUSTOMER_STG.C_EXT_2, CUSTOMER_STG.C_CTRY_3, CUSTOMER_STG.C_AREA_3, CUSTOMER_STG.C_LOCAL_3, CUSTOMER_STG.C_EXT_3, CUSTOMER_STG.C_EMAIL_1, CUSTOMER_STG.C_EMAIL_2, CUSTOMER_STG.C_LCL_TX_ID, CUSTOMER_STG.C_NAT_TX_ID, CURRENT_TIMESTAMP())"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Customer ODS records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.CUSTOMER_UPDT_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_ODS.PUBLIC.CUSTOMER_ODS ODS SET ODS.C_TIER = COALESCE(CUS.C_TIER,ODS.C_TIER), ODS.C_ADLINE1 = COALESCE(CUS.ADDRESSLINE1,ODS.C_ADLINE1), ODS.C_ADLINE2 = COALESCE(CUS.ADDRESSLINE2,ODS.C_ADLINE2), ODS.C_ZIPCODE = COALESCE(CUS.ZIPCODE,ODS.C_ZIPCODE), ODS.C_CITY = COALESCE(CUS.CITY,ODS.C_CITY), ODS.C_STATE_PROV = COALESCE(CUS.STATEPROV,ODS.C_STATE_PROV), ODS.C_CTRY = COALESCE(CUS.COUNTRY,ODS.C_CTRY), ODS.C_CTRY_1 = COALESCE(CUS.PH1COUNTRYCODE,ODS.C_CTRY_1), ODS.C_AREA_1 = COALESCE(CUS.PH1AREACODE,ODS.C_AREA_1), ODS.C_LOCAL_1 = COALESCE(CUS.PH1LOCALNUMBER,ODS.C_LOCAL_1), ODS.C_EXT_1 = COALESCE(CUS.PH1EXTENSION,ODS.C_EXT_1), ODS.C_CTRY_2 = COALESCE(CUS.PH2COUNTRYCODE,ODS.C_CTRY_2), ODS.C_AREA_2 = COALESCE(CUS.PH2AREACODE,ODS.C_AREA_2), ODS.C_LOCAL_2 = COALESCE(CUS.PH2LOCALNUMBER,ODS.C_LOCAL_2), ODS.C_EXT_2 = COALESCE(CUS.PH2EXTENSION,ODS.C_EXT_2), ODS.C_CTRY_3 = COALESCE(CUS.PH3COUNTRYCODE,ODS.C_CTRY_3), ODS.C_AREA_3 = COALESCE(CUS.PH3AREACODE,ODS.C_AREA_3), ODS.C_LOCAL_3 = COALESCE(CUS.PH3LOCALNUMBER,ODS.C_LOCAL_3), ODS.C_EXT_3 = COALESCE(CUS.PH3EXTENSION,ODS.C_EXT_3), ODS.C_EMAIL_1 = COALESCE(CUS.PRIMARYEMAIL,ODS.C_EMAIL_1), ODS.C_EMAIL_2 = COALESCE(CUS.ALTERNATEEMAIL,ODS.C_EMAIL_2), ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.CUSTOMER_UPDT_STG CUS WHERE CUS.C_ID = ODS.C_ID"}
    );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'CUSTOMER_UPDT_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Customer ODS records updated.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var nods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.ACCOUNT_NEW_ODS_SP()"}
      );
  nods_stmt.execute();
  var dim1_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()"}
      );
  dim1_stmt.execute();
  var uods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.ACCOUNT_UPDT_ODS_SP(7)"}
      );
  uods_stmt.execute();
  var iods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.ACCOUNT_INACT_ODS_SP()"}
      );
  iods_stmt.execute();
  var flow_stmt = snowflake.createStatement(
      {sqlText: "CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM ON TABLE TPCDI_WH.PUBLIC.DIM_ACCOUNT"}
      );
  flow_stmt.execute();
  var dim2_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()"}
      );
  dim2_stmt.execute();
  return 'All historical Account Dimension records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_ACCOUNT_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var ods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.ACCOUNT_ODS_SP()"}
      );
  ods_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()"}
      );
  dim_stmt.execute();
  return 'All Account Dimension records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_ACCOUNT_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_ACCOUNT SELECT TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ.NEXTVAL AS SK_ACCOUNT_ID, A.CA_ID, COALESCE(DIM_BROKER.SK_BROKER_ID,0), DIM_CUSTOMER_NOW.SK_CUSTOMER_ID, A.CA_ST_ID, A.CA_NAME, A.CA_TAX_ST, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) AS BATCH_ID, LOCALTIMESTAMP() AS INSERTED_TS FROM TPCDI_ODS.PUBLIC.ACCOUNT_ODS_STM A LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_BROKER ON A.CA_B_ID = DIM_BROKER.BROKER_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_CUSTOMER_NOW ON A.CA_C_ID = DIM_CUSTOMER_NOW.CUSTOMER_ID WHERE A.METADATA$ACTION = 'INSERT'"}
      );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_ACCOUNT_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Dim Account records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var ods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FINWIRE_CMP_ODS_SP(4)"}
      );
  ods_stmt.execute();
  return 'All historical Company ODS records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_COMPANY_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_COMPANY SELECT TPCDI_WH.PUBLIC.DIM_COMPANY_SEQ.NEXTVAL, CIK, DIM_STATUS_TYPE.ST_NAME, COMPANY_NAME, DIM_INDUSTRY.IN_NAME, SP_RATING, CASE WHEN (UPPER(SUBSTR(SP_RATING,1,1)) = 'A' OR UPPER(SUBSTR(SP_RATING,1,3)) = 'BBB') THEN 0 ELSE 1 END, CEO_NAME, ADDR_LINE1, ADDR_LINE2, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY, DESCRIPTION, FOUNDING_DATE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP()  FROM TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON FINWIRE_CMP_ODS_STM.STATUS = DIM_STATUS_TYPE.ST_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_INDUSTRY ON FINWIRE_CMP_ODS_STM.INDUSTRY_ID = DIM_INDUSTRY.IN_ID WHERE FINWIRE_CMP_ODS_STM.METADATA$ACTION = 'INSERT'"}
      );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_COMPANY_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Dim Company records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var nods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.CUSTOMER_NEW_ODS_SP()"}
      );
  nods_stmt.execute();
  var dim1_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()"}
      );
  dim1_stmt.execute();
  var uods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.CUSTOMER_UPDT_ODS_SP()"}
      );
  uods_stmt.execute();
  var dim2_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()"}
      );
  dim2_stmt.execute();
  var iods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.CUSTOMER_INACT_ODS_SP()"}
      );
  iods_stmt.execute();
  var dim3_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()"}
      );
  dim3_stmt.execute();
  return 'Dim Customer Historical completed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_CUSTOMER_MASTER_SP()
  returns string
  language javascript
  as
  $$
  var btch_stmt = snowflake.createStatement({sqlText: "INSERT INTO TPCDI_WH.PUBLIC.CTRL_BATCH VALUES (TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ.NEXTVAL,LOCALTIMESTAMP())"});
  btch_stmt.execute();
  var ods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.CUSTOMER_ODS_SP()"}
      );
  ods_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()"}
      );
  dim_stmt.execute();
  return 'All Customer Dimension records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_CUSTOMER_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_CUSTOMER SELECT TPCDI_WH.PUBLIC.DIM_CUSTOMER_SEQ.NEXTVAL AS SK_CUSTOMER_ID, CNS.C_ID, CNS.C_TAX_ID, CNS.C_ST_ID, CNS.C_L_NAME, CNS.C_F_NAME, CNS.C_M_NAME, CASE WHEN CNS.C_GNDR = 'M' OR CNS.C_GNDR = 'F' THEN UPPER(CNS.C_GNDR) ELSE 'U' END AS GENDER, CNS.C_TIER, CNS.C_DOB, CNS.C_ADLINE1, CNS.C_ADLINE2, CNS.C_ZIPCODE, CNS.C_CITY, CNS.C_STATE_PROV, CNS.C_CTRY, CASE WHEN CNS.C_CTRY_1 != '' AND CNS.C_AREA_1 != '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_CTRY_1 || '-' || CNS.C_AREA_1 || '-' || CNS.C_LOCAL_1 WHEN CNS.C_CTRY_1 = '' AND CNS.C_AREA_1 != '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_AREA_1 || '-' || CNS.C_LOCAL_1 WHEN CNS.C_CTRY_1 = '' AND CNS.C_AREA_1 = '' AND CNS.C_LOCAL_1 != '' THEN CNS.C_LOCAL_1 ELSE NULL END AS PHONE1, CASE WHEN CNS.C_CTRY_2 != '' AND CNS.C_AREA_2 != '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_CTRY_2 || '-' || CNS.C_AREA_2 || '-' || CNS.C_LOCAL_2 WHEN CNS.C_CTRY_2 = '' AND CNS.C_AREA_2 != '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_AREA_2 || '-' || CNS.C_LOCAL_2 WHEN CNS.C_CTRY_2 = '' AND CNS.C_AREA_2 = '' AND CNS.C_LOCAL_2 != '' THEN CNS.C_LOCAL_2 ELSE NULL END AS PHONE2, CASE WHEN CNS.C_CTRY_3 != '' AND CNS.C_AREA_3 != '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_CTRY_3 || '-' || CNS.C_AREA_3 || '-' || CNS.C_LOCAL_3 WHEN CNS.C_CTRY_3 = '' AND CNS.C_AREA_3 != '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_AREA_3 || '-' || CNS.C_LOCAL_3 WHEN CNS.C_CTRY_3 = '' AND CNS.C_AREA_3 = '' AND CNS.C_LOCAL_3 != '' THEN CNS.C_LOCAL_3 ELSE NULL END AS PHONE3, CNS.C_EMAIL_1, CNS.C_EMAIL_2, NAT_TAX_RATE.TX_NAME AS NATIONAL_TAX_RATE_DESC, NAT_TAX_RATE.TX_RATE AS NATIONAL_TAX_RATE, LOC_TAX_RATE.TX_NAME AS LOCAL_TAX_RATE_DESC, LOC_TAX_RATE.TX_RATE AS LOCAL_TAX_RATE, NULL AS AGENCY_ID, NULL AS CREDIT_RATING, NULL AS NET_WORTH, NULL AS MARKETING_NAMEPLATE, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) AS BATCH_ID, LOCALTIMESTAMP() AS EFFECTIVE_DATE FROM TPCDI_ODS.PUBLIC.CUSTOMER_ODS_STM CNS INNER JOIN TPCDI_WH.PUBLIC.DIM_TAX_RATE NAT_TAX_RATE ON CNS.C_NAT_TX_ID = NAT_TAX_RATE.TX_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_TAX_RATE LOC_TAX_RATE ON CNS.C_LCL_TX_ID = LOC_TAX_RATE.TX_ID WHERE CNS.METADATA$ACTION = 'INSERT'"}
    );
  dim_stmt.execute();
  
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_CUSTOMER_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Dim Customer records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var ods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FINWIRE_FIN_ODS_SP()"}
      );
  ods_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_FINANCIAL SELECT COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_FIN_ODS_STM.YEAR, FINWIRE_FIN_ODS_STM.QUARTER, FINWIRE_FIN_ODS_STM.QTR_START_DATE, FINWIRE_FIN_ODS_STM.REVENUE, FINWIRE_FIN_ODS_STM.EARNINGS, FINWIRE_FIN_ODS_STM.EPS, FINWIRE_FIN_ODS_STM.DILUTED_EPS, FINWIRE_FIN_ODS_STM.MARGIN, FINWIRE_FIN_ODS_STM.INVENTORY, FINWIRE_FIN_ODS_STM.ASSETS, FINWIRE_FIN_ODS_STM.LIABILITIES, FINWIRE_FIN_ODS_STM.SH_OUT, FINWIRE_FIN_ODS_STM.DILUTED_SH_OUT , LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_FIN_ODS_STM.METADATA$ACTION = 'INSERT'"}
      );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_FINANCIAL_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  var tsk_stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_TSK SUSPEND"});
  tsk_stmt.execute();
  return 'Historical Dim Financial records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_FINANCIAL_SP()
  returns string
  language javascript
  as
  $$
  var ods_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FINWIRE_FIN_ODS_SP()"}
      );
  ods_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_FINANCIAL SELECT COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_FIN_ODS_STM.YEAR, FINWIRE_FIN_ODS_STM.QUARTER, FINWIRE_FIN_ODS_STM.QTR_START_DATE, FINWIRE_FIN_ODS_STM.REVENUE, FINWIRE_FIN_ODS_STM.EARNINGS, FINWIRE_FIN_ODS_STM.EPS, FINWIRE_FIN_ODS_STM.DILUTED_EPS, FINWIRE_FIN_ODS_STM.MARGIN, FINWIRE_FIN_ODS_STM.INVENTORY, FINWIRE_FIN_ODS_STM.ASSETS, FINWIRE_FIN_ODS_STM.LIABILITIES, FINWIRE_FIN_ODS_STM.SH_OUT, FINWIRE_FIN_ODS_STM.DILUTED_SH_OUT, LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_FIN_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_FIN_ODS_STM.METADATA$ACTION = 'INSERT'"}
      );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_FINANCIAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Dim Financial records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var sec_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.FINWIRE_SEC_ODS_SP(4)"}
      );
  sec_stmt.execute();
  return 'All historical Security records have been processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_SECURITY_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.DIM_SECURITY SELECT TPCDI_WH.PUBLIC.DIM_SECURITY_SEQ.NEXTVAL, FINWIRE_SEC_ODS_STM.SYMBOL, FINWIRE_SEC_ODS_STM.ISSUE_TYPE, DIM_STATUS_TYPE.ST_NAME, FINWIRE_SEC_ODS_STM.NAME, FINWIRE_SEC_ODS_STM.EX_ID, COALESCE(ID.SK_COMPANY_ID,NAME.SK_COMPANY_ID), FINWIRE_SEC_ODS_STM.SH_OUT, FINWIRE_SEC_ODS_STM.FIRST_TRADE_DATE, FINWIRE_SEC_ODS_STM.FIRST_TRADE_EXCHG, FINWIRE_SEC_ODS_STM.DIVIDEND, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), LOCALTIMESTAMP() FROM TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS_STM INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON FINWIRE_SEC_ODS_STM.STATUS = DIM_STATUS_TYPE.ST_ID LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW ID ON IFF(LTRIM(FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK,'0')='','0',LTRIM(FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK,'0')) = ID.COMPANY_ID::STRING LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_COMPANY_NOW NAME ON FINWIRE_SEC_ODS_STM.CO_NAME_OR_CIK = NAME.NAME WHERE FINWIRE_SEC_ODS_STM.METADATA$ACTION = 'INSERT'"}
      );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_SECURITY_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Dim Security records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_SP()
  returns string
  language javascript
  as
  $$
  var ods_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_ODS.PUBLIC.TRADE_ODS SELECT TR.T_ID, TH.TH_DTS, TO_DATE(TH.TH_DTS), TH.TH_ST_ID, TR.T_TT_ID, TR.T_IS_CASH, TR.T_S_SYMB, TR.T_QTY, TR.T_BID_PRICE, TR.T_CA_ID, TR.T_EXEC_NAME, TR.T_TRADE_PRICE, TR.T_CHRG, TR.T_COMM, TR.T_TAX, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_I_STM TR INNER JOIN TPCDI_STG.PUBLIC.TRADEHISTORY_STG_I_STM TH ON TR.T_ID = TH.TH_T_ID WHERE (TH.TH_ST_ID = 'SBMT' AND TR.T_TT_ID IN ('TMB','TMS')) OR TH.TH_ST_ID = 'PNDG' "}
      );
  ods_stmt.execute();
  var audit1_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit1_stmt.execute();
  var dim1_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP()"}
      );
  dim1_stmt.execute();
  var cods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.TRADE_ODS USING (SELECT TR.T_ID T_ID, TH.TH_DTS T_DTS, TO_DATE(TH.TH_DTS) T_DT, TH.TH_ST_ID T_ST_ID, TR.T_TT_ID T_TT_ID, TR.T_IS_CASH T_IS_CASH, TR.T_S_SYMB T_S_SYMB, TR.T_QTY T_QTY, TR.T_BID_PRICE T_BID_PRICE, TR.T_CA_ID T_CA_ID, TR.T_EXEC_NAME T_EXEC_NAME, TR.T_TRADE_PRICE T_TRADE_PRICE, TR.T_CHRG T_CHRG, TR.T_COMM T_COMM, TR.T_TAX T_TAX FROM TPCDI_STG.PUBLIC.TRADE_STG_U_STM TR INNER JOIN TPCDI_STG.PUBLIC.TRADEHISTORY_STG_U_STM TH ON TR.T_ID = TH.TH_T_ID WHERE TH.TH_ST_ID in ('CMPT','CNCL') ) TRADE_STG ON TPCDI_ODS.PUBLIC.TRADE_ODS.T_ID = TRADE_STG.T_ID WHEN MATCHED THEN UPDATE SET TRADE_ODS.T_DTS = TRADE_STG.T_DTS, TRADE_ODS.T_DT = TRADE_STG.T_DT, TRADE_ODS.T_ST_ID = TRADE_STG.T_ST_ID, TRADE_ODS.T_TT_ID = TRADE_STG.T_TT_ID, TRADE_ODS.T_IS_CASH = TRADE_STG.T_IS_CASH, TRADE_ODS.T_S_SYMB = TRADE_STG.T_S_SYMB, TRADE_ODS.T_QTY = TRADE_STG.T_QTY, TRADE_ODS.T_BID_PRICE = TRADE_STG.T_BID_PRICE, TRADE_ODS.T_CA_ID = TRADE_STG.T_CA_ID, TRADE_ODS.T_EXEC_NAME = TRADE_STG.T_EXEC_NAME, TRADE_ODS.T_TRADE_PRICE = TRADE_STG.T_TRADE_PRICE, TRADE_ODS.T_CHRG = TRADE_STG.T_CHRG, TRADE_ODS.T_COMM = TRADE_STG.T_COMM, TRADE_ODS.T_TAX = TRADE_STG.T_TAX, TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP()  WHEN NOT MATCHED THEN INSERT VALUES (TRADE_STG.T_ID, TRADE_STG.T_DTS, TRADE_STG.T_DT, TRADE_STG.T_ST_ID, TRADE_STG.T_TT_ID, TRADE_STG.T_IS_CASH, TRADE_STG.T_S_SYMB, TRADE_STG.T_QTY, TRADE_STG.T_BID_PRICE, TRADE_STG.T_CA_ID, TRADE_STG.T_EXEC_NAME, TRADE_STG.T_TRADE_PRICE, TRADE_STG.T_CHRG, TRADE_STG.T_COMM, TRADE_STG.T_TAX, CURRENT_TIMESTAMP())"}
      );
  cods_stmt.execute();
  var audit2_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_HISTORICAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit2_stmt.execute();
  var dim2_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP()"}
      );
  dim2_stmt.execute();
  return 'Dim Trade historical records have been processed.';
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_SP()
  returns string
  language javascript
  as
  $$
  var iods_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_ODS.PUBLIC.TRADE_ODS SELECT T_ID, T_DTS, TO_DATE(T_DTS), T_ST_ID, T_TT_ID, T_IS_CASH, T_S_SYMB, T_QTY, T_BID_PRICE, T_CA_ID, T_EXEC_NAME, T_TRADE_PRICE, T_CHRG, T_COMM, T_TAX, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_I_STM WHERE CDC_FLAG = 'I' "}
      );
  iods_stmt.execute();
  var audit1_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit1_stmt.execute();
  var dim1_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() "}
      );
  dim1_stmt.execute();
  var sods_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_ODS.PUBLIC.TRADE_ODS SET TRADE_ODS.T_DTS = COALESCE(TS.T_DTS,TRADE_ODS.T_DTS), TRADE_ODS.T_DT = COALESCE(TO_DATE(TS.T_DTS),TRADE_ODS.T_DTS), TRADE_ODS.T_ST_ID = COALESCE(TS.T_ST_ID,TRADE_ODS.T_ST_ID), TRADE_ODS.T_TT_ID = COALESCE(TS.T_TT_ID,TRADE_ODS.T_TT_ID), TRADE_ODS.T_IS_CASH = COALESCE(TS.T_IS_CASH,TRADE_ODS.T_IS_CASH), TRADE_ODS.T_S_SYMB = COALESCE(TS.T_S_SYMB,TRADE_ODS.T_S_SYMB), TRADE_ODS.T_QTY = COALESCE(TS.T_QTY,TRADE_ODS.T_QTY), TRADE_ODS.T_BID_PRICE = COALESCE(TS.T_BID_PRICE,TRADE_ODS.T_BID_PRICE), TRADE_ODS.T_CA_ID = COALESCE(TS.T_CA_ID,TRADE_ODS.T_CA_ID), TRADE_ODS.T_EXEC_NAME = COALESCE(TS.T_EXEC_NAME,TRADE_ODS.T_EXEC_NAME), TRADE_ODS.T_TRADE_PRICE = COALESCE(TS.T_TRADE_PRICE,TRADE_ODS.T_TRADE_PRICE), TRADE_ODS.T_CHRG = COALESCE(TS.T_CHRG,TRADE_ODS.T_CHRG), TRADE_ODS.T_COMM = COALESCE(TS.T_COMM,TRADE_ODS.T_COMM), TRADE_ODS.T_TAX = COALESCE(TS.T_TAX,TRADE_ODS.T_TAX), TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_US_STM TS WHERE TS.CDC_FLAG = 'U' AND TS.T_ST_ID = 'SBMT' AND TRADE_ODS.T_ID = TS.T_ID"}
      );
  sods_stmt.execute();
  var audit2_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit2_stmt.execute();
  var dim2_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() "}
      );
  dim2_stmt.execute();
  var cods_stmt = snowflake.createStatement(
      {sqlText: "UPDATE TPCDI_ODS.PUBLIC.TRADE_ODS SET TRADE_ODS.T_DTS = COALESCE(TS.T_DTS,TRADE_ODS.T_DTS), TRADE_ODS.T_DT = COALESCE(TO_DATE(TS.T_DTS),TRADE_ODS.T_DTS), TRADE_ODS.T_ST_ID = COALESCE(TS.T_ST_ID,TRADE_ODS.T_ST_ID), TRADE_ODS.T_TT_ID = COALESCE(TS.T_TT_ID,TRADE_ODS.T_TT_ID), TRADE_ODS.T_IS_CASH = COALESCE(TS.T_IS_CASH,TRADE_ODS.T_IS_CASH), TRADE_ODS.T_S_SYMB = COALESCE(TS.T_S_SYMB,TRADE_ODS.T_S_SYMB), TRADE_ODS.T_QTY = COALESCE(TS.T_QTY,TRADE_ODS.T_QTY), TRADE_ODS.T_BID_PRICE = COALESCE(TS.T_BID_PRICE,TRADE_ODS.T_BID_PRICE), TRADE_ODS.T_CA_ID = COALESCE(TS.T_CA_ID,TRADE_ODS.T_CA_ID), TRADE_ODS.T_EXEC_NAME = COALESCE(TS.T_EXEC_NAME,TRADE_ODS.T_EXEC_NAME), TRADE_ODS.T_TRADE_PRICE = COALESCE(TS.T_TRADE_PRICE,TRADE_ODS.T_TRADE_PRICE), TRADE_ODS.T_CHRG = COALESCE(TS.T_CHRG,TRADE_ODS.T_CHRG), TRADE_ODS.T_COMM = COALESCE(TS.T_COMM,TRADE_ODS.T_COMM), TRADE_ODS.T_TAX = COALESCE(TS.T_TAX,TRADE_ODS.T_TAX), TRADE_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.TRADE_STG_UC_STM TS WHERE TS.CDC_FLAG = 'U' AND TS.T_ST_ID in ('CMPT','CNCL') AND TRADE_ODS.T_ID = TS.T_ID "}
      );
  cods_stmt.execute();
  var audit3_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_INCREMENTAL_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), 0, $1 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit3_stmt.execute();
  var dim3_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_TRADE_SP() "}
      );
  dim3_stmt.execute();
  return 'Dim Trade incremental records have been processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.DIM_TRADE_SP()
  returns string
  language javascript
  as
  $$
  var dim_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_WH.PUBLIC.DIM_TRADE USING (SELECT TRADE_ODS_STM.T_ID TRADE_ID, COALESCE(DIM_ACCOUNT_NOW.SK_BROKER_ID,0) SK_BROKER_ID, DIM_DATE.DATE_ID DATE_ID, DIM_TIME.TIME_ID TIME_ID, DIM_STATUS_TYPE.ST_NAME STATUS, DIM_TRADE_TYPE.TT_NAME TYPE, TRADE_ODS_STM.T_IS_CASH CASH_FLAG, COALESCE(DIM_SECURITY_NOW.SK_SECURITY_ID,0) SK_SECURITY_ID, COALESCE(DIM_SECURITY_NOW.SK_COMPANY_ID,0) SK_COMPANY_ID, TRADE_ODS_STM.T_QTY QUANTITY, TRADE_ODS_STM.T_BID_PRICE BID_PRICE, COALESCE(DIM_ACCOUNT_NOW.SK_CUSTOMER_ID,0) SK_CUSTOMER_ID, COALESCE(DIM_ACCOUNT_NOW.SK_ACCOUNT_ID,0) SK_ACCOUNT_ID, TRADE_ODS_STM.T_EXEC_NAME EXECUTED_BY, TRADE_ODS_STM.T_TRADE_PRICE TRADE_PRICE, TRADE_ODS_STM.T_CHRG FEE, TRADE_ODS_STM.T_COMM COMMISSION, TRADE_ODS_STM.T_TAX TAX, (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH) BATCH_ID, METADATA$ACTION, METADATA$ISUPDATE FROM TPCDI_ODS.PUBLIC.TRADE_ODS_STM   INNER JOIN TPCDI_WH.PUBLIC.DIM_STATUS_TYPE ON TRADE_ODS_STM.T_ST_ID = DIM_STATUS_TYPE.ST_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_TRADE_TYPE ON TRADE_ODS_STM.T_TT_ID = DIM_TRADE_TYPE.TT_ID LEFT OUTER JOIN TPCDI_WH.PUBLIC.DIM_ACCOUNT_NOW ON TRADE_ODS_STM.T_CA_ID = DIM_ACCOUNT_NOW.ACCOUNT_ID INNER JOIN TPCDI_WH.PUBLIC.DIM_SECURITY_NOW ON TRADE_ODS_STM.T_S_SYMB = DIM_SECURITY_NOW.SYMBOL INNER JOIN TPCDI_WH.PUBLIC.DIM_DATE ON TRADE_ODS_STM.T_DT = DIM_DATE.DATE_VALUE INNER JOIN TPCDI_WH.PUBLIC.DIM_TIME ON TO_TIME(TO_CHAR(TRADE_ODS_STM.T_DTS,'HH:MM:SS')) = DIM_TIME.TIME_VALUE) TRADE_UPDATES ON DIM_TRADE.TRADE_ID = TRADE_UPDATES.TRADE_ID WHEN MATCHED AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'TRUE' AND TRADE_UPDATES.STATUS IN ('Completed','Canceled') THEN UPDATE SET DIM_TRADE.SK_BROKER_ID = TRADE_UPDATES.SK_BROKER_ID, DIM_TRADE.SK_CLOSE_DATE_ID = TRADE_UPDATES.DATE_ID, DIM_TRADE.SK_CLOSE_TIME_ID = TRADE_UPDATES.TIME_ID, DIM_TRADE.STATUS = TRADE_UPDATES.STATUS, DIM_TRADE.TYPE = TRADE_UPDATES.TYPE, DIM_TRADE.CASH_FLAG = TRADE_UPDATES.CASH_FLAG, DIM_TRADE.SK_SECURITY_ID = TRADE_UPDATES.SK_SECURITY_ID, DIM_TRADE.SK_COMPANY_ID = TRADE_UPDATES.SK_COMPANY_ID, DIM_TRADE.QUANTITY = TRADE_UPDATES.QUANTITY, DIM_TRADE.BID_PRICE = TRADE_UPDATES.BID_PRICE, DIM_TRADE.SK_CUSTOMER_ID = TRADE_UPDATES.SK_CUSTOMER_ID, DIM_TRADE.SK_ACCOUNT_ID = TRADE_UPDATES.SK_ACCOUNT_ID, DIM_TRADE.EXECUTED_BY = TRADE_UPDATES.EXECUTED_BY, DIM_TRADE.TRADE_PRICE = TRADE_UPDATES.TRADE_PRICE, DIM_TRADE.FEE = TRADE_UPDATES.FEE, DIM_TRADE.COMMISSION = TRADE_UPDATES.COMMISSION, DIM_TRADE.TAX = TRADE_UPDATES.TAX, DIM_TRADE.BATCH_ID = TRADE_UPDATES.BATCH_ID, DIM_TRADE.LAST_UPDATED_TS = LOCALTIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES (TRADE_UPDATES.TRADE_ID, TRADE_UPDATES.SK_BROKER_ID, TRADE_UPDATES.DATE_ID, TRADE_UPDATES.TIME_ID, NULL, NULL, TRADE_UPDATES.STATUS, TRADE_UPDATES.TYPE, TRADE_UPDATES.CASH_FLAG, TRADE_UPDATES.SK_SECURITY_ID, TRADE_UPDATES.SK_COMPANY_ID, TRADE_UPDATES.QUANTITY, TRADE_UPDATES.BID_PRICE, TRADE_UPDATES.SK_CUSTOMER_ID, TRADE_UPDATES.SK_ACCOUNT_ID, TRADE_UPDATES.EXECUTED_BY, TRADE_UPDATES.TRADE_PRICE, TRADE_UPDATES.FEE, TRADE_UPDATES.COMMISSION, TRADE_UPDATES.TAX, TRADE_UPDATES.BATCH_ID, LOCALTIMESTAMP() )"}      );
  dim_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'DIM_TRADE_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  return 'Dim Trade rows have been processed.';
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FINWIRE_CMP_ODS_SP(levels float)
  returns string
  language javascript
  as
  $$
  var level_counter = 1
  while (level_counter <= LEVELS)
  {
  var ods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS USING (WITH NTH_PTS_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(C.PTS," + level_counter + ") OVER (PARTITION BY C.CIK ORDER BY C.PTS) AS NTH_PTS_DATE, C.CIK AS C_CIK FROM TPCDI_STG.PUBLIC.FINWIRE_CMP_STG C) SELECT FCS.PTS, FCS.REC_TYPE, FCS.COMPANY_NAME, FCS.CIK, FCS.STATUS, FCS.INDUSTRY_ID, FCS.SP_RATING, FCS.FOUNDING_DATE, FCS.ADDR_LINE1, FCS.ADDR_LINE2, FCS.POSTAL_CODE, FCS.CITY, FCS.STATE_PROVINCE, FCS.COUNTRY, FCS.CEO_NAME, FCS.DESCRIPTION FROM TPCDI_STG.PUBLIC.FINWIRE_CMP_STG FCS JOIN NTH_PTS_DATE_ROW ON NTH_PTS_DATE_ROW.NTH_PTS_DATE = FCS.PTS AND NTH_PTS_DATE_ROW.C_CIK = FCS.CIK) FINWIRE_CMP_STG ON TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS.CIK = FINWIRE_CMP_STG.CIK WHEN MATCHED THEN UPDATE SET FINWIRE_CMP_ODS.PTS = FINWIRE_CMP_STG.PTS, FINWIRE_CMP_ODS.REC_TYPE = FINWIRE_CMP_STG.REC_TYPE, FINWIRE_CMP_ODS.COMPANY_NAME = FINWIRE_CMP_STG.COMPANY_NAME, FINWIRE_CMP_ODS.STATUS = FINWIRE_CMP_STG.STATUS, FINWIRE_CMP_ODS.INDUSTRY_ID = FINWIRE_CMP_STG.INDUSTRY_ID, FINWIRE_CMP_ODS.SP_RATING = FINWIRE_CMP_STG.SP_RATING, FINWIRE_CMP_ODS.FOUNDING_DATE = FINWIRE_CMP_STG.FOUNDING_DATE, FINWIRE_CMP_ODS.ADDR_LINE1 = FINWIRE_CMP_STG.ADDR_LINE1, FINWIRE_CMP_ODS.ADDR_LINE2 = FINWIRE_CMP_STG.ADDR_LINE2, FINWIRE_CMP_ODS.POSTAL_CODE = FINWIRE_CMP_STG.POSTAL_CODE, FINWIRE_CMP_ODS.CITY = FINWIRE_CMP_STG.CITY, FINWIRE_CMP_ODS.STATE_PROVINCE = FINWIRE_CMP_STG.STATE_PROVINCE, FINWIRE_CMP_ODS.COUNTRY = FINWIRE_CMP_STG.COUNTRY, FINWIRE_CMP_ODS.CEO_NAME = FINWIRE_CMP_STG.CEO_NAME, FINWIRE_CMP_ODS.DESCRIPTION = FINWIRE_CMP_STG.DESCRIPTION, FINWIRE_CMP_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES ( FINWIRE_CMP_STG.PTS, FINWIRE_CMP_STG.REC_TYPE, FINWIRE_CMP_STG.COMPANY_NAME, FINWIRE_CMP_STG.CIK, FINWIRE_CMP_STG.STATUS, FINWIRE_CMP_STG.INDUSTRY_ID, FINWIRE_CMP_STG.SP_RATING, FINWIRE_CMP_STG.FOUNDING_DATE, FINWIRE_CMP_STG.ADDR_LINE1, FINWIRE_CMP_STG.ADDR_LINE2, FINWIRE_CMP_STG.POSTAL_CODE, FINWIRE_CMP_STG.CITY, FINWIRE_CMP_STG.STATE_PROVINCE, FINWIRE_CMP_STG.COUNTRY, FINWIRE_CMP_STG.CEO_NAME, FINWIRE_CMP_STG.DESCRIPTION, CURRENT_TIMESTAMP())"}
    );
  ods_stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_CMP_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
    );
  audit_stmt.execute();
  var dim_stmt = snowflake.createStatement(
      {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_COMPANY_SP()"}
    );
  dim_stmt.execute();
  level_counter++
  }
  return 'Company records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FINWIRE_FIN_ODS_SP()
  returns string
  language javascript
  as
  $$
  var stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS SELECT PTS, REC_TYPE, YEAR, QUARTER, QTR_START_DATE, POSTING_DATE, REVENUE, EARNINGS, EPS, DILUTED_EPS, MARGIN, INVENTORY, ASSETS, LIABILITIES, SH_OUT, DILUTED_SH_OUT, CO_NAME_OR_CIK, CURRENT_TIMESTAMP() FROM TPCDI_STG.PUBLIC.FINWIRE_FIN_STG"}
      );
  stmt.execute();
  var audit_stmt = snowflake.createStatement(
      {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_FIN_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, 0 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
  audit_stmt.execute();
  return 'Financial ODS records processed.';
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.FINWIRE_SEC_ODS_SP(levels float)
  returns string
  language javascript
  as
  $$
  var level_counter = 1
  while (level_counter <= LEVELS)
  {
  var ods_stmt = snowflake.createStatement(
      {sqlText: "MERGE INTO TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS USING ( WITH NTH_PTS_DATE_ROW AS (SELECT DISTINCT NTH_VALUE(S.PTS," + level_counter + ") OVER (PARTITION BY S.SYMBOL ORDER BY S.PTS) AS NTH_PTS_DATE, S.SYMBOL AS S_SYMBOL FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG S) SELECT FSS.PTS, FSS.REC_TYPE, FSS.SYMBOL, FSS.ISSUE_TYPE, FSS.STATUS, FSS.NAME, FSS.EX_ID, FSS.SH_OUT, FSS.FIRST_TRADE_DATE, FSS.FIRST_TRADE_EXCHG, FSS.DIVIDEND, FSS.CO_NAME_OR_CIK FROM TPCDI_STG.PUBLIC.FINWIRE_SEC_STG FSS JOIN NTH_PTS_DATE_ROW ON NTH_PTS_DATE_ROW.NTH_PTS_DATE = FSS.PTS AND NTH_PTS_DATE_ROW.S_SYMBOL = FSS.SYMBOL ) FINWIRE_SEC_STG ON TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS.SYMBOL = FINWIRE_SEC_STG.SYMBOL WHEN MATCHED THEN UPDATE SET FINWIRE_SEC_ODS.PTS = FINWIRE_SEC_STG.PTS, FINWIRE_SEC_ODS.REC_TYPE = FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_ODS.ISSUE_TYPE = FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_ODS.STATUS = FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_ODS.NAME = FINWIRE_SEC_STG.NAME, FINWIRE_SEC_ODS.EX_ID = FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_ODS.SH_OUT = FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_ODS.FIRST_TRADE_DATE = FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_ODS.FIRST_TRADE_EXCHG = FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_ODS.DIVIDEND = FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_ODS.CO_NAME_OR_CIK = FINWIRE_SEC_STG.CO_NAME_OR_CIK, FINWIRE_SEC_ODS.LAST_UPDATED_TS = CURRENT_TIMESTAMP() WHEN NOT MATCHED THEN INSERT VALUES ( FINWIRE_SEC_STG.PTS, FINWIRE_SEC_STG.REC_TYPE, FINWIRE_SEC_STG.SYMBOL, FINWIRE_SEC_STG.ISSUE_TYPE, FINWIRE_SEC_STG.STATUS, FINWIRE_SEC_STG.NAME, FINWIRE_SEC_STG.EX_ID, FINWIRE_SEC_STG.SH_OUT, FINWIRE_SEC_STG.FIRST_TRADE_DATE, FINWIRE_SEC_STG.FIRST_TRADE_EXCHG, FINWIRE_SEC_STG.DIVIDEND, FINWIRE_SEC_STG.CO_NAME_OR_CIK, CURRENT_TIMESTAMP())"}
      );
    ods_stmt.execute();
    var audit_stmt = snowflake.createStatement(
        {sqlText: "INSERT INTO TPCDI_WH.PUBLIC.AUDIT SELECT 'FINWIRE_SEC_ODS_SP', LOCALTIMESTAMP(), (SELECT MAX(BATCH_ID) FROM TPCDI_WH.PUBLIC.CTRL_BATCH), $1, $2 FROM TABLE(RESULT_SCAN(LAST_QUERY_ID()))"}
      );
    audit_stmt.execute();
    if (level_counter == LEVELS) {
    var stm_stmt = snowflake.createStatement(
        {sqlText: "CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_SECURITY_STM ON TABLE TPCDI_WH.PUBLIC.DIM_SECURITY"}
      );
    stm_stmt.execute();
    }
    var wh_stmt = snowflake.createStatement(
        {sqlText: "CALL TPCDI_WH.PUBLIC.DIM_SECURITY_SP()"}
      );
    wh_stmt.execute();
    level_counter++
  }
  return 'Historical Security records processed.';
  $$
;
CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.RESET_ALL_SP()
  returns string
  language javascript
  as
  $$
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.CTRL_BATCH"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.LOAD_SNAPSHOT"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.AUDIT"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_MGMT_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG"} ); rs = stmt.execute();
  //stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.CUSTOMER_TEST_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.DATE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.FINWIRE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.HR_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.PROSPECT_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.TAXRATE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.TIME_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.TRADE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_ODS.PUBLIC.TRADE_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_ACCOUNT"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_BROKER"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_COMPANY"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_CUSTOMER"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_DATE"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_FINANCIAL"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_INDUSTRY"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_SECURITY"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_STATUS_TYPE"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TAX_RATE"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TIME"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TRADE"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.DIM_TRADE_TYPE"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_CASH_BALANCES"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_HOLDINGS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_PROSPECT"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "TRUNCATE TABLE TPCDI_WH.PUBLIC.FACT_WATCHES"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_ACCOUNT_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR ACCOUNT.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_BROKER_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR BROKER.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_COMPANY_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR COMPANY.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_CUSTOMER_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR CUSTOMER.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.DIM_SECURITY_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE SURROGATE KEY FOR SECURITY.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE SEQUENCE TPCDI_WH.PUBLIC.CTRL_BATCH_SEQ START WITH=1 INCREMENT=1 COMMENT='DATABASE SEQUENCE TO SOURCE THE BATCH_ID FOR THE BATCH CONTROL TABLE.'"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.ACCOUNT_STG_STM ON TABLE TPCDI_STG.PUBLIC.ACCOUNT_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CASHTRANSACTION_STG_STM ON TABLE TPCDI_STG.PUBLIC.CASHTRANSACTION_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.CUSTOMER_STG_STM ON TABLE TPCDI_STG.PUBLIC.CUSTOMER_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM ON TABLE TPCDI_STG.PUBLIC.DAILYMARKET_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.DATE_STG_STM ON TABLE TPCDI_STG.PUBLIC.DATE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG_STM ON TABLE TPCDI_STG.PUBLIC.HOLDINGHISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.HR_STG_STM ON TABLE TPCDI_STG.PUBLIC.HR_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.INDUSTRY_STG_STM ON TABLE TPCDI_STG.PUBLIC.INDUSTRY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.PROSPECT_STG_STM ON TABLE TPCDI_STG.PUBLIC.PROSPECT_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM ON TABLE TPCDI_STG.PUBLIC.STATUSTYPE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TAXRATE_STG_STM ON TABLE TPCDI_STG.PUBLIC.TAXRATE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TIME_STG_STM ON TABLE TPCDI_STG.PUBLIC.TIME_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_I_STM ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADEHISTORY_STG_U_STM ON TABLE TPCDI_STG.PUBLIC.TRADEHISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADETYPE_STG_STM ON TABLE TPCDI_STG.PUBLIC.TRADETYPE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_I_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_UC_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_US_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.TRADE_STG_U_STM ON TABLE TPCDI_STG.PUBLIC.TRADE_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_ACTV_STM ON TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_STG.PUBLIC.WATCH_HISTORY_STG_CNCL_STM ON TABLE TPCDI_STG.PUBLIC.WATCH_HISTORY_STG"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.ACCOUNT_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.ACCOUNT_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.CUSTOMER_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.CUSTOMER_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_CMP_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_FIN_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_ODS.PUBLIC.TRADE_ODS_STM ON TABLE TPCDI_ODS.PUBLIC.TRADE_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM ON TABLE TPCDI_ODS.PUBLIC.FINWIRE_SEC_ODS"} ); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "CREATE OR REPLACE STREAM TPCDI_WH.PUBLIC.DIM_SECURITY_STM ON TABLE TPCDI_ODS.PUBLIC.TRADE_ODS"} ); rs = stmt.execute();
  rs.next();
  return "All objects have been reset.";
  $$
;

CREATE OR REPLACE PROCEDURE TPCDI_WH.PUBLIC.STOP_TASKS_SP()
  returns string
  language javascript
  as
  $$
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.CHECK_STREAM_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.FACT_WATCHES_INCREMENTAL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_5_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_10_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_100_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_1000_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_5_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_10_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_100_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  stmt = snowflake.createStatement({sqlText: "ALTER TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_1000_CTRL_TSK SUSPEND"}); rs = stmt.execute();
  rs.next();
  output = rs.getColumnValue(1);
  return output;
  $$
;
-- Tasks that monitor data in TPCDI_STG
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  WHEN SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.CUSTOMER_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_MASTER_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.DATE_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_DATE_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.INDUSTRY_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_INDUSTRY_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.STATUSTYPE_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_STATUS_TYPE_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.TAXRATE_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_TAX_RATE_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.TIME_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_TIME_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
WHEN
  SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.TRADETYPE_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.DIM_TRADE_TYPE_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  WHEN SYSTEM$STREAM_HAS_DATA('TPCDI_STG.PUBLIC.DAILYMARKET_STG_STM')
AS
CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_INCREMENTAL_MASTER_SP();



CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.CHECK_STREAM_CTRL_TSK
	WAREHOUSE = TPCDI_GENERAL
WHEN SYSTEM$STREAM_HAS_DATA('TPCDI_WH.PUBLIC.DIM_ACCOUNT_STM') AND SYSTEM$STREAM_HAS_DATA('TPCDI_WH.PUBLIC.DIM_SECURITY_STM')
AS
CALL TPCDI_WH.PUBLIC.MAINTENANCE_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_TRADE_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_1000_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
AS
CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(1000);

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_100_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_100_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.INCREMENTAL_DW_100_CTRL_TSK
AS
CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(100);

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_10_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_10_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.INCREMENTAL_DW_10_CTRL_TSK
AS
CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(10);

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_5_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_LOAD_5_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.INCREMENTAL_DW_5_CTRL_TSK
AS
CALL TPCDI_STG.PUBLIC.START_LOAD_INCREMENTAL_TASKS_SP(5)
;

-- Tasks that utilize only TCPDI_WH data
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_CUSTOMER_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_CUSTOMER_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_ACCOUNT_MASTER_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_BROKER_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_REFERENCE_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_COMPANY_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.DIM_COMPANY_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_FINANCIAL_HISTORICAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_FINANCIAL_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.DIM_FINANCIAL_SP()
;


CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_COMPANY_HISTORICAL_TSK
AS 
CALL TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_SECURITY_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.DIM_SECURITY_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_SP()
;CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_HISTORICAL_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_CASH_BALANCES_INCREMENTAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_HOLDINGS_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_TRADE_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_HOLDINGS_INCREMENTAL_SP()
;CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_SECURITY_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_MARKET_HISTORY_HISTORICAL_MASTER_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_HISTORICAL_MASTER_SP()
;
CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_PROSPECT_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_PROSPECT_INCREMENTAL_MASTER_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_TSK
  WAREHOUSE = TPCDI_GENERAL
AS
CALL TPCDI_WH.PUBLIC.FACT_WATCHES_HISTORICAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.FACT_WATCHES_INCREMENTAL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.DIM_ACCOUNT_INCREMENTAL_TSK
AS
CALL TPCDI_WH.PUBLIC.FACT_WATCHES_INCREMENTAL_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.INCREMENTAL_DW_1000_CTRL_TSK
  WAREHOUSE = TPCDI_GENERAL
  AFTER TPCDI_WH.PUBLIC.FACT_HOLDINGS_HISTORICAL_TSK
AS
CALL TPCDI_WH.PUBLIC.START_DW_INCREMENTAL_TASKS_SP();

CREATE OR REPLACE TASK TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_TSK
	WAREHOUSE = TPCDI_GENERAL
	
AS
CALL TPCDI_WH.PUBLIC.LOAD_SNAPSHOT_SP();
